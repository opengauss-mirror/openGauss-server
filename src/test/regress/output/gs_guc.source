\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc check  -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c max_stack_depth
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c max_stack_depth check ].
expected guc information: ecs-7159: max_stack_depth=NULL: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc check: ecs-7159: max_stack_depth=NULL: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

Total GUC values: 1. Failed GUC values: 0.
The details for max_stack_depth:
    [ecs-7159]  max_stack_depth=NULL  [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -V
gs_guc (openGauss) 9.2.4
\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -?
gs_guc is an inferface to modify config files or encrypt plain text to cipher text.

Checking GUC parameters:
    gs_guc check [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} {-c "parameter", -c "parameter", ...}
    gs_guc check [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} {-c parameter, -c parameter, ...}

Configuring GUC parameters:
  Usage:
        gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--lcname=LCNAME] [--ignore-node=NODES] {-c "parameter = value" -c "parameter = value" ...}
        gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--lcname=LCNAME] [--ignore-node=NODES] {-c " parameter = value " -c " parameter = value " ...}
        gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--lcname=LCNAME] [--ignore-node=NODES] {-c "parameter = 'value'" -c "parameter = 'value'" ...}
        gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--lcname=LCNAME] [--ignore-node=NODES] {-c " parameter = 'value' " -c " parameter = 'value' " ...}
        gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--lcname=LCNAME] [--ignore-node=NODES] {-c "parameter" -c "parameter" ...}
    e.g. gs_guc set -Z datanode -N all -I all -c "program = '\"Hello\", World\!'".
    e.g. gs_guc reload -Z datanode -N all -I all -c "program = '\"Hello\", World\!'".

  If parameter value set or reload to DEFAULT OR COMMENT configuration parameter, use the form: -c "parameter"

  You can choose Usage as you like, and perhaps the first one will be more suitable for you!

Configuring Authentication Policy:
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME IPADDR IPMASK AUTHMEHOD authentication-options" 
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME IPADDR-WITH-IPMASK AUTHMEHOD authentication-options" 
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME HOSTNAME AUTHMEHOD authentication-options" 
  If authentication policy need to set/reload DEFAULT OR COMMENT then provide without authentication menthod, use the form: 
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME IPADDR IPMASK" 
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME IPADDR-WITH-IPMASK " 
    gs_guc {set | reload} [-Z NODE-TYPE] [-N NODE-NAME] {-I INSTANCE-NAME | -D DATADIR} [--ignore-node=NODES] -h "HOSTTYPE DATABASE USERNAME HOSTNAME" 

Encrypt plain text to cipher text:
    gs_guc encrypt [-M keymode] -K password [-U username] {-D DATADIR | -R RANDFILEDIR -C CIPHERFILEDIR}

Generate plain cipher key to cipher text:
    gs_guc generate [-o prefix] -S cipherkey -D DATADIR

Common options:
  -N                      nodename in which this command need to be executed
  -I                      instance name
  -D, --pgdata=DATADIR    location of the database storage area
  -c    parameter=value   the parameter to set
  -c    parameter         the parameter value to DEFAULT (i.e comments in configuration file)
  --lcname=LCNAME         logical cluter name. It only can be used with datanode
  --ignore-node=NODES     Nodes which need to ignore. It only can be used with set/reload operation,and CN/DN nodetype
  -h    host-auth-policy  to set authentication policy in HBA conf file
  -?, --help              show this help, then exit
  -V, --version           output version information, then exit

Options for set with -c parameter: 
  -Z NODE-TYPE   can be "datanode", "cmserver" or "cmagent". NODE-TYPE is used to identify configuration file (with -c parameter) in data directory
  "datanode"                                      -- postgresql.conf
  "cmserver"                                      -- cm_server.conf
  "cmagent"                                       -- cm_agent.conf

Options for set and reload with -h host-auth-policy: 
  -Z NODE-TYPE   can only be "datanode"

Options for encrypt: 
  -M, --keymode=MODE     the cipher files will be applies in server, client or source,default value is server mode
  -K PASSWORD            the plain password you want to encrypt, which length should between 8~15 and at least 3 different types of characters
  -U, --keyuser=USER     if appointed, the cipher files will name with the user name
  -R RANDFILEDIR         set the dir that put the rand file
  -C CIPHERFILEDIR       set the dir that put the cipher file


Options for generate: 
  -o PREFIX               the cipher files prefix. default value is obsserver
  -S CIPHERKEY            the plain password you want to encrypt, which length should between 8~15 and at least 3 different types of characters
-----Check(GUC)
\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc check -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c cstore_buffers
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c cstore_buffers check ].
expected guc information: ecs-7159: cstore_buffers=NULL: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc check: ecs-7159: cstore_buffers=512MB: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

Total GUC values: 1. Failed GUC values: 0.
The value of parameter cstore_buffers is same on all instances.
    cstore_buffers=512MB

-----Set(GUC)
\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc set -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c "cstore_buffers=10GB"
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c cstore_buffers=10GB set ].
expected instance path: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc set: cstore_buffers=10GB: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

Total instances: 1. Failed instances: 0.
Success to perform gs_guc!

\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc set -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c "intervalstyle=a"
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c intervalstyle=a set ].
expected instance path: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc set: intervalstyle=a: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

Total instances: 1. Failed instances: 0.
Success to perform gs_guc!

\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc set -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c "enable_beta_opfusion=on"
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c enable_beta_opfusion=on set ].
expected instance path: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc set: enable_beta_opfusion=on: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]

Total instances: 1. Failed instances: 0.
Success to perform gs_guc!

\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc set -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c "enable_beta_nestloop_fusion=on"
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c enable_beta_nestloop_fusion=on set ].
ERROR: The name of parameter "enable_beta_nestloop_fusion" is incorrect. It is not within the CN/DN support parameters or it is a read only parameter.
Try "gs_guc --help" for more information.
-----Reload(GUC)
\! /usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc reload -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c "cstore_buffers=10GB"
The gs_guc run with the following arguments: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/./tmp_check/install//data1/jiangyan/openGauss-server//dest/bin/gs_guc -D /usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/ -c cstore_buffers=10GB reload ].
expected instance path: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
gs_guc reload: cstore_buffers=10GB: [/usr3/data1/jiangyan/openGauss-server/src/test/regress/tmp_check/datanode1/postgresql.conf]
server signaled

Total instances: 1. Failed instances: 0.
Success to perform gs_guc!

