/*
 * This file is used to test three possible paths of hash agg stream paths
 */
-- Part-3
drop schema if exists distribute_aggregates_part3 cascade;
NOTICE:  schema "distribute_aggregates_part3" does not exist, skipping
create schema distribute_aggregates_part3;
set current_schema = distribute_aggregates_part3;
-- prepare a temp table for import data
create table tmp_t1(c1 int);
insert into tmp_t1 values (1);
-- Create Table and Insert Data
create table t_agg1(a int, b int, c int, d int, e int, f int, g regproc);
create table t_agg2(a int, b int, c int);
insert into t_agg1 select generate_series(1, 10000), generate_series(1, 10000)%5000, generate_series(1, 10000)%500, generate_series(1, 10000)%5, 500, 3, 'sin' from tmp_t1;
insert into t_agg2 select generate_series(1, 10), generate_series(11, 2, -1), generate_series(3, 12);
/*select * from table_skewness('t_agg1', 'b,c') order by 1, 2, 3;*/
analyze t_agg1;
analyze t_agg2;
-- (3) windowagg
explain (costs off) select c, sum(x) from (select c, row_number() over (partition by c, d, e order by d, e) x from t_agg1) group by c;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Group By Key: t_agg1.c
   ->  WindowAgg
         ->  Sort
               Sort Key: t_agg1.c, t_agg1.d, t_agg1.e
               ->  Seq Scan on t_agg1
(6 rows)

select c, sum(x) from (select c, row_number() over (partition by c, d, e order by d, e) x from t_agg1) group by c order by c limit 10;
 c | sum 
---+-----
 0 | 210
 1 | 210
 2 | 210
 3 | 210
 4 | 210
 5 | 210
 6 | 210
 7 | 210
 8 | 210
 9 | 210
(10 rows)

explain (costs off) select x, sum(c+d+e) from (select c, d, e, row_number() over (partition by d order by c, e) x from t_agg1) group by x;
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group By Key: __unnamed_subquery__.x
   ->  Subquery Scan on __unnamed_subquery__
         ->  WindowAgg
               ->  Sort
                     Sort Key: t_agg1.d, t_agg1.c, t_agg1.e
                     ->  Seq Scan on t_agg1
(7 rows)

select x, sum(c+d+e) from (select c, d, e, row_number() over (partition by d order by c, e) x from t_agg1) group by x order by x limit 10;
 x  | sum  
----+------
  1 | 2520
  2 | 2520
  3 | 2520
  4 | 2520
  5 | 2520
  6 | 2520
  7 | 2520
  8 | 2520
  9 | 2520
 10 | 2520
(10 rows)

-- join
explain (costs off) select sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.c;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c
   ->  Hash Join
         Hash Cond: (t_agg1.c = t_agg2.b)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.c order by t_agg1.c limit 10;
  sum  
-------
 95040
 95060
 95080
 95100
 95120
 95140
 95160
 95180
 95200
 95220
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, t_agg2.b-t_agg2.a c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a, b; 
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.d
   ->  Hash Join
         Hash Cond: (t_agg1.b = t_agg2.c)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, t_agg2.b-t_agg2.a c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a, b order by a, b limit 10;
 a  | b | count 
----+---+-------
  3 | 3 |     2
  4 | 4 |     2
  5 | 0 |     2
  6 | 1 |     2
  7 | 2 |     2
  8 | 3 |     2
  9 | 4 |     2
 10 | 0 |     2
 11 | 1 |     2
 12 | 2 |     2
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, sum(t_agg2.b-t_agg2.a) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.d, t_agg1.c) group by a, b; 
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.d
   ->  HashAggregate
         Group By Key: t_agg1.d, t_agg1.c
         ->  Hash Join
               Hash Cond: (t_agg1.b = t_agg2.c)
               ->  Seq Scan on t_agg1
               ->  Hash
                     ->  Seq Scan on t_agg2
(9 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, sum(t_agg2.b-t_agg2.a) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.d, t_agg1.c) group by a, b order by a, b limit 10;
 a  | b | count 
----+---+-------
  3 | 3 |     1
  4 | 4 |     1
  5 | 0 |     1
  6 | 1 |     1
  7 | 2 |     1
  8 | 3 |     1
  9 | 4 |     1
 10 | 0 |     1
 11 | 1 |     1
 12 | 2 |     1
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, sum(t_agg2.b-t_agg2.a) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.d, t_agg1.c having avg(t_agg2.a-t_agg2.b)>=0) group by a, b having count(c)=1; 
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.d
   Filter: (count((sum((t_agg2.b - t_agg2.a)))) = 1)
   ->  HashAggregate
         Group By Key: t_agg1.d, t_agg1.c
         Filter: (avg((t_agg2.a - t_agg2.b)) >= 0::numeric)
         ->  Hash Join
               Hash Cond: (t_agg1.b = t_agg2.c)
               ->  Seq Scan on t_agg1
               ->  Hash
                     ->  Seq Scan on t_agg2
(11 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.d b, sum(t_agg2.b+t_agg2.a) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.d, t_agg1.c having avg(t_agg2.a-t_agg2.b)>=0) group by a, b having count(c)=1 order by a, b limit 10;
 a  | b | count 
----+---+-------
  8 | 3 |     1
  9 | 4 |     1
 10 | 0 |     1
 11 | 1 |     1
 12 | 2 |     1
(5 rows)

-- distinct pull down
explain (costs off) select distinct count(a) as result from t_agg1 group by a order by count(a) using < fetch next 15 rows only;
                 QUERY PLAN                 
--------------------------------------------
 Limit
   ->  Sort
         Sort Key: (count(a))
         ->  HashAggregate
               Group By Key: count(a)
               ->  HashAggregate
                     Group By Key: a
                     ->  Seq Scan on t_agg1
(8 rows)

select distinct count(a) as result from t_agg1 group by a order by count(a) using < fetch next 15 rows only;
 result 
--------
      1
(1 row)

explain (costs off) select distinct count(d) as result from t_agg1 group by c order by count(d) using < fetch next 15 rows only;
                 QUERY PLAN                 
--------------------------------------------
 Limit
   ->  Sort
         Sort Key: (count(d))
         ->  HashAggregate
               Group By Key: count(d)
               ->  HashAggregate
                     Group By Key: c
                     ->  Seq Scan on t_agg1
(8 rows)

select distinct count(d) as result from t_agg1 group by c order by count(d) using < fetch next 15 rows only;
 result 
--------
     20
(1 row)

select * from (select distinct count(d) as result from t_agg1 group by c order by count(d) using < limit all) order by result using < nulls first fetch next 15 rows only;
 result 
--------
     20
(1 row)

explain (costs off) select * from (select distinct count(a) as result from t_agg1 group by a order by count(a) using < limit all) order by result using < nulls first fetch next 15 rows only;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: __unnamed_subquery__.result NULLS FIRST
         ->  Subquery Scan on __unnamed_subquery__
               ->  Limit
                     ->  Unique
                           ->  Sort
                                 Sort Key: (count(t_agg1.a))
                                 ->  HashAggregate
                                       Group By Key: t_agg1.a
                                       ->  Seq Scan on t_agg1
(11 rows)

select * from (select distinct count(a) as result from t_agg1 group by a order by count(a) using < limit all) order by result using < nulls first fetch next 15 rows only;
 result 
--------
      1
(1 row)

explain (costs off) select * from (select distinct count(d) as result from t_agg1 group by c order by count(d) using < limit all) order by result using < nulls first fetch next 15 rows only;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: __unnamed_subquery__.result NULLS FIRST
         ->  Subquery Scan on __unnamed_subquery__
               ->  Limit
                     ->  Unique
                           ->  Sort
                                 Sort Key: (count(t_agg1.d))
                                 ->  HashAggregate
                                       Group By Key: t_agg1.c
                                       ->  Seq Scan on t_agg1
(11 rows)

select * from (select distinct count(d) as result from t_agg1 group by c order by count(d) using < limit all) order by result using < nulls first fetch next 15 rows only;
 result 
--------
     20
(1 row)

set enable_hashagg=off;
explain (costs off) select all * from (select distinct case when b%2=1 then 'id=1' when b%2=0 then 'id=0' else 'id=2' end as result from t_agg1 order by 1); 
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: (CASE WHEN ((t_agg1.b % 2) = 1) THEN 'id=1'::text WHEN ((t_agg1.b % 2) = 0) THEN 'id=0'::text ELSE 'id=2'::text END)
         ->  Seq Scan on t_agg1
(4 rows)

select all * from (select distinct case when b%2=1 then 'id=1' when b%2=0 then 'id=0' else 'id=2' end as result from t_agg1 order by 1) order by 1; 
 result 
--------
 id=0
 id=1
(2 rows)

explain (costs off) select all * from (select case when b%2=1 then 'id=1' when b%2=0 then 'id=0' else 'id=2' end as result from t_agg1 group by result order by 1); 
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Group
   Group By Key: (CASE WHEN ((t_agg1.b % 2) = 1) THEN 'id=1'::text WHEN ((t_agg1.b % 2) = 0) THEN 'id=0'::text ELSE 'id=2'::text END)
   ->  Sort
         Sort Key: (CASE WHEN ((t_agg1.b % 2) = 1) THEN 'id=1'::text WHEN ((t_agg1.b % 2) = 0) THEN 'id=0'::text ELSE 'id=2'::text END)
         ->  Seq Scan on t_agg1
(5 rows)

select all * from (select case when b%2=1 then 'id=1' when b%2=0 then 'id=0' else 'id=2' end as result from t_agg1 group by 1 order by 1) order by 1; 
 result 
--------
 id=0
 id=1
(2 rows)

explain (costs off) select sum(x) from (select sum(a) x from t_agg1 group by b);
              QUERY PLAN              
--------------------------------------
 Aggregate
   ->  GroupAggregate
         Group By Key: t_agg1.b
         ->  Sort
               Sort Key: t_agg1.b
               ->  Seq Scan on t_agg1
(6 rows)

select sum(x) from (select sum(a) x from t_agg1 group by b);
   sum    
----------
 50005000
(1 row)

reset enable_hashagg;
explain (costs off) select x from (select d, sum(a) x from t_agg1 group by 1);
              QUERY PLAN               
---------------------------------------
 Subquery Scan on __unnamed_subquery__
   ->  HashAggregate
         Group By Key: t_agg1.d
         ->  Seq Scan on t_agg1
(4 rows)

select x from (select d, sum(a) x from t_agg1 group by 1) order by 1;
    x     
----------
  9997000
  9999000
 10001000
 10003000
 10005000
(5 rows)

explain (costs off) select x from (select g, sum(a) x from t_agg1 group by 1);
              QUERY PLAN               
---------------------------------------
 Subquery Scan on __unnamed_subquery__
   ->  HashAggregate
         Group By Key: t_agg1.g
         ->  Seq Scan on t_agg1
(4 rows)

select x from (select g, sum(a) x from t_agg1 group by 1) order by 1;
    x     
----------
 50005000
(1 row)

set plan_mode_seed=2;
explain (costs off) SELECT DISTINCT * FROM ( SELECT DISTINCT SUM(b) as result1 FROM t_agg1 where b <= 8 group by b having b < 10 order by result1 ASC OFFSET 1 ROW FETCH NEXT 30 ROW ONLY ) AS RESULT where result1 !=(3+3-1) group by result1 order by 1;
                               QUERY PLAN (RANDOM seed 2)                                
-----------------------------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: result.result1
         ->  HashAggregate
               Group By Key: result.result1
               ->  Subquery Scan on result
                     Filter: (result.result1 <> 5)
                     ->  Limit
                           ->  Sort
                                 Sort Key: (sum(t_agg1.b))
                                 ->  HashAggregate
                                       Group By Key: sum(t_agg1.b)
                                       ->  GroupAggregate
                                             Group By Key: t_agg1.b
                                             ->  Sort
                                                   Sort Key: t_agg1.b
                                                   ->  Seq Scan on t_agg1
                                                         Filter: ((b <= 8) AND (b < 10))
(18 rows)

SELECT DISTINCT * FROM ( SELECT DISTINCT SUM(b) as result1 FROM t_agg1 where b <= 8 group by b having b < 10 order by result1 ASC OFFSET 1 ROW FETCH NEXT 30 ROW ONLY ) AS RESULT where result1 !=(3+3-1) group by result1 order by 1;
 result1 
---------
       2
       4
       6
       8
      10
      12
      14
      16
(8 rows)

explain (costs off) SELECT ALL * FROM (SELECT DISTINCT CASE WHEN d=1 THEN 'ID1' WHEN d=2 THEN 'ID2' ELSE 'ID0' END as result FROM t_agg1 where d is not null group by d order by 1 OFFSET 1 ROW FETCH NEXT 25 ROW ONLY ) ;
                                                      QUERY PLAN (RANDOM seed 2)                                                       
---------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on __unnamed_subquery__
   ->  Limit
         ->  Sort
               Sort Key: (CASE WHEN (t_agg1.d = 1) THEN 'ID1'::text WHEN (t_agg1.d = 2) THEN 'ID2'::text ELSE 'ID0'::text END)
               ->  HashAggregate
                     Group By Key: CASE WHEN (t_agg1.d = 1) THEN 'ID1'::text WHEN (t_agg1.d = 2) THEN 'ID2'::text ELSE 'ID0'::text END
                     ->  Group
                           Group By Key: t_agg1.d
                           ->  Sort
                                 Sort Key: t_agg1.d
                                 ->  Seq Scan on t_agg1
                                       Filter: (d IS NOT NULL)
(12 rows)

SELECT ALL * FROM (SELECT DISTINCT CASE WHEN d=1 THEN 'ID1' WHEN d=2 THEN 'ID2' ELSE 'ID0' END as result FROM t_agg1 where d is not null group by d order by 1 OFFSET 1 ROW FETCH NEXT 25 ROW ONLY ) ;
 result 
--------
 ID1
 ID2
(2 rows)

reset plan_mode_seed;
-- Clean Table
drop table t_agg1;
drop table t_agg2;
create table distkey_choose(a int, b int, c int);
insert into distkey_choose select generate_series(1, 100), generate_series(2, 101), generate_series(1, 20000) % 400 from tmp_t1;
analyze distkey_choose;
explain (verbose on, costs off) select b, case when c = 1 then 1 else 2 end from distkey_choose group by 1, 2;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 HashAggregate
   Output: b, (CASE WHEN (c = 1) THEN 1 ELSE 2 END)
   Group By Key: distkey_choose.b, CASE WHEN (distkey_choose.c = 1) THEN 1 ELSE 2 END
   ->  Seq Scan on distribute_aggregates_part3.distkey_choose
         Output: b, CASE WHEN (c = 1) THEN 1 ELSE 2 END
(5 rows)

explain (verbose on, costs off) select substr(c, 1, 2), a+b, b from distkey_choose group by 1, 2, 3;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: (substr((c)::text, 1, 2)), ((a + b)), b
   Group By Key: substr((distkey_choose.c)::text, 1, 2), (distkey_choose.a + distkey_choose.b), distkey_choose.b
   ->  Seq Scan on distribute_aggregates_part3.distkey_choose
         Output: substr((c)::text, 1, 2), (a + b), b
(5 rows)

explain (verbose on, costs off) select substr(c, 1, 1)||substr(c, 2, 1)||substr(c, 3, 1)||substr(c, 4, 1), a+b, b from distkey_choose group by 1, 2, 3;
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: ((((substr((c)::text, 1, 1) || substr((c)::text, 2, 1)) || substr((c)::text, 3, 1)) || substr((c)::text, 4, 1))), ((a + b)), b
   Group By Key: (((substr((distkey_choose.c)::text, 1, 1) || substr((distkey_choose.c)::text, 2, 1)) || substr((distkey_choose.c)::text, 3, 1)) || substr((distkey_choose.c)::text, 4, 1)), (distkey_choose.a + distkey_choose.b), distkey_choose.b
   ->  Seq Scan on distribute_aggregates_part3.distkey_choose
         Output: (((substr((c)::text, 1, 1) || substr((c)::text, 2, 1)) || substr((c)::text, 3, 1)) || substr((c)::text, 4, 1)), (a + b), b
(5 rows)

explain (verbose on, costs off) select c>b, b from distkey_choose group by 1, 2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 HashAggregate
   Output: ((c > b)), b
   Group By Key: (distkey_choose.c > distkey_choose.b), distkey_choose.b
   ->  Seq Scan on distribute_aggregates_part3.distkey_choose
         Output: (c > b), b
(5 rows)

explain (verbose on, costs off) select distinct count(a), count(b) from distkey_choose group by a;
                             QUERY PLAN                             
--------------------------------------------------------------------
 HashAggregate
   Output: (count(a)), (count(b)), a
   Group By Key: count(distkey_choose.a), count(distkey_choose.b)
   ->  HashAggregate
         Output: count(a), count(b), a
         Group By Key: distkey_choose.a
         ->  Seq Scan on distribute_aggregates_part3.distkey_choose
               Output: a, b
(8 rows)

explain (verbose on, costs off) select distinct count(1), count(2) from distkey_choose group by a;
                             QUERY PLAN                             
--------------------------------------------------------------------
 HashAggregate
   Output: (count(1)), (count(2)), a
   Group By Key: count(1), count(2)
   ->  HashAggregate
         Output: count(1), count(2), a
         Group By Key: distkey_choose.a
         ->  Seq Scan on distribute_aggregates_part3.distkey_choose
               Output: a
(8 rows)

explain (verbose on, costs off) select coalesce(t2.a, 0), t1.b, t1.c+5 from distkey_choose t1 left join distkey_choose t2 on t1.a=t2.a and t2.a=1 group by 1, 2, 3;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate
   Output: (COALESCE(t2.a, 0)), t1.b, ((t1.c + 5))
   Group By Key: COALESCE(t2.a, 0), t1.b, (t1.c + 5)
   ->  Hash Left Join
         Output: COALESCE(t2.a, 0), t1.b, (t1.c + 5)
         Hash Cond: (t1.a = t2.a)
         ->  Seq Scan on distribute_aggregates_part3.distkey_choose t1
               Output: t1.a, t1.b, t1.c
         ->  Hash
               Output: t2.a
               ->  Seq Scan on distribute_aggregates_part3.distkey_choose t2
                     Output: t2.a
                     Filter: (t2.a = 1)
(13 rows)

explain (verbose on, costs off) select t1.b, t2.a+5, t1.c+5 from distkey_choose t1 inner join distkey_choose t2 on t1.a=t2.a group by 1, 2, 3;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 HashAggregate
   Output: t1.b, ((t2.a + 5)), ((t1.c + 5))
   Group By Key: t1.b, (t2.a + 5), (t1.c + 5)
   ->  Hash Join
         Output: t1.b, (t2.a + 5), (t1.c + 5)
         Hash Cond: (t1.a = t2.a)
         ->  Seq Scan on distribute_aggregates_part3.distkey_choose t1
               Output: t1.a, t1.b, t1.c
         ->  Hash
               Output: t2.a
               ->  Seq Scan on distribute_aggregates_part3.distkey_choose t2
                     Output: t2.a
(12 rows)

drop table distkey_choose;
CREATE TABLE sales_transaction_line
(
    sales_tran_id number(38,10) null,
    tran_line_status_cd clob null,
    tran_line_sales_type_cd char(100) null
)with (orientation=row);
explain (costs off)
SELECT
    CAST(TRAN_LINE_STATUS_CD AS char) c1,
    CAST(TRAN_LINE_STATUS_CD AS char) c2,
    TRAN_LINE_SALES_TYPE_CD c3,
    DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c1,c3 ;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: tran_line_sales_type_cd
         ->  HashAggregate
               Group By Key: (tran_line_status_cd)::character(1), tran_line_sales_type_cd
               ->  Seq Scan on sales_transaction_line
(6 rows)

explain (costs off)
SELECT
    CAST(TRAN_LINE_STATUS_CD AS char) c1,
    CAST(TRAN_LINE_STATUS_CD AS char) c2,
    TRAN_LINE_SALES_TYPE_CD c3,
    DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c1,c2,c3 ;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: tran_line_sales_type_cd
         ->  HashAggregate
               Group By Key: (tran_line_status_cd)::character(1), (tran_line_status_cd)::character(1), tran_line_sales_type_cd
               ->  Seq Scan on sales_transaction_line
(6 rows)

SELECT 
    CAST(TRAN_LINE_STATUS_CD AS char) c1,
    CAST(TRAN_LINE_STATUS_CD AS char) c2,
    TRAN_LINE_SALES_TYPE_CD c3,
    DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c2,c3;
 c1 | c2 | c3 | dense_rank 
----+----+----+------------
(0 rows)

SELECT percentile_cont(sum(value)) WITHIN GROUP (ORDER BY value) FROM (VALUES ('2019-07-12 00:00:01'::timestamptz,'red',1),('2019-07-12 00:00:01'::timestamptz,'blue',2)) v(time,color,value);
ERROR:  aggregate function calls cannot be nested
CONTEXT:  referenced column: percentile_cont
reset current_schema;
drop schema if exists distribute_aggregates_part3 cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table distribute_aggregates_part3.tmp_t1
drop cascades to table distribute_aggregates_part3.sales_transaction_line
