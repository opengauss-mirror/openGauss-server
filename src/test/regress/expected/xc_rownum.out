--------------------------------------------------------------------
-------------------test rownum pseudocolumn ------------------------
--------------------------------------------------------------------
-- ROWNUM can not be used as alias
select oid rownum from pg_class;
ERROR:  syntax error at or near "rownum"
LINE 1: select oid rownum from pg_class;
                   ^
select oid as rownum from pg_class;
ERROR:  ROWNUM cannot be used as an alias
LINE 1: select oid as rownum from pg_class;
                      ^
--test compat
drop table if exists tb_test;
NOTICE:  table "tb_test" does not exist, skipping
create table tb_test(c1 int,c2 varchar2,c3 varchar2);
insert into tb_test values(1,'a','b');
create or replace view v_test as select rownum from tb_test;
\d+ v_test
                View "public.v_test"
 Column |  Type  | Modifiers | Storage | Description 
--------+--------+-----------+---------+-------------
 rownum | bigint |           | plain   | 
View definition:
 SELECT ROWNUM AS "rownum"
   FROM tb_test;

set behavior_compat_options = 'rownum_type_compat';
create or replace view v_test1 as select rownum from tb_test;
\d+ v_test1
                View "public.v_test1"
 Column |  Type   | Modifiers | Storage | Description 
--------+---------+-----------+---------+-------------
 rownum | numeric |           | main    | 
View definition:
 SELECT ROWNUM AS "rownum"
   FROM tb_test;

set behavior_compat_options = '';
drop view v_test;
drop view v_test1;
drop table tb_test;
------------------------------------
--test the basic function of rownum
------------------------------------
--create test table
create table rownum_table (name varchar(20), age int, address varchar(20));
--insert data to test table
insert into rownum_table values ('leon', 23, 'xian');
insert into rownum_table values ('james', 24, 'bejing');
insert into rownum_table values ('jack', 35, 'xian');
insert into rownum_table values ('mary', 42, 'chengdu');
insert into rownum_table values ('perl', 35, 'shengzhen');
insert into rownum_table values ('rose', 64, 'xian');
insert into rownum_table values ('under', 57, 'xianyang');
insert into rownum_table values ('taker', 81, 'shanghai');
insert into rownum_table values ('frank', 19, 'luoyang');
insert into rownum_table values ('angel', 100, 'xian');
--the query to test rownum
select * from rownum_table where rownum < 5;
 name  | age | address 
-------+-----+---------
 leon  |  23 | xian
 james |  24 | bejing
 jack  |  35 | xian
 mary  |  42 | chengdu
(4 rows)

select rownum, * from rownum_table where rownum < 1;
 rownum | name | age | address 
--------+------+-----+---------
(0 rows)

select rownum, * from rownum_table where rownum <= 1;
 rownum | name | age | address 
--------+------+-----+---------
      1 | leon |  23 | xian
(1 row)

select rownum, * from rownum_table where rownum <= 10;
 rownum | name  | age |  address  
--------+-------+-----+-----------
      1 | leon  |  23 | xian
      2 | james |  24 | bejing
      3 | jack  |  35 | xian
      4 | mary  |  42 | chengdu
      5 | perl  |  35 | shengzhen
      6 | rose  |  64 | xian
      7 | under |  57 | xianyang
      8 | taker |  81 | shanghai
      9 | frank |  19 | luoyang
     10 | angel | 100 | xian
(10 rows)

select rownum, * from rownum_table where address = 'xian';
 rownum | name  | age | address 
--------+-------+-----+---------
      1 | leon  |  23 | xian
      2 | jack  |  35 | xian
      3 | rose  |  64 | xian
      4 | angel | 100 | xian
(4 rows)

select rownum, * from rownum_table where address = 'xian' and rownum < 4;
 rownum | name | age | address 
--------+------+-----+---------
      1 | leon |  23 | xian
      2 | jack |  35 | xian
      3 | rose |  64 | xian
(3 rows)

select rownum, name, address, age from rownum_table where address = 'xian' or rownum < 8;
 rownum | name  |  address  | age 
--------+-------+-----------+-----
      1 | leon  | xian      |  23
      2 | james | bejing    |  24
      3 | jack  | xian      |  35
      4 | mary  | chengdu   |  42
      5 | perl  | shengzhen |  35
      6 | rose  | xian      |  64
      7 | under | xianyang  |  57
      8 | angel | xian      | 100
(8 rows)

------------------
--avoid optimize
------------------
--test order by
--create test table
create table test_table
(
    id       integer       primary key ,
    name     varchar2(20)  ,
    age      integer       check(age > 0),
    address  varchar2(20)   not null,
    tele     varchar2(20)   default '101'
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_table_pkey" for table "test_table"
--insert data
insert into test_table values(1,'charlie', 40, 'shanghai');
insert into test_table values(2,'lincon', 10, 'xianyang');
insert into test_table values(3,'charlie', 40, 'chengdu');
insert into test_table values(4,'lincon', 10, 'xian', '');
insert into test_table values(5,'charlie', 40, 'chengdu');
insert into test_table values(6,'lincon', 10, 'xian', '12345657');
--test order by
select * from (select * from test_table order by id) as result where rownum < 4;
 id |  name   | age | address  | tele 
----+---------+-----+----------+------
  1 | charlie |  40 | shanghai | 101
  2 | lincon  |  10 | xianyang | 101
  3 | charlie |  40 | chengdu  | 101
(3 rows)

select * from (select * from test_table order by id desc) as result where rownum < 2;
 id |  name  | age | address |   tele   
----+--------+-----+---------+----------
  6 | lincon |  10 | xian    | 12345657
(1 row)

select * from (select * from test_table order by id asc) as result where rownum <= 5;
 id |  name   | age | address  | tele 
----+---------+-----+----------+------
  1 | charlie |  40 | shanghai | 101
  2 | lincon  |  10 | xianyang | 101
  3 | charlie |  40 | chengdu  | 101
  4 | lincon  |  10 | xian     | 
  5 | charlie |  40 | chengdu  | 101
(5 rows)

--test union and intersect
--create test table
create table distributors (id int, name varchar(20));
create table actors (id int, name varchar(20));
--insert data
insert into distributors values (1, 'westward');
insert into distributors values (1, 'walt disney');
insert into distributors values (1, 'warner bros');
insert into distributors values (1, 'warren beatty');
insert into actors values (1, 'woody allen');
insert into actors values (1, 'warren beatty');
insert into actors values (1, 'walter matthau');
insert into actors values (1, 'westward');
--test union
select rownum, name from (select name from distributors union all select name from actors order by 1) as result where rownum <= 1;
 rownum |    name     
--------+-------------
      1 | walt disney
(1 row)

select rownum, name from (select name from distributors union all select name from actors order by 1) as result where rownum < 3;
 rownum |      name      
--------+----------------
      1 | walt disney
      2 | walter matthau
(2 rows)

select rownum, name from (select name from distributors union all select name from actors order by 1) as result where rownum < 6;
 rownum |      name      
--------+----------------
      1 | walt disney
      2 | walter matthau
      3 | warner bros
      4 | warren beatty
      5 | warren beatty
(5 rows)

select rownum, name from (select name from distributors where rownum < 3 union all select name from actors where rownum < 3 order by 1) as result;
 rownum |     name      
--------+---------------
      1 | walt disney
      2 | warren beatty
      3 | westward
      4 | woody allen
(4 rows)

--test intersect
select rownum, name from (select name from distributors intersect all select name from actors order by 1) as result where rownum <= 1;
 rownum |     name      
--------+---------------
      1 | warren beatty
(1 row)

select rownum, name from (select name from distributors intersect all select name from actors order by 1) as result where rownum < 3;
 rownum |     name      
--------+---------------
      1 | warren beatty
      2 | westward
(2 rows)

select rownum, name from (select name from distributors intersect all select name from actors order by 1) as result where rownum < 6;
 rownum |     name      
--------+---------------
      1 | warren beatty
      2 | westward
(2 rows)

select rownum, name from (select name from distributors where rownum <= 4 intersect all select name from actors where rownum <= 4 order by 1) as result;
 rownum |     name      
--------+---------------
      1 | warren beatty
      2 | westward
(2 rows)

--test group by
select rownum from distributors group by rownum;
 rownum 
--------
      3
      1
      2
      4
(4 rows)

select rownum rn from distributors group by rn;
 rn 
----
  3
  1
  2
  4
(4 rows)

--test having
select id from distributors group by rownum,id having rownum < 5;
 id 
----
  1
  1
  1
  1
(4 rows)

select rownum from distributors group by rownum having rownum < 5;
 rownum 
--------
      3
      1
      2
      4
(4 rows)

select id from distributors group by id having rownum < 5;
ERROR:  ROWNUM must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select id from distributors group by id having rownum < 5;
                                                       ^
select id+id from distributors group by id+id having rownum < 5;
 ?column? 
----------
        2
(1 row)

select id, (select id from distributors where rownum <= 1) from distributors group by id;
 id | id 
----+----
  1 |  1
(1 row)

select id, (select id from distributors group by id having rownum <= 1) from distributors group by id;
ERROR:  ROWNUM must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: ..., (select id from distributors group by id having rownum <= ...
                                                             ^
select id from (select id from distributors where rownum <= 1) group by id;
 id 
----
  1
(1 row)

select id from (select id from distributors group by id having rownum <= 1) group by id;
ERROR:  ROWNUM must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: ...m (select id from distributors group by id having rownum <= ...
                                                             ^
--test alias name after where
select rownum rn, name from distributors where rn<3;
ERROR:  Alias "rn" reference with ROWNUM included is invalid.
LINE 1: select rownum rn, name from distributors where rn<3;
                                                       ^
select rownum rowno2, * from (select rownum rowno1, * from distributors order by id desc) where rowno2 < 2;
ERROR:  Alias "rowno2" reference with ROWNUM included is invalid.
LINE 1: ...wno1, * from distributors order by id desc) where rowno2 < 2...
                                                             ^
--test default rownum when creating table
create table student(id int default rownum, stuname varchar(5));
ERROR:  specified ROWNUM is not allowed here.
create table student(id int default rownum+1, stuname varchar(5));
ERROR:  specified ROWNUM is not allowed here.
--test insert when values include rownum
insert into distributors values (rownum, 'qwer');
ERROR:  specified ROWNUM is not allowed here.
LINE 1: insert into distributors values (rownum, 'qwer');
                                         ^
insert into distributors(id, name) values (2, 'abcd'), (rownum+1, 'qwer');
ERROR:  specified ROWNUM is not allowed here.
LINE 1: ... into distributors(id, name) values (2, 'abcd'), (rownum+1, ...
                                                             ^
--test VALUES clause that's being used as a standalone SELECT
select * from (values(rownum, 1)) x(a, b);
ERROR:  specified ROWNUM is not allowed here.
LINE 1: select * from (values(rownum, 1)) x(a, b);
                              ^
select * from (values(rownum+1, 1)) x(a, b);
ERROR:  specified ROWNUM is not allowed here.
LINE 1: select * from (values(rownum+1, 1)) x(a, b);
                              ^
--test except and minus
--create test table
create table except_table (a int, b int);
create table except_table1 (a int, b int);
--insert data
insert into except_table values (3, 4);
insert into except_table values (5, 4);
insert into except_table values (3, 4);
insert into except_table values (4, 4);
insert into except_table values (6, 4);
insert into except_table values (3, 4);
insert into except_table values (3, 4); 
insert into except_table1 values (3, 4);
--test except and minus
select rownum, * from (select * from except_table except select * from except_table1 order by 1) as result where rownum <= 2;
 rownum | a | b 
--------+---+---
      1 | 4 | 4
      2 | 5 | 4
(2 rows)

select rownum, * from (select * from except_table minus select * from except_table1 order by 1) as result where rownum <= 3;
 rownum | a | b 
--------+---+---
      1 | 4 | 4
      2 | 5 | 4
      3 | 6 | 4
(3 rows)

select rownum, * from (select * from except_table where rownum <= 3 except select * from except_table1 where rownum <=2 order by 1) as result;
 rownum | a | b 
--------+---+---
      1 | 5 | 4
(1 row)

select rownum, * from (select * from except_table where rownum <= 3 minus select * from except_table1 where rownum <=2 order by 1) as result;
 rownum | a | b 
--------+---+---
      1 | 5 | 4
(1 row)

--drop the test table
drop table rownum_table;
drop table test_table;
drop table distributors;
drop table actors;
drop table except_table;
drop table except_table1;
create table tbl_a(v1 integer);
insert into tbl_a values(1001);
insert into tbl_a values(1002);
insert into tbl_a values(1003);
insert into tbl_a values(1004);
insert into tbl_a values(1005);
insert into tbl_a values(1002);
create table tbl_b(v1 integer, v2 integer);
insert into tbl_b values (1001,214);
insert into tbl_b values (1003,216);
insert into tbl_b values (1002,213);
insert into tbl_b values (1002,212);
insert into tbl_b values (1002,211);
insert into tbl_b values (1003,217);
insert into tbl_b values (1005,218);
update tbl_a a set a.v1 = (select v2 from tbl_b b where a.v1 = b.v1 and rownum <= 1);
select * from tbl_a order by 1;
 v1  
-----
 213
 213
 214
 216
 218
    
(6 rows)

update tbl_b set v2 = rownum where v1 = 1002;
select * from tbl_b where v1 = 1002 and rownum < 4 order by 1, 2;
  v1  | v2 
------+----
 1002 |  1
 1002 |  2
 1002 |  3
(3 rows)

delete tbl_b where rownum > 3 and v1 = 1002;
delete tbl_b where rownum < 100 and v1 = 1002;
select * from tbl_b order by 1, 2;
  v1  | v2  
------+-----
 1001 | 214
 1003 | 216
 1003 | 217
 1005 | 218
(4 rows)

drop table tbl_a;
drop table tbl_b;
--adapt pseudocolumn "rowid" of oracle, using "ctid" of postgresql
create table test_tbl(myint integer);
insert into test_tbl values(1);
insert into test_tbl values(2);
insert into test_tbl values(3);
select rowid,* from test_tbl;
ERROR:  column "rowid" does not exist
LINE 1: select rowid,* from test_tbl;
               ^
CONTEXT:  referenced column: rowid
select max(rowid) from test_tbl;
ERROR:  column "rowid" does not exist
LINE 1: select max(rowid) from test_tbl;
                   ^
CONTEXT:  referenced column: max
delete from test_tbl a where a.rowid != (select max(b.rowid) from test_tbl b);
ERROR:  column a.rowid does not exist
LINE 1: delete from test_tbl a where a.rowid != (select max(b.rowid)...
                                     ^
select rowid,* from test_tbl;
ERROR:  column "rowid" does not exist
LINE 1: select rowid,* from test_tbl;
               ^
CONTEXT:  referenced column: rowid
drop table test_tbl;
create table aaaa (
    smgwname character varying(255),
    seid character varying(33),
    igmgwidx integer,
    imsflag smallint
);
insert into aaaa values ('mrp', 'mrp', 0, 1);
create table bbbb (
    imgwindex integer,
    imsflag smallint
);
insert into bbbb values (0, 1);
insert into bbbb values (0, 1);
select (select a1.smgwname from aaaa a1 where a1.seid = ( select a2.seid from aaaa a2 where a2.igmgwidx = b.imgwindex and a2.imsflag = b.imsflag and rownum <=1)) from bbbb b;
 smgwname 
----------
 mrp
 mrp
(2 rows)

drop table aaaa;
drop table bbbb;
--test query plan after optimizing
create table student(id int, stuname varchar(10) );
insert into student values(1, 'stu1');
insert into student values(2, 'stu2');
insert into student values(3, 'stu3');
insert into student values(4, 'stu4');
insert into student values(5, 'stu5');
insert into student values(6, 'stu6');
insert into student values(7, 'stu7');
insert into student values(8, 'stu8');
insert into student values(9, 'stu9');
insert into student values(10, 'stu10');
create table test(id int, testchar varchar(10));
insert into test values(1, 'test1');
insert into test values(2, 'test2');
insert into test values(3, 'test3');
insert into test values(4, 'test4');
insert into test values(5, 'test5');
insert into test values(6, 'test6');
insert into test values(7, 'test7');
insert into test values(8, 'test8');
insert into test values(9, 'test9');
insert into test values(10, 'test10');
-- operator '<' (with 'and')
-- n > 1 
explain select * from student where rownum < 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 5 and id > 5;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.26 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id > 5)
(3 rows)

explain select * from student where rownum < 5 and id > 5 and id < 9;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit  (cost=0.00..18.01 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..27.01 rows=6 width=42)
         Filter: ((id > 5) AND (id < 9))
(3 rows)

explain select * from student where rownum < 5 and rownum < 6;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 5 and rownum < 6 and rownum < 9;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 5 and rownum < 6 and rownum < 9 and rownum < 12;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

-- n <= 1 
explain select * from student where rownum < 1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 and id > 5 and id < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 and rownum < 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 and rownum < 6 and rownum < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 and rownum < 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- operator '<=' (with 'and')
-- n >= 1
explain select * from student where rownum <= 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.02 rows=1 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.09 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 5 and id > 5;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.32 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id > 5)
(3 rows)

explain select * from student where rownum <= 5 and id > 5 and id < 9;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit  (cost=0.00..22.51 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..27.01 rows=6 width=42)
         Filter: ((id > 5) AND (id < 9))
(3 rows)

explain select * from student where rownum <= 5 and rownum < 6;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.09 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 5 and rownum < 6 and rownum < 9;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.09 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 5 and rownum < 6 and rownum < 9 and rownum < 12;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.09 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

-- n < 1
explain select * from student where rownum <= -5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 and id > 5 and id < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 and rownum < 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 and rownum < 6 and rownum < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 and rownum < 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- operator '=' (with 'and')
-- n = 1
explain select * from student where rownum = 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.02 rows=1 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum = 1 and id > 5;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=1 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id > 5)
(3 rows)

explain select * from student where rownum = 1 and rownum = 2 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- n != 1
explain select * from student where rownum = 2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum = 2 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- operator '!=' (with 'and')
-- n = 1
explain select * from student where rownum != 1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum != 1 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum != 1 and rownum != 2 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- n > 1
explain select * from student where rownum != 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum != 5 and id > 5;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.26 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id > 5)
(3 rows)

explain select * from student where rownum != 5 and rownum != 8 and id > 5;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.26 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id > 5)
(3 rows)

-- n < 1
explain select * from student where rownum != -5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum != -5 and id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum != -5 and rownum != -8 and id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

-- operator '>' (with 'and')
-- n >= 1
explain select * from student where rownum > 1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5 and id > 5 and id < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5 and rownum > 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5 and rownum > 6 and rownum > 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > 5 and rownum < 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

--n < 1
explain select * from student where rownum > -5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum > -5 and id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum > -5 and id > 5 and id < 9;
                       QUERY PLAN                        
---------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=6 width=42)
   Filter: ((id > 5) AND (id < 9))
(2 rows)

explain select * from student where rownum > -5 and rownum > 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > -5 and rownum > 6 and rownum < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum > -5 and rownum > 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- operator '>=' (with 'and')
-- n > 1
explain select * from student where rownum >= 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= 5 and id > 5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= 5 and id > 5 and id < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= 5 and rownum > 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= 5 and rownum > 6 and rownum > 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= 5 and rownum < 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- n <= 1
explain select * from student where rownum >= 1;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum >= -5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum >= -5 and id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum >= -5 and id > 5 and id < 9;
                       QUERY PLAN                        
---------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=6 width=42)
   Filter: ((id > 5) AND (id < 9))
(2 rows)

explain select * from student where rownum >= -5 and rownum > 6;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= -5 and rownum > 6 and rownum < 9;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum >= -5 and rownum > 6 and rownum < 9 and rownum < 12;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- operator '<' with 'or'
-- n > 1
-- can not be optimized
explain select * from student where rownum < 5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((ROWNUM < 5) OR (id > 5))
(2 rows)

-- n <= 1
explain select * from student where rownum < -5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < -5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum < -5 or id > 5 or id < 9;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((id > 5) OR (id < 9))
(2 rows)

-- operator '<=' with 'or'
-- n >= 1
-- can not be optimized
explain select * from student where rownum <= 5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((ROWNUM <= 5) OR (id > 5))
(2 rows)

-- n < 1
explain select * from student where rownum <= -5;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum <= -5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum <= -5 or id > 5 or id < 9;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((id > 5) OR (id < 9))
(2 rows)

-- operator '=' with 'or'
-- n > 0
-- can not be optimized
explain select * from student where rownum = 5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=382 width=42)
   Filter: ((ROWNUM = 5) OR (id > 5))
(2 rows)

-- n <= 0
explain select * from student where rownum = 0 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

explain select * from student where rownum = -1 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
   Filter: (id > 5)
(2 rows)

-- operator '!=' with 'or'
-- n >= 1
-- can not be optimized
explain select * from student where rownum != 6 or id > 5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=1130 width=42)
   Filter: ((ROWNUM <> 6) OR (id > 5))
(2 rows)

-- n<1
explain select * from student where rownum != 0 or id > 5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

-- operator '>' with 'or'
-- n >= 1  
-- can not be optimized
explain select * from student where rownum > 5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((ROWNUM > 5) OR (id > 5))
(2 rows)

-- n < 1
explain select * from student where rownum > -5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum > -5 or id > 5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum > -5 or id > 5 or id < 9;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

-- operator '>=' with 'or'
-- n > 1  
-- can not be optimized
explain select * from student where rownum >= 5 or id > 5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=630 width=42)
   Filter: ((ROWNUM >= 5) OR (id > 5))
(2 rows)

-- n <= 1
explain select * from student where rownum >= -5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum >= -5 or id > 5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where rownum >= -5 or id > 5 or id < 9;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

-- limit
explain select * from student where rownum < 5 limit 3;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 3 limit 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.04 rows=2 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 5 limit 3;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 3 limit 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

-- subqueries
explain select * from (select * from student where rownum < 5);
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from (select * from student where rownum < 5) where rownum < 9;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit  (cost=0.00..0.12 rows=4 width=42)
   ->  Limit  (cost=0.00..0.08 rows=4 width=42)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(3 rows)

explain select * from (select * from student where rownum < 5 and id < 7);
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit  (cost=0.00..0.26 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
         Filter: (id < 7)
(3 rows)

explain select * from (select * from student where rownum < 3 and id < 10) where rownum < 5;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit  (cost=0.00..0.15 rows=2 width=42)
   ->  Limit  (cost=0.00..0.13 rows=2 width=42)
         ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
               Filter: (id < 10)
(4 rows)

explain select * from (select * from student where rownum < 3 and id < 10) where rownum < 2 and stuname = 'stu1';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit  (cost=0.00..13.51 rows=1 width=42)
   ->  Limit  (cost=0.00..27.01 rows=2 width=42)
         ->  Seq Scan on student  (cost=0.00..27.01 rows=2 width=42)
               Filter: ((id < 10) AND ((stuname)::text = 'stu1'::text))
(4 rows)

--sublink
explain select * from student where id in (select id from test where rownum < 4);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Hash Join  (cost=0.16..24.51 rows=567 width=42)
   Hash Cond: (student.id = test.id)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
   ->  Hash  (cost=0.12..0.12 rows=3 width=4)
         ->  HashAggregate  (cost=0.09..0.12 rows=3 width=4)
               Group By Key: test.id
               ->  Limit  (cost=0.00..0.06 rows=3 width=4)
                     ->  Seq Scan on test  (cost=0.00..21.34 rows=1134 width=4)
(8 rows)

explain select * from student where id in (select id from test where rownum < 4) and rownum < 6;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit  (cost=0.06..0.28 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.06..24.24 rows=567 width=42)
         Filter: (hashed SubPlan 1)
         SubPlan 1
           ->  Limit  (cost=0.00..0.06 rows=3 width=4)
                 ->  Seq Scan on test  (cost=0.00..21.34 rows=1134 width=4)
(6 rows)

explain select * from student where id in (select id from test where rownum < 4) and stuname in (select stuname from student where rownum < 6);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Hash Join  (cost=0.43..26.34 rows=284 width=42)
   Hash Cond: ((public.student.stuname)::text = ("ANY_subquery".stuname)::text)
   ->  Hash Join  (cost=0.16..24.51 rows=567 width=42)
         Hash Cond: (public.student.id = test.id)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
         ->  Hash  (cost=0.12..0.12 rows=3 width=4)
               ->  HashAggregate  (cost=0.09..0.12 rows=3 width=4)
                     Group By Key: test.id
                     ->  Limit  (cost=0.00..0.06 rows=3 width=4)
                           ->  Seq Scan on test  (cost=0.00..21.34 rows=1134 width=4)
   ->  Hash  (cost=0.21..0.21 rows=5 width=38)
         ->  HashAggregate  (cost=0.16..0.21 rows=5 width=38)
               Group By Key: ("ANY_subquery".stuname)::text
               ->  Subquery Scan on "ANY_subquery"  (cost=0.00..0.14 rows=5 width=38)
                     ->  Limit  (cost=0.00..0.09 rows=5 width=38)
                           ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=38)
(16 rows)

explain select * from student where id in (select id from test where rownum < 4 and id < 7);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Join  (cost=0.30..24.64 rows=567 width=42)
   Hash Cond: (student.id = test.id)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
   ->  Hash  (cost=0.26..0.26 rows=3 width=4)
         ->  HashAggregate  (cost=0.23..0.26 rows=3 width=4)
               Group By Key: test.id
               ->  Limit  (cost=0.00..0.19 rows=3 width=4)
                     ->  Seq Scan on test  (cost=0.00..24.18 rows=378 width=4)
                           Filter: (id < 7)
(9 rows)

explain select * from student where id in (select id from test where rownum < 4) and rownum < 6 and id > 3;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit  (cost=0.06..0.78 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.06..27.07 rows=189 width=42)
         Filter: ((hashed SubPlan 1) AND (id > 3))
         SubPlan 1
           ->  Limit  (cost=0.00..0.06 rows=3 width=4)
                 ->  Seq Scan on test  (cost=0.00..21.34 rows=1134 width=4)
(6 rows)

-- insert 
explain insert into test select * from student where rownum < 5;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Insert on test  (cost=0.00..0.12 rows=4 width=42)
   ->  Limit  (cost=0.00..0.08 rows=4 width=42)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(3 rows)

explain insert into test select * from student where rownum < 5 and id > 3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Insert on test  (cost=0.00..0.30 rows=4 width=42)
   ->  Limit  (cost=0.00..0.26 rows=4 width=42)
         ->  Seq Scan on student  (cost=0.00..24.18 rows=378 width=42)
               Filter: (id > 3)
(4 rows)

-- between
explain select * from student where rownum between 1 and 5;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.09 rows=5 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum between 2 and 8;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum between -5 and 8;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.15 rows=8 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum between -5 and -2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

--update
explain update student set id = 5 where rownum < 3;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Update on student  (cost=0.00..0.04 rows=2 width=44)
   ->  Limit  (cost=0.00..0.04 rows=2 width=44)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=44)
(3 rows)

explain update student set id = 5 where rownum < 3 and rownum < 5;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Update on student  (cost=0.00..0.04 rows=2 width=44)
   ->  Limit  (cost=0.00..0.04 rows=2 width=44)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=44)
(3 rows)

explain update student set id = 5 where rownum > 3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Update on student  (cost=0.00..21.34 rows=1 width=44)
   ->  Limit  (cost=0.00..21.34 rows=1 width=44)
         ->  Result  (cost=0.00..21.34 rows=1 width=44)
               One-Time Filter: false
               ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=44)
(5 rows)

--delete
explain delete from student where rownum < 3;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Delete on student  (cost=0.00..0.04 rows=2 width=6)
   ->  Limit  (cost=0.00..0.04 rows=2 width=6)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=6)
(3 rows)

explain delete from student where rownum < 3 and rownum < 5;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Delete on student  (cost=0.00..0.04 rows=2 width=6)
   ->  Limit  (cost=0.00..0.04 rows=2 width=6)
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=6)
(3 rows)

explain delete from student where rownum > 3;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Delete on student  (cost=0.00..21.34 rows=1 width=6)
   ->  Limit  (cost=0.00..21.34 rows=1 width=6)
         ->  Result  (cost=0.00..21.34 rows=1 width=6)
               One-Time Filter: false
               ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=6)
(5 rows)

-- have not been optimized yet
explain select * from student where rownum < 6.5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=378 width=42)
   Filter: ((ROWNUM)::numeric < 6.5)
(2 rows)

explain select * from student where rownum <= 6.5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=378 width=42)
   Filter: ((ROWNUM)::numeric <= 6.5)
(2 rows)

explain select * from student where rownum = 6.5;
                       QUERY PLAN                        
---------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=6 width=42)
   Filter: ((ROWNUM)::numeric = 6.5)
(2 rows)

explain select * from student where rownum != 6.5;
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=1128 width=42)
   Filter: ((ROWNUM)::numeric <> 6.5)
(2 rows)

explain select * from student where rownum > 6.5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=378 width=42)
   Filter: ((ROWNUM)::numeric > 6.5)
(2 rows)

explain select * from student where rownum >= 6.5;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=378 width=42)
   Filter: ((ROWNUM)::numeric >= 6.5)
(2 rows)

-- optimize rownum to limit
-- rownum bigint to numeric
select rownum from student where rownum < 6.4;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum < 6.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum <= 6.4;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum <= 6.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum > 0.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
(10 rows)

select rownum from student where rownum > 1.5;
 rownum 
--------
(0 rows)

select rownum from student where rownum >= 0.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
(10 rows)

select rownum from student where rownum >= 1.5;
 rownum 
--------
(0 rows)

set behavior_compat_options = 'rownum_type_compat';
explain (costs off) select * from student where rownum < 6.5;
        QUERY PLAN         
---------------------------
 Limit
   ->  Seq Scan on student
(2 rows)

explain (costs off) select * from student where rownum <= 6.5;
        QUERY PLAN         
---------------------------
 Limit
   ->  Seq Scan on student
(2 rows)

select rownum from student where rownum < 6.4;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum < 6.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum <= 6.4;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

select rownum from student where rownum <= 6.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
(6 rows)

explain (costs off) select * from student where rownum > 6.5;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Result
         One-Time Filter: false
         ->  Seq Scan on student
(4 rows)

explain (costs off) select * from student where rownum >= 6.5;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Result
         One-Time Filter: false
         ->  Seq Scan on student
(4 rows)

select rownum from student where rownum > 0.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
(10 rows)

select rownum from student where rownum > 1.5;
 rownum 
--------
(0 rows)

select rownum from student where rownum >= 0.5;
 rownum 
--------
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
(10 rows)

select rownum from student where rownum >= 1.5;
 rownum 
--------
(0 rows)

explain (costs off) select * from student where rownum = 6.5;
        QUERY PLAN        
--------------------------
 Seq Scan on student
   Filter: (ROWNUM = 6.5)
(2 rows)

explain (costs off) select * from student where rownum != 6.5;
        QUERY PLAN         
---------------------------
 Seq Scan on student
   Filter: (ROWNUM <> 6.5)
(2 rows)

-- reset
set behavior_compat_options = '';
explain (costs off) delete from student where 3 > rownum;
          QUERY PLAN          
------------------------------
 Delete on student
   ->  Seq Scan on student
         Filter: (3 > ROWNUM)
(3 rows)

explain (costs off) delete from student where 3 < rownum;
          QUERY PLAN          
------------------------------
 Delete on student
   ->  Seq Scan on student
         Filter: (3 < ROWNUM)
(3 rows)

explain delete from student where rownum < 5 or rownum < 6;
                           QUERY PLAN                           
----------------------------------------------------------------
 Delete on student  (cost=0.00..27.01 rows=630 width=6)
   ->  Seq Scan on student  (cost=0.00..27.01 rows=630 width=6)
         Filter: ((ROWNUM < 5) OR (ROWNUM < 6))
(3 rows)

explain delete from student where rownum > 5 or rownum > 6;
                           QUERY PLAN                           
----------------------------------------------------------------
 Delete on student  (cost=0.00..27.01 rows=630 width=6)
   ->  Seq Scan on student  (cost=0.00..27.01 rows=630 width=6)
         Filter: ((ROWNUM > 5) OR (ROWNUM > 6))
(3 rows)

-- ROWNUM with type cast
explain select * from student where rownum < 3::bigint;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.04 rows=2 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 3::int4;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.04 rows=2 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 3::int2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.04 rows=2 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 3::int1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.04 rows=2 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

-- ROWNUM with LIMIT ALL
explain select * from student where rownum <= 3 limit all;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 18 limit 3.14;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

-- ROWNUM with constant expression
explain select * from student where rownum > 3 + 2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where rownum < 3 + 2;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.08 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum < 9 + (-1 * 5);
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where rownum <= 9 + (-1 * 5) and id = 4;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit  (cost=0.00..16.12 rows=4 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=6 width=42)
         Filter: (id = 4)
(3 rows)

explain select * from student where rownum > -3 + 100 or id = 4;
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=382 width=42)
   Filter: ((ROWNUM > 97) OR (id = 4))
(2 rows)

explain select * from student where rownum > -3 + 100.1 or id = 4;  -- not optimized
                        QUERY PLAN                         
-----------------------------------------------------------
 Seq Scan on student  (cost=0.00..29.85 rows=382 width=42)
   Filter: (((ROWNUM)::numeric > 97.1) OR (id = 4))
(2 rows)

explain select * from student where rownum < -2 and id = (select id from student where rownum = 1);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

-- ROWNUM and NOT expression
explain select * from student where not(rownum < -2);
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(1 row)

explain select * from student where not(rownum > 3);
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=42)
(2 rows)

explain select * from student where not(rownum < 3 + 2);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..21.34 rows=1 width=42)
   ->  Result  (cost=0.00..21.34 rows=1 width=42)
         One-Time Filter: false
         ->  Seq Scan on student  (cost=0.00..21.34 rows=1 width=42)
(4 rows)

explain select * from student where not(rownum < 3 and id = 1);
                         QUERY PLAN                         
------------------------------------------------------------
 Seq Scan on student  (cost=0.00..27.01 rows=1126 width=42)
   Filter: ((ROWNUM >= 3) OR (id <> 1))
(2 rows)

explain select * from student where not(rownum > 3 or id = 1);
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit  (cost=0.00..0.06 rows=3 width=42)
   ->  Seq Scan on student  (cost=0.00..24.18 rows=1123 width=42)
         Filter: (id <> 1)
(3 rows)

-- ROWNUM with ORDER BY
explain select * from test where rownum < 5 order by 1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort  (cost=40.36..41.30 rows=378 width=42)
   Sort Key: id
   ->  Seq Scan on test  (cost=0.00..24.18 rows=378 width=42)
         Filter: (ROWNUM < 5)
(4 rows)

-- ROWNUM with GROUP BY
explain select id from test where rownum < 5 group by id;
                         QUERY PLAN                          
-------------------------------------------------------------
 HashAggregate  (cost=25.12..25.79 rows=67 width=4)
   Group By Key: id
   ->  Seq Scan on test  (cost=0.00..24.18 rows=378 width=4)
         Filter: (ROWNUM < 5)
(4 rows)

-- ROWNUM with UNION and ORDER BY
explain select id from student where rownum < 3 union select id from (select id from student order by 1)  where rownum < 5;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=79.04..79.10 rows=6 width=4)
   Group By Key: public.student.id
   ->  Append  (cost=0.00..79.02 rows=6 width=4)
         ->  Limit  (cost=0.00..0.04 rows=2 width=4)
               ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=4)
         ->  Limit  (cost=78.87..78.92 rows=4 width=4)
               ->  Sort  (cost=78.87..81.71 rows=1134 width=4)
                     Sort Key: public.student.id
                     ->  Seq Scan on student  (cost=0.00..21.34 rows=1134 width=4)
(9 rows)

select * from test where id < 2 union select * from (select * from test order by id desc) where rownum < 5;
 id | testchar 
----+----------
  8 | test8
  7 | test7
  9 | test9
  1 | test1
 10 | test10
(5 rows)

-- ROWNUM for Column-Oriented
create table student_cstore1(id int, stuname varchar(10) ) WITH (orientation=column) ;
create table student_cstore2(id int, stuname varchar(10) ) WITH (orientation=column) ;
insert  into student_cstore1 select * from student;
-- test rownum for cstorescan 
select * from student_cstore1 where rownum < 5;
 id | stuname 
----+---------
  1 | stu1
  2 | stu2
  3 | stu3
  4 | stu4
(4 rows)

select rownum, * from student_cstore1 where rownum < 1;
 rownum | id | stuname 
--------+----+---------
(0 rows)

select rownum, * from student_cstore1 where rownum <= 1;
 rownum | id | stuname 
--------+----+---------
      1 |  1 | stu1
(1 row)

select rownum, * from student_cstore1 where rownum <= 10;
 rownum | id | stuname 
--------+----+---------
      1 |  1 | stu1
      2 |  2 | stu2
      3 |  3 | stu3
      4 |  4 | stu4
      5 |  5 | stu5
      6 |  6 | stu6
      7 |  7 | stu7
      8 |  8 | stu8
      9 |  9 | stu9
     10 | 10 | stu10
(10 rows)

select rownum, * from student_cstore1 where stuname = 'stu5' and rownum < 4;
 rownum | id | stuname 
--------+----+---------
      1 |  5 | stu5
(1 row)

select rownum, stuname from student_cstore1 where stuname = 'stu5' or rownum < 8;
 rownum | stuname 
--------+---------
      1 | stu1
      2 | stu2
      3 | stu3
      4 | stu4
      5 | stu5
      6 | stu6
      7 | stu7
(7 rows)

-- test rownum for join 
insert  into student_cstore2 select * from student;
select * from student_cstore2 where rownum > 2;
 id | stuname 
----+---------
(0 rows)

select * from student_cstore2 where rownum = 2;
 id | stuname 
----+---------
(0 rows)

select rownum, sc1.stuname, sc2.id from  student_cstore2 as sc1, student_cstore2 as sc2 where sc1.id = sc2.id;
 rownum | stuname | id 
--------+---------+----
      1 | stu1    |  1
      2 | stu2    |  2
      3 | stu3    |  3
      4 | stu4    |  4
      5 | stu5    |  5
      6 | stu6    |  6
      7 | stu7    |  7
      8 | stu8    |  8
      9 | stu9    |  9
     10 | stu10   | 10
(10 rows)

-- test rownum for agg
select * from (select rownum, max(id) as max_id from student_cstore1 group by rownum) as t order by max_id;
 rownum | max_id 
--------+--------
      1 |      1
      2 |      2
      3 |      3
      4 |      4
      5 |      5
      6 |      6
      7 |      7
      8 |      8
      9 |      9
     10 |     10
(10 rows)

-- test rownum with base result plan
create table tab_1110306_1 (a1 int, b1 int, c1 int, d1 int,e1 text,f1 date) with (orientation=column) ;
insert into tab_1110306_1 values
(1, 1, 1, 1,'A10Z','2000-03-01')
,(1, 1, 1, 2,'A1Z' ,'2000-03-02')
,(1, 1, 2, 1,'A11Z','2000-03-05')
,(1, 1, 2, 2,'A2Z' ,'2000-03-04')
,(1, 2, 1, 1,'A13Z','2000-03-05')
,(1, 2, 1, 2,'A3Z' ,'2000-03-19')
,(1, 2, 2, 1,'A15Z','2000-03-05')
,(1, 2, 2, 2,'A4Z' ,'2000-03-19')
,(1, 3, 3, 3,'A10Z','2000-03-05')
,(2, 5, 5, 5,'A5Z' ,'2000-03-10')
,(2, NULL, 6, 6,null,'2000-04-01')
,(2, 6, NULL, 6,'A15Z','2000-05-01')
,(null, 6, 6, NULL,'A6Z','2000-03-11')
,(2, NULL, NULL, 7,'A5Z','2000-03-02')
,(2, NULL, 7, NULL,'A7Z','2000-03-03')
,(2, 7, NULL, NULL,'A10Z','2000-03-10')
,(3, NULL, NULL, NULL,'A9Z','2000-03-05')
;
explain (verbose, costs off)select 1
from (select transaction_timestamp() as aa
from tab_1110306_1
where f1 <=to_date('2010-01-02')
and c1 > 12
or statement_timestamp() >=current_timestamp
and rownum < 6
group by c1) t1
group by t1.aa
having t1.aa <=transaction_timestamp();
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate
   Output: 1, t1.aa
   Group By Key: t1.aa
   ->  Subquery Scan on t1
         Output: t1.aa
         ->  Group
               Output: transaction_timestamp(), tab_1110306_1.c1
               Group By Key: tab_1110306_1.c1
               ->  Sort
                     Output: tab_1110306_1.c1
                     Sort Key: tab_1110306_1.c1
                     ->  Result
                           Output: tab_1110306_1.c1
                           Filter: (((tab_1110306_1.f1 <= to_date('2010-01-02'::text)) AND (tab_1110306_1.c1 > 12)) OR ((statement_timestamp() >= pg_systimestamp()) AND (ROWNUM < 6)))
                           ->  Result
                                 Output: tab_1110306_1.c1, tab_1110306_1.f1
                                 One-Time Filter: (transaction_timestamp() <= transaction_timestamp())
                                 ->  Row Adapter
                                       Output: tab_1110306_1.c1, tab_1110306_1.f1
                                       ->  CStore Scan on public.tab_1110306_1
                                             Output: tab_1110306_1.c1, tab_1110306_1.f1
(21 rows)

select 1
from (select transaction_timestamp() as aa
from tab_1110306_1
where f1 <=to_date('2010-01-02')
and c1 > 12
or statement_timestamp() >=current_timestamp
and rownum < 6
group by c1) t1
group by t1.aa
having t1.aa <=transaction_timestamp();
 ?column? 
----------
        1
(1 row)

drop table tab_1110306_1;
drop table student_cstore1;
drop table student_cstore2;
drop table student;
drop table test;
--test partition table
-- partition by RANGE
CREATE TABLE partition_range (c1 int , c2 int)
 PARTITION BY RANGE (c2) (
 PARTITION p1 START(1) END(1000),
 PARTITION p2 END(2000),
 PARTITION p3 START(2000) END(2500)
);
insert into partition_range values(1,200);
insert into partition_range values(1,300);
insert into partition_range values(1,400);
insert into partition_range values(1,1500);
insert into partition_range values(1,1600);
insert into partition_range values(1,1700);
insert into partition_range values(1,2100);
insert into partition_range values(1,2300);
select rownum,* from partition_range;
 rownum | c1 |  c2  
--------+----+------
      1 |  1 |  200
      2 |  1 |  300
      3 |  1 |  400
      4 |  1 | 1500
      5 |  1 | 1600
      6 |  1 | 1700
      7 |  1 | 2100
      8 |  1 | 2300
(8 rows)

select * from partition_range where rownum < 5;
 c1 |  c2  
----+------
  1 |  200
  1 |  300
  1 |  400
  1 | 1500
(4 rows)

drop table partition_range;
-- partition by LIST
create table partition_list(id int,name varchar,age int)
partition by list(id)
(partition p1 values(10),
 partition p2 values(20),
 partition p3 values(30),
 partition p4 values(40)
);
insert into partition_list values(10,'ten',10);
insert into partition_list values(10,'thirteen',13);
insert into partition_list values(20,'twenty',20);
insert into partition_list values(20,'twenty-three',23);
insert into partition_list values(30,'thirty',30);
insert into partition_list values(30,'Thirty-three',33);
insert into partition_list values(40,'forty',40);
insert into partition_list values(40,'forty-three',43);
select rownum,* from partition_list;
 rownum | id |     name     | age 
--------+----+--------------+-----
      1 | 10 | ten          |  10
      2 | 10 | thirteen     |  13
      3 | 20 | twenty       |  20
      4 | 20 | twenty-three |  23
      5 | 30 | thirty       |  30
      6 | 30 | Thirty-three |  33
      7 | 40 | forty        |  40
      8 | 40 | forty-three  |  43
(8 rows)

select * from partition_list where rownum < 5;
 id |     name     | age 
----+--------------+-----
 10 | ten          |  10
 10 | thirteen     |  13
 20 | twenty       |  20
 20 | twenty-three |  23
(4 rows)

drop table partition_list;
-- partition by HASH
create table partition_hash(id int,name varchar,age int)
partition by hash(id)
(partition p1,
 partition p2,
 partition p3
);
insert into partition_hash values(10,'ten',10);
insert into partition_hash values(10,'thirteen',13);
insert into partition_hash values(20,'twenty',20);
insert into partition_hash values(20,'twenty-three',23);
insert into partition_hash values(30,'thirty',30);
insert into partition_hash values(30,'Thirty-three',33);
insert into partition_hash values(40,'forty',40);
insert into partition_hash values(40,'forty-three',43);
select rownum,* from partition_hash;
 rownum | id |     name     | age 
--------+----+--------------+-----
      1 | 10 | ten          |  10
      2 | 10 | thirteen     |  13
      3 | 20 | twenty       |  20
      4 | 20 | twenty-three |  23
      5 | 30 | thirty       |  30
      6 | 30 | Thirty-three |  33
      7 | 40 | forty        |  40
      8 | 40 | forty-three  |  43
(8 rows)

select * from partition_hash where rownum < 5;
 id |     name     | age 
----+--------------+-----
 10 | ten          |  10
 10 | thirteen     |  13
 20 | twenty       |  20
 20 | twenty-three |  23
(4 rows)

drop table partition_hash;
create table test_rownum_subquery
(
  pk integer,
  no varchar2
);
insert into test_rownum_subquery values (1,'1');
insert into test_rownum_subquery values (2,'2');
insert into test_rownum_subquery values (3,'3');
insert into test_rownum_subquery values (4,'4');
insert into test_rownum_subquery values (5,'5');
select * from test_rownum_subquery;
 pk | no 
----+----
  1 | 1
  2 | 2
  3 | 3
  4 | 4
  5 | 5
(5 rows)

update  test_rownum_subquery t set t.no = to_char(100 - 1 + (
    select vou_no from (
        select rownum as vou_no, no from (
            select distinct no from test_rownum_subquery b order by 1
        )
    ) where nvl(no, 0) = nvl(t.no, 0)
));
select * from test_rownum_subquery;
 pk | no  
----+-----
  1 | 100
  2 | 101
  3 | 102
  4 | 103
  5 | 104
(5 rows)

drop table test_rownum_subquery;
create table test_rownum_push_qual(id int);
insert into test_rownum_push_qual values(generate_series(1, 20));
-- having qual should not be pushed if accompanied by rownum reference
explain (verbose on, costs off) select rownum, * from test_rownum_push_qual group by id,rownum having ROWNUM < 10 and id between 10 and 20 order by 1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Group
   Output: id
   Group By Key: (ROWNUM), test_rownum_push_qual.id
   Filter: (((ROWNUM) < 10) AND (test_rownum_push_qual.id >= 10) AND (test_rownum_push_qual.id <= 20))
   ->  Sort
         Output: (ROWNUM), id
         Sort Key: (ROWNUM), test_rownum_push_qual.id
         ->  Seq Scan on public.test_rownum_push_qual
               Output: ROWNUM, id
(9 rows)

select rownum, * from test_rownum_push_qual group by id,rownum having ROWNUM < 10 and id between 10 and 20 order by 1; -- expect 0 rows
 rownum | id 
--------+----
(0 rows)

explain (verbose on, costs off) select rownum, * from test_rownum_push_qual group by id,rownum having ROWNUM < 10 or id between 10 and 20 order by 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Group
   Output: id
   Group By Key: (ROWNUM), test_rownum_push_qual.id
   Filter: (((ROWNUM) < 10) OR ((test_rownum_push_qual.id >= 10) AND (test_rownum_push_qual.id <= 20)))
   ->  Sort
         Output: (ROWNUM), id
         Sort Key: (ROWNUM), test_rownum_push_qual.id
         ->  Seq Scan on public.test_rownum_push_qual
               Output: ROWNUM, id
(9 rows)

select rownum, * from test_rownum_push_qual group by id,rownum having ROWNUM < 10 or id between 10 and 20 order by 1; -- expect 20 rows
 rownum | id 
--------+----
      1 |  1
      2 |  2
      3 |  3
      4 |  4
      5 |  5
      6 |  6
      7 |  7
      8 |  8
      9 |  9
     10 | 10
     11 | 11
     12 | 12
     13 | 13
     14 | 14
     15 | 15
     16 | 16
     17 | 17
     18 | 18
     19 | 19
     20 | 20
(20 rows)

explain (verbose on, costs off) select rownum, * from test_rownum_push_qual group by id,rownum having case when ROWNUM < 10 then 'true'::boolean else 'false'::boolean end and id between 10 and 20 order by 1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Group
   Output: id
   Group By Key: (ROWNUM), test_rownum_push_qual.id
   Filter: (CASE WHEN ((ROWNUM) < 10) THEN true ELSE false END AND (test_rownum_push_qual.id >= 10) AND (test_rownum_push_qual.id <= 20))
   ->  Sort
         Output: (ROWNUM), id
         Sort Key: (ROWNUM), test_rownum_push_qual.id
         ->  Seq Scan on public.test_rownum_push_qual
               Output: ROWNUM, id
(9 rows)

select rownum, * from test_rownum_push_qual group by id,rownum having case when ROWNUM < 10 then 'true'::boolean else 'false'::boolean end and id between 10 and 20 order by 1; -- expect 0 rows
 rownum | id 
--------+----
(0 rows)

-- do not transform rownum op const to limit const -1, if limit clause is stated
explain (verbose on, costs off) select rownum, * from test_rownum_push_qual where rownum < 10 limit 10 offset 10;
                   QUERY PLAN                   
------------------------------------------------
 Limit
   Output: id
   ->  Seq Scan on public.test_rownum_push_qual
         Output: id
         Filter: (ROWNUM < 10)
(5 rows)

select rownum, * from test_rownum_push_qual where rownum < 10 limit 10 offset 10; -- expected 0 rows
 rownum | id 
--------+----
(0 rows)

explain (verbose on, costs off) select rownum, * from test_rownum_push_qual where rownum > 10 limit 10 offset 10;
                   QUERY PLAN                   
------------------------------------------------
 Limit
   Output: id
   ->  Seq Scan on public.test_rownum_push_qual
         Output: id
         Filter: (ROWNUM > 10)
(5 rows)

select rownum, * from test_rownum_push_qual where rownum > 10 limit 10 offset 10; -- expected 0 rows
 rownum | id 
--------+----
(0 rows)

explain (verbose on, costs off) select rownum, * from test_rownum_push_qual where rownum < 15 limit 10 offset 10;
                   QUERY PLAN                   
------------------------------------------------
 Limit
   Output: id
   ->  Seq Scan on public.test_rownum_push_qual
         Output: id
         Filter: (ROWNUM < 15)
(5 rows)

select rownum, * from test_rownum_push_qual where rownum < 15 limit 10 offset 10; -- expected 4 rows
 rownum | id 
--------+----
     11 | 11
     12 | 12
     13 | 13
     14 | 14
(4 rows)

explain (verbose on, costs off) select rownum, * from (select * from test_rownum_push_qual order by 1) where rownum < 10 limit 10 offset 10;
                         QUERY PLAN                         
------------------------------------------------------------
 Limit
   Output: __unnamed_subquery__.id
   ->  Subquery Scan on __unnamed_subquery__
         Output: __unnamed_subquery__.id
         Filter: (ROWNUM < 10)
         ->  Sort
               Output: test_rownum_push_qual.id
               Sort Key: test_rownum_push_qual.id
               ->  Seq Scan on public.test_rownum_push_qual
                     Output: test_rownum_push_qual.id
(10 rows)

select rownum, * from (select * from test_rownum_push_qual order by 1) where rownum < 10 limit 10 offset 10;  -- expected 0 rows
 rownum | id 
--------+----
(0 rows)

