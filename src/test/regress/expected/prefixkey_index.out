create database prefix_index_db WITH ENCODING 'UTF-8' LC_COLLATE='C' LC_CTYPE='C' dbcompatibility 'B';
\c prefix_index_db
--
-- CREATE_INDEX
--
-- test datatype
CREATE TABLE test_prefix_datatype (
    f1 int,
    f2 money,
    f3 boolean,
    f4 date,
    f5 point,
    f6 cidr,
    f7 bit(64),
    f8 json,
    f9 NAME,
    f10 CHAR(64),
    f11 VARCHAR(64),
    f12 VARCHAR2(64),
    f13 NVARCHAR2(64),
    f14 NVARCHAR(64),
    f15 TEXT,
    f16 CLOB,
    f17 "char",
    f18 BLOB,
    f19 RAW,
    f20 BYTEA
);
CREATE INDEX idx_prefix_f1 ON test_prefix_datatype (f1(4));
ERROR:  index prefix key are not supported by column type integer
LINE 1: CREATE INDEX idx_prefix_f1 ON test_prefix_datatype (f1(4));
                                                            ^
CREATE INDEX idx_prefix_f2 ON test_prefix_datatype (f2(4));
ERROR:  index prefix key are not supported by column type money
LINE 1: CREATE INDEX idx_prefix_f2 ON test_prefix_datatype (f2(4));
                                                            ^
CREATE INDEX idx_prefix_f3 ON test_prefix_datatype (f3(4));
ERROR:  index prefix key are not supported by column type boolean
LINE 1: CREATE INDEX idx_prefix_f3 ON test_prefix_datatype (f3(4));
                                                            ^
CREATE INDEX idx_prefix_f4 ON test_prefix_datatype (f4(4));
ERROR:  index prefix key are not supported by column type date
LINE 1: CREATE INDEX idx_prefix_f4 ON test_prefix_datatype (f4(4));
                                                            ^
CREATE INDEX idx_prefix_f5 ON test_prefix_datatype (f5(4));
ERROR:  index prefix key are not supported by column type point
LINE 1: CREATE INDEX idx_prefix_f5 ON test_prefix_datatype (f5(4));
                                                            ^
CREATE INDEX idx_prefix_f6 ON test_prefix_datatype (f6(4));
ERROR:  index prefix key are not supported by column type cidr
LINE 1: CREATE INDEX idx_prefix_f6 ON test_prefix_datatype (f6(4));
                                                            ^
CREATE INDEX idx_prefix_f7 ON test_prefix_datatype (f7(4));
ERROR:  index prefix key are not supported by column type bit
LINE 1: CREATE INDEX idx_prefix_f7 ON test_prefix_datatype (f7(4));
                                                            ^
CREATE INDEX idx_prefix_f8 ON test_prefix_datatype (f8(4));
ERROR:  index prefix key are not supported by column type json
LINE 1: CREATE INDEX idx_prefix_f8 ON test_prefix_datatype (f8(4));
                                                            ^
CREATE INDEX idx_prefix_f9 ON test_prefix_datatype (f9(4));
ERROR:  index prefix key are not supported by column type name
LINE 1: CREATE INDEX idx_prefix_f9 ON test_prefix_datatype (f9(4));
                                                            ^
CREATE INDEX idx_prefix_f10 ON test_prefix_datatype (f10(65));
ERROR:  index key prefix length(65) too long for type character(64)
LINE 1: ...EATE INDEX idx_prefix_f10 ON test_prefix_datatype (f10(65));
                                                              ^
CREATE INDEX idx_prefix_f10 ON test_prefix_datatype (f10(4));
CREATE INDEX idx_prefix_f11 ON test_prefix_datatype (f11(65));
ERROR:  index key prefix length(65) too long for type character varying(64)
LINE 1: ...EATE INDEX idx_prefix_f11 ON test_prefix_datatype (f11(65));
                                                              ^
CREATE INDEX idx_prefix_f11 ON test_prefix_datatype (f11(4));
CREATE INDEX idx_prefix_f12 ON test_prefix_datatype (f12(65));
ERROR:  index key prefix length(65) too long for type character varying(64)
LINE 1: ...EATE INDEX idx_prefix_f12 ON test_prefix_datatype (f12(65));
                                                              ^
CREATE INDEX idx_prefix_f12 ON test_prefix_datatype (f12(4));
CREATE INDEX idx_prefix_f13 ON test_prefix_datatype (f13(65));
ERROR:  index key prefix length(65) too long for type nvarchar2(64)
LINE 1: ...EATE INDEX idx_prefix_f13 ON test_prefix_datatype (f13(65));
                                                              ^
CREATE INDEX idx_prefix_f13 ON test_prefix_datatype (f13(4));
CREATE INDEX idx_prefix_f14 ON test_prefix_datatype (f14(65));
ERROR:  index key prefix length(65) too long for type nvarchar2(64)
LINE 1: ...EATE INDEX idx_prefix_f14 ON test_prefix_datatype (f14(65));
                                                              ^
CREATE INDEX idx_prefix_f14 ON test_prefix_datatype (f14(4));
CREATE INDEX idx_prefix_f15 ON test_prefix_datatype (f15(4));
CREATE INDEX idx_prefix_f16 ON test_prefix_datatype (f16(4));
CREATE INDEX idx_prefix_f17 ON test_prefix_datatype (f17(4));
ERROR:  index prefix key are not supported by column type "char"
LINE 1: ...REATE INDEX idx_prefix_f17 ON test_prefix_datatype (f17(4));
                                                               ^
CREATE INDEX idx_prefix_f18 ON test_prefix_datatype (f18(4));
CREATE INDEX idx_prefix_f19 ON test_prefix_datatype (f19(4));
CREATE INDEX idx_prefix_f20 ON test_prefix_datatype (f20(4));
DROP TABLE test_prefix_datatype;
-- test syntax
CREATE TABLE test_prefix_syntax (
    fchar CHAR(64),
    BETWEEN VARCHAR(64),
    GREATEST TEXT,
    fblob BLOB
) ;
CREATE INDEX error_index_fchar ON test_prefix_syntax (fchar(0));
ERROR:  index key prefix length(0) must be positive and cannot exceed 2676
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_syntax (fchar(0));
                                                             ^
CREATE INDEX error_index_fchar ON test_prefix_syntax (fchar(-1));
ERROR:  index key prefix length(-1) must be positive and cannot exceed 2676
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_syntax (fchar(-1))...
                                                             ^
CREATE INDEX error_index_fchar ON test_prefix_syntax (fchar(1+1));
ERROR:  function fchar(integer) does not exist
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_syntax (fchar(1+1)...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CREATE INDEX error_index_fchar ON test_prefix_syntax (fchar(6.4));
ERROR:  function fchar(numeric) does not exist
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_syntax (fchar(6.4)...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CREATE INDEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(0));
ERROR:  index key prefix length(0) must be positive and cannot exceed 2676
LINE 1: ... INDEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(0)...
                                                             ^
CREATE INDEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(-1));
ERROR:  syntax error at or near "-"
LINE 1: ...DEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(-1));
                                                                  ^
CREATE INDEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(1+1));
ERROR:  syntax error at or near "+"
LINE 1: ...EX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(1+1));
                                                                  ^
CREATE INDEX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(6.4));
ERROR:  syntax error at or near "6.4"
LINE 1: ...EX error_index_BETWEEN ON test_prefix_syntax (BETWEEN(6.4));
                                                                 ^
-- GREATEST cannot be parsed as prefix key yet
CREATE INDEX error_index_GREATEST1 ON test_prefix_syntax (GREATEST(0));
CREATE INDEX error_index_GREATEST2 ON test_prefix_syntax (GREATEST(-1));
CREATE INDEX error_index_GREATEST3 ON test_prefix_syntax (GREATEST(1+1));
CREATE INDEX error_index_GREATEST4 ON test_prefix_syntax (GREATEST(6.4));
CREATE INDEX error_index_fblob ON test_prefix_syntax using hash (fblob(5));
ERROR:  access method "hash" does not support prefix key
CREATE INDEX error_index_fblob ON test_prefix_syntax using gin (fblob(5));
ERROR:  access method "gin" does not support prefix key
CREATE INDEX error_index_fblob ON test_prefix_syntax using gist (fblob(5));
ERROR:  access method "gist" does not support prefix key
DROP TABLE test_prefix_syntax;
-- test btree prefix length
CREATE TABLE test_prefix_key_len (
    fchar CHAR(4096),
    ftext TEXT,
    fbytea BYTEA
);
insert into test_prefix_key_len
  select array_to_string(array(
    select '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'
    FROM generate_series(1, 80)), '') as col1, col1 as col2, convert_to(col2, 'UTF8') as col3;
select length(fchar),length(ftext),length(fbytea) from test_prefix_key_len;
 length | length | length 
--------+--------+--------
   4000 |   4000 |   4000
(1 row)

select lengthb(fchar),lengthb(ftext),octet_length(fbytea) from test_prefix_key_len;
 lengthb | lengthb | octet_length 
---------+---------+--------------
    4096 |    4000 |         4000
(1 row)

CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...dx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(267...
                                                             ^
CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2676));
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2676));
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2676));
CREATE INDEX idx_prefix_len_test_comb ON test_prefix_key_len (fchar(2676),ftext(2676),fbytea(2676));
EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fchar on test_prefix_key_len
         Index Cond: ((fchar >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::bpchar) AND (fchar < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::bpchar))
         Filter: (fchar ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_ftext on test_prefix_key_len
         Index Cond: ((ftext >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::text) AND (ftext < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::text))
         Filter: (ftext ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fbytea on test_prefix_key_len
         Index Cond: ((fbytea >= '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e'::bytea) AND (fbytea < '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6f'::bytea))
         Filter: (fbytea ~~ '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e25'::bytea)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_comb on test_prefix_key_len
         Index Cond: ((ftext >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::text) AND (ftext < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::text))
         Filter: (ftext ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

DROP TABLE test_prefix_key_len;
-- test btree prefix length with multibyte characters
CREATE TABLE test_prefix_key_len (
    fchar CHAR(4096),
    ftext TEXT,
    fbytea BYTEA
);
insert into test_prefix_key_len
  select array_to_string(array(
    select '一二三四五六七八九十百千万亿兆'
    FROM generate_series(1, 200)), '') as col1, col1 as col2, convert_to(col2, 'UTF8') as col3;
select length(fchar),length(ftext),length(fbytea) from test_prefix_key_len;
 length | length | length 
--------+--------+--------
   3000 |   3000 |   9000
(1 row)

select lengthb(fchar),lengthb(ftext),octet_length(fbytea) from test_prefix_key_len;
 lengthb | lengthb | octet_length 
---------+---------+--------------
    9000 |    9000 |         9000
(1 row)

CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...dx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(267...
                                                             ^
CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2676));
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2676));
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2676));
CREATE INDEX idx_prefix_len_test_comb ON test_prefix_key_len (fchar(2676),ftext(2676),fbytea(2676));
EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '一二三四五六七八九十百千万亿兆%';
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fchar on test_prefix_key_len
         Index Cond: ((fchar >= '一二三四五六七八九十百千万亿兆'::bpchar) AND (fchar < '一二三四五六七八九十百千万亿兇'::bpchar))
         Filter: (fchar ~~ '一二三四五六七八九十百千万亿兆%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '一二三四五六七八九十百千万亿兆%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '一二三四五六七八九十百千万亿兆%';
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_ftext on test_prefix_key_len
         Index Cond: ((ftext >= '一二三四五六七八九十百千万亿兆'::text) AND (ftext < '一二三四五六七八九十百千万亿兇'::text))
         Filter: (ftext ~~ '一二三四五六七八九十百千万亿兆%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '一二三四五六七八九十百千万亿兆%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '一二三四五六七八九十百千万亿兆%';
                                                                                                                          QUERY PLAN                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fbytea on test_prefix_key_len
         Index Cond: ((fbytea >= '\xe4b880e4ba8ce4b889e59b9be4ba94e585ade4b883e585abe4b99de58d81e799bee58d83e4b887e4babfe58586'::bytea) AND (fbytea < '\xe4b880e4ba8ce4b889e59b9be4ba94e585ade4b883e585abe4b99de58d81e799bee58d83e4b887e4babfe58587'::bytea))
         Filter: (fbytea ~~ '\xe4b880e4ba8ce4b889e59b9be4ba94e585ade4b883e585abe4b99de58d81e799bee58d83e4b887e4babfe5858625'::bytea)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '一二三四五六七八九十百千万亿兆%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '一二三四五六七八九十百千万亿兆%';
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_comb on test_prefix_key_len
         Index Cond: ((ftext >= '一二三四五六七八九十百千万亿兆'::text) AND (ftext < '一二三四五六七八九十百千万亿兇'::text))
         Filter: (ftext ~~ '一二三四五六七八九十百千万亿兆%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '一二三四五六七八九十百千万亿兆%';
 count 
-------
     1
(1 row)

DROP TABLE test_prefix_key_len;
-- test ubtree prefix length
CREATE TABLE test_prefix_key_len (
    fchar CHAR(4096),
    ftext TEXT,
    fbytea BYTEA
) WITH (STORAGE_TYPE=USTORE);
insert into test_prefix_key_len
  select array_to_string(array(
    select '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'
    FROM generate_series(1, 80)), '') as col1, col1 as col2, convert_to(col2, 'UTF8') as col3;
select length(fchar),length(ftext),length(fbytea) from test_prefix_key_len;
 length | length | length 
--------+--------+--------
   4000 |   4000 |   4000
(1 row)

select lengthb(fchar),lengthb(ftext),octet_length(fbytea) from test_prefix_key_len;
 lengthb | lengthb | octet_length 
---------+---------+--------------
    4096 |    4000 |         4000
(1 row)

CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2677...
                                                             ^
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2677));
ERROR:  index key prefix length(2677) must be positive and cannot exceed 2676
LINE 1: ...dx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(267...
                                                             ^
CREATE INDEX idx_prefix_len_test_fchar ON test_prefix_key_len (fchar(2676));
CREATE INDEX idx_prefix_len_test_ftext ON test_prefix_key_len (ftext(2676));
CREATE INDEX idx_prefix_len_test_fbytea ON test_prefix_key_len (fbytea(2676));
CREATE INDEX idx_prefix_len_test_comb ON test_prefix_key_len (fchar(2676),ftext(2676),fbytea(2676));
EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fchar on test_prefix_key_len
         Index Cond: ((fchar >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::bpchar) AND (fchar < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::bpchar))
         Filter: (fchar ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fchar) */count(1) FROM test_prefix_key_len WHERE fchar LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_ftext on test_prefix_key_len
         Index Cond: ((ftext >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::text) AND (ftext < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::text))
         Filter: (ftext ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_ftext) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_fbytea on test_prefix_key_len
         Index Cond: ((fbytea >= '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e'::bytea) AND (fbytea < '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6f'::bytea))
         Filter: (fbytea ~~ '\x303132333435363738394142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e25'::bytea)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_fbytea) */count(1) FROM test_prefix_key_len WHERE fbytea LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

EXPLAIN (costs false)
SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using idx_prefix_len_test_comb on test_prefix_key_len
         Index Cond: ((ftext >= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn'::text) AND (ftext < '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmo'::text))
         Filter: (ftext ~~ '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%'::text)
(4 rows)

SELECT /*+ indexscan(test_prefix_key_len idx_prefix_len_test_comb) */count(1) FROM test_prefix_key_len WHERE ftext LIKE '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmn%';
 count 
-------
     1
(1 row)

DROP TABLE test_prefix_key_len;
--
-- CREATE_INDEX and USE INDEX
--
CREATE TABLE test_prefix_table (
    id INTEGER,
    fchar CHAR(64) collate utf8mb4_bin,
    fvchar VARCHAR(64) collate utf8mb4_bin,
    ftext TEXT collate utf8mb4_bin,
    fclob CLOB collate utf8mb4_bin,
    fblob BLOB,
    fraw RAW,
    fbytea BYTEA
) ;
INSERT INTO test_prefix_table VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-123', 'ZZZZZ-123', 'ZZZZZ-123', 'ZZZZZ-123', '5A5A5A5A5A2D313233', HEXTORAW('5A5A5A5A5A2D313233'),E'\\x5A5A5A5A5A2D313233');
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', '5A5A5A5A5A2D333030', HEXTORAW('5A5A5A5A5A2D333030'),E'\\x5A5A5A5A5A2D333030');
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-000', 'ZZZZZ-000', 'ZZZZZ-000', 'ZZZZZ-000', '5A5A5A5A5A2D303030', HEXTORAW('5A5A5A5A5A2D303030'),E'\\x5A5A5A5A5A2D303030');
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', '5A5A5A5A5A2D323131', HEXTORAW('5A5A5A5A5A2D323131'),E'\\x5A5A5A5A5A2D323131');
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', '5A5A5A5A5A2D313131', HEXTORAW('5A5A5A5A5A2D313131'),E'\\x5A5A5A5A5A2D313131');
INSERT INTO test_prefix_table VALUES(30, 'ZZZZZ-210', 'ZZZZZ-210', 'ZZZZZ-210', 'ZZZZZ-210', '5A5A5A5A5A2D323130', HEXTORAW('5A5A5A5A5A2D323130'),E'\\x5A5A5A5A5A2D323130');
INSERT INTO test_prefix_table VALUES(30, 'Z', 'Z', 'Z', 'Z', '5A', HEXTORAW('5A'),E'\\x5A');
INSERT INTO test_prefix_table VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', '59595959592D333030', HEXTORAW('59595959592D333030'),E'\\x59595959592D333030');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-000', 'YYYYY-000', 'YYYYY-000', 'YYYYY-000', '59595959592D303030', HEXTORAW('59595959592D303030'),E'\\x59595959592D303030');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', '59595959592D323131', HEXTORAW('59595959592D323131'),E'\\x59595959592D323131');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', '59595959592D313131', HEXTORAW('59595959592D313131'),E'\\x59595959592D313131');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-210', 'YYYYY-210', 'YYYYY-210', 'YYYYY-210', '59595959592D323130', HEXTORAW('59595959592D323130'),E'\\x59595959592D323130');
INSERT INTO test_prefix_table VALUES(20, 'Y', 'Y', 'Y', 'Y', '59', HEXTORAW('59'),E'\\x59');
INSERT INTO test_prefix_table VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', 'e9ab98e696afe695b0e68daee5ba932d323130', HEXTORAW('e9ab98e696afe695b0e68daee5ba932d323130'),E'\\xe9ab98e696afe695b0e68daee5ba932d323130');
INSERT INTO test_prefix_table VALUES(20, '开源数据库-210', '开源数据库-210', '开源数据库-210', '开源数据库-210', 'e5bc80e6ba90e695b0e68daee5ba932d323130', HEXTORAW('e5bc80e6ba90e695b0e68daee5ba932d323130'),E'\\xe5bc80e6ba90e695b0e68daee5ba932d323130');
INSERT INTO test_prefix_table VALUES(20, '高', '高', '高', '高', 'e9ab98', HEXTORAW('e9ab98'),E'\\xe9ab98');
CREATE INDEX prefix_index_fchar_fbytea ON test_prefix_table (fchar(5), fbytea(5));
CREATE INDEX prefix_index_fvchar ON test_prefix_table (fvchar(5));
CREATE INDEX prefix_index_ftext ON test_prefix_table (ftext(5));
CREATE INDEX prefix_index_fclob ON test_prefix_table (fclob(5));
CREATE INDEX prefix_index_fblob ON test_prefix_table (fblob(5));
CREATE UNIQUE INDEX prefix_index_fraw ON test_prefix_table (fraw(9));
\d+ test_prefix_table
                                        Table "public.test_prefix_table"
 Column |         Type          |               Modifiers                | Storage  | Stats target | Description 
--------+-----------------------+----------------------------------------+----------+--------------+-------------
 id     | integer               |                                        | plain    |              | 
 fchar  | character(64)         | character set UTF8 collate utf8mb4_bin | extended |              | 
 fvchar | character varying(64) | character set UTF8 collate utf8mb4_bin | extended |              | 
 ftext  | text                  | character set UTF8 collate utf8mb4_bin | extended |              | 
 fclob  | clob                  | character set UTF8 collate utf8mb4_bin | extended |              | 
 fblob  | blob                  |                                        | extended |              | 
 fraw   | raw                   |                                        | extended |              | 
 fbytea | bytea                 |                                        | extended |              | 
Indexes:
    "prefix_index_fraw" UNIQUE, btree (fraw(9)) TABLESPACE pg_default
    "prefix_index_fblob" btree (fblob(5)) TABLESPACE pg_default
    "prefix_index_fchar_fbytea" btree (fchar(5), fbytea(5)) TABLESPACE pg_default
    "prefix_index_fclob" btree (fclob(5)) TABLESPACE pg_default
    "prefix_index_ftext" btree (ftext(5)) TABLESPACE pg_default
    "prefix_index_fvchar" btree (fvchar(5)) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, compression=no

select pg_get_tabledef('test_prefix_table'::regclass);
                                                   pg_get_tabledef                                                    
----------------------------------------------------------------------------------------------------------------------
 SET search_path = public;                                                                                           +
 CREATE TABLE test_prefix_table (                                                                                    +
     id integer,                                                                                                     +
     fchar character(64) CHARACTER SET "UTF8" COLLATE utf8mb4_bin,                                                   +
     fvchar character varying(64) CHARACTER SET "UTF8" COLLATE utf8mb4_bin,                                          +
     ftext text CHARACTER SET "UTF8" COLLATE utf8mb4_bin,                                                            +
     fclob clob CHARACTER SET "UTF8" COLLATE utf8mb4_bin,                                                            +
     fblob blob,                                                                                                     +
     fraw raw,                                                                                                       +
     fbytea bytea                                                                                                    +
 )                                                                                                                   +
 WITH (orientation=row, compression=no);                                                                             +
 CREATE UNIQUE INDEX prefix_index_fraw ON test_prefix_table USING btree (fraw(9)) TABLESPACE pg_default;             +
 CREATE INDEX prefix_index_fblob ON test_prefix_table USING btree (fblob(5)) TABLESPACE pg_default;                  +
 CREATE INDEX prefix_index_fclob ON test_prefix_table USING btree (fclob(5)) TABLESPACE pg_default;                  +
 CREATE INDEX prefix_index_ftext ON test_prefix_table USING btree (ftext(5)) TABLESPACE pg_default;                  +
 CREATE INDEX prefix_index_fvchar ON test_prefix_table USING btree (fvchar(5)) TABLESPACE pg_default;                +
 CREATE INDEX prefix_index_fchar_fbytea ON test_prefix_table USING btree (fchar(5), fbytea(5)) TABLESPACE pg_default;
(1 row)

set enable_seqscan=false;
set enable_opfusion=false;
set enable_partition_opfusion=false;
SELECT ftext FROM test_prefix_table where ftext like 'XXXXX%' ORDER BY 1;
 ftext 
-------
(0 rows)

SELECT fblob FROM test_prefix_table where fblob < '58585858582D333030' ORDER BY 1;
 fblob 
-------
(0 rows)

SELECT fchar, fbytea FROM test_prefix_table where (fchar, fbytea)= ('XXXXX-211', 'XXXXX-211') ORDER BY 1,2;
 fchar | fbytea 
-------+--------
(0 rows)

--insert
INSERT INTO test_prefix_table VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_table VALUES(10, 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', '58585858582D333030', HEXTORAW('58585858582D333030'),E'\\x58585858582D333030');
INSERT INTO test_prefix_table VALUES(10, 'XXXXX-000', 'XXXXX-000', 'XXXXX-000', 'XXXXX-000', '58585858582D303030', HEXTORAW('58585858582D303030'),E'\\x58585858582D303030');
INSERT INTO test_prefix_table VALUES(10, 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', '58585858582D323131', HEXTORAW('58585858582D323131'),E'\\x58585858582D323131');
INSERT INTO test_prefix_table VALUES(10, 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', '58585858582D313131', HEXTORAW('58585858582D313131'),E'\\x58585858582D313131');
INSERT INTO test_prefix_table VALUES(10, 'XXXXX-210', 'XXXXX-210', 'XXXXX-210', 'XXXXX-210', '58585858582D323130', HEXTORAW('58585858582D323130'),E'\\x58585858582D323130');
SELECT ftext FROM test_prefix_table where ftext like 'XXXXX%' ORDER BY 1;
   ftext   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-211
 XXXXX-300
(5 rows)

SELECT fblob FROM test_prefix_table where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D323131
(4 rows)

SELECT fchar, fbytea FROM test_prefix_table where (fchar, fbytea)= ('XXXXX-211', 'XXXXX-211') ORDER BY 1,2;
                              fchar                               |        fbytea        
------------------------------------------------------------------+----------------------
 XXXXX-211                                                        | \x58585858582d323131
(1 row)

--update
UPDATE test_prefix_table SET fchar=replace(fchar, 'XXXXX', 'AAAAA'), ftext=replace(ftext, 'XXXXX', 'AAAAA') where fvchar like 'XXXXX%';
SELECT ftext FROM test_prefix_table where ftext like 'AAAAA%' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-211
 AAAAA-300
(5 rows)

SELECT fblob FROM test_prefix_table where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D323131
(4 rows)

SELECT fchar, fbytea FROM test_prefix_table where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211') ORDER BY 1,2;
                              fchar                               |        fbytea        
------------------------------------------------------------------+----------------------
 AAAAA-211                                                        | \x58585858582d323131
(1 row)

--delete
DELETE FROM test_prefix_table where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211');
SELECT ftext FROM test_prefix_table where ftext like 'AAAAA%' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
(4 rows)

SELECT fblob FROM test_prefix_table where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
(3 rows)

SELECT fchar, fbytea FROM test_prefix_table where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211') ORDER BY 1,2;
 fchar | fbytea 
-------+--------
(0 rows)

--check query plan
analyze test_prefix_table;
--single table index scan
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like 'YYYY%' ORDER BY 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: ((ftext >= 'YYYY'::text) AND (ftext <= 'YYYY￿'::text))
         Filter: (ftext ~~ 'YYYY%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like 'YYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like 'YYYYY%' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext = 'YYYYY'::text)
         Filter: (ftext ~~ 'YYYYY%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like 'YYYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like 'YYYYY-1%' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext = 'YYYYY'::text)
         Filter: (ftext ~~ 'YYYYY-1%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like 'YYYYY-1%' ORDER BY 1;
   ftext   
-----------
 YYYYY-111
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like 'YYYYY-210' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext = 'YYYYY'::text)
         Filter: (ftext ~~ 'YYYYY-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like 'YYYYY-210' ORDER BY 1;
   ftext   
-----------
 YYYYY-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like '开%' ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: ((ftext >= '开'::text) AND (ftext <= '开￿￿￿￿'::text))
         Filter: (ftext ~~ '开%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like '开%' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like '开源数据库%' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext = '开源数据库'::text)
         Filter: (ftext ~~ '开源数据库%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like '开源数据库%' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext like '开源数据库-2%' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext = '开源数据库'::text)
         Filter: (ftext ~~ '开源数据库-2%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext like '开源数据库-2%' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext = '开源数据库-210' ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Index Scan using prefix_index_ftext on test_prefix_table
   Index Cond: (ftext = '开源数据库'::text)
   Filter: (ftext = '开源数据库-210'::text)
(3 rows)

SELECT ftext FROM test_prefix_table where ftext = '开源数据库-210' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext > '开' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext >= '开'::text)
         Filter: (ftext > '开'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext > '开' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
 高
 高斯数据库-210
(3 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext > '开源数据库' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext >= '开源数据库'::text)
         Filter: (ftext > '开源数据库'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext > '开源数据库' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
 高
 高斯数据库-210
(3 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext > '开源数据库-210' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext >= '开源数据库'::text)
         Filter: (ftext > '开源数据库-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext > '开源数据库-210' ORDER BY 1;
     ftext      
----------------
 高
 高斯数据库-210
(2 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext < '开' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext <= '开'::text)
         Filter: (ftext < '开'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext < '开' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
(17 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext < '开源数据库' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext <= '开源数据库'::text)
         Filter: (ftext < '开源数据库'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext < '开源数据库' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
(17 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext < '开源数据库-210' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext <= '开源数据库'::text)
         Filter: (ftext < '开源数据库-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext < '开源数据库-210' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
(17 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea ~~ 'YY%' ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: ((fbytea >= '\x5959'::bytea) AND (fbytea < '\x595a'::bytea))
         Filter: (fbytea ~~ '\x595925'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea ~~ 'YY%' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
(5 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea like 'YYYYY%' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\x5959595959'::bytea)
         Filter: (fbytea ~~ '\x595959595925'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea like 'YYYYY%' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
(5 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea ~~ 'YYYYY-%' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\x5959595959'::bytea)
         Filter: (fbytea ~~ '\x59595959592d25'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea ~~ 'YYYYY-%' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
(5 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea like 'YYYYY-111' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\x5959595959'::bytea)
         Filter: (fbytea ~~ '\x59595959592d313131'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea like 'YYYYY-111' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d313131
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea like '高%' ORDER BY 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: ((fbytea >= '\xe9ab98'::bytea) AND (fbytea < '\xe9ab99'::bytea))
         Filter: (fbytea ~~ '\xe9ab9825'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea like '高%' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe9ab98
 \xe9ab98e696afe695b0e68daee5ba932d323130
(2 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea ~~ '开源数据库%' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\xe5bc80e6ba'::bytea)
         Filter: (fbytea ~~ '\xe5bc80e6ba90e695b0e68daee5ba9325'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea ~~ '开源数据库%' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea like '高斯数据库-%' ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\xe9ab98e696'::bytea)
         Filter: (fbytea ~~ '\xe9ab98e696afe695b0e68daee5ba932d25'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea like '高斯数据库-%' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe9ab98e696afe695b0e68daee5ba932d323130
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea ~~ '开源数据库-210' ORDER BY 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea = '\xe5bc80e6ba'::bytea)
         Filter: (fbytea ~~ '\xe5bc80e6ba90e695b0e68daee5ba932d323130'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea ~~ '开源数据库-210' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
   Index Cond: (fbytea = '\x5959595959'::bytea)
   Filter: (fbytea = '\x59595959592d323131'::bytea)
(3 rows)

SELECT fbytea FROM test_prefix_table t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d323131
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea = E'\\x59' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
   Index Cond: (fbytea = '\x59'::bytea)
   Filter: (fbytea = '\x59'::bytea)
(3 rows)

SELECT fbytea FROM test_prefix_table t where fbytea = E'\\x59' ORDER BY 1;
 fbytea 
--------
 \x59
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea > 'Y' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea >= '\x59'::bytea)
         Filter: (fbytea > '\x59'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea > 'Y' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
 \x5a
 \x5a5a5a5a5a2d303030
 \x5a5a5a5a5a2d313131
 \x5a5a5a5a5a2d313233
 \x5a5a5a5a5a2d323130
 \x5a5a5a5a5a2d323131
 \x5a5a5a5a5a2d333030
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
 \xe9ab98
 \xe9ab98e696afe695b0e68daee5ba932d323130
(15 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea > 'YYYYY' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea >= '\x5959595959'::bytea)
         Filter: (fbytea > '\x5959595959'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea > 'YYYYY' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
 \x5a
 \x5a5a5a5a5a2d303030
 \x5a5a5a5a5a2d313131
 \x5a5a5a5a5a2d313233
 \x5a5a5a5a5a2d323130
 \x5a5a5a5a5a2d323131
 \x5a5a5a5a5a2d333030
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
 \xe9ab98
 \xe9ab98e696afe695b0e68daee5ba932d323130
(15 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea > 'YYYYY-210' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea >= '\x5959595959'::bytea)
         Filter: (fbytea > '\x59595959592d323130'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea > 'YYYYY-210' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \x59595959592d323131
 \x59595959592d333030
 \x5a
 \x5a5a5a5a5a2d303030
 \x5a5a5a5a5a2d313131
 \x5a5a5a5a5a2d313233
 \x5a5a5a5a5a2d323130
 \x5a5a5a5a5a2d323131
 \x5a5a5a5a5a2d333030
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
 \xe9ab98
 \xe9ab98e696afe695b0e68daee5ba932d323130
(12 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea < 'Y' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea <= '\x59'::bytea)
         Filter: (fbytea < '\x59'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea < 'Y' ORDER BY 1;
        fbytea        
----------------------
 \x58585858582d303030
 \x58585858582d313131
 \x58585858582d323130
 \x58585858582d333030
(4 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea < 'YYYYY' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea <= '\x5959595959'::bytea)
         Filter: (fbytea < '\x5959595959'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea < 'YYYYY' ORDER BY 1;
        fbytea        
----------------------
 \x58585858582d303030
 \x58585858582d313131
 \x58585858582d323130
 \x58585858582d333030
 \x59
(5 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_table t where fbytea < 'YYYYY-210' ORDER BY 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table t
         Index Cond: (fbytea <= '\x5959595959'::bytea)
         Filter: (fbytea < '\x59595959592d323130'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_table t where fbytea < 'YYYYY-210' ORDER BY 1;
        fbytea        
----------------------
 \x58585858582d303030
 \x58585858582d313131
 \x58585858582d323130
 \x58585858582d333030
 \x59
 \x59595959592d303030
 \x59595959592d313131
(7 rows)

EXPLAIN (costs false)
SELECT fchar FROM test_prefix_table where fchar ~ '^开' ORDER BY 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort
   Sort Key: fchar COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table
         Index Cond: ((fchar >= '开'::bpchar) AND (fchar <= '开￿￿￿￿'::bpchar))
         Filter: (fchar ~ '^开'::text)
(5 rows)

SELECT fchar FROM test_prefix_table where fchar ~ '^开' ORDER BY 1;
                            fchar                            
-------------------------------------------------------------
 开源数据库-210                                             
(1 row)

EXPLAIN (costs false)
SELECT fchar FROM test_prefix_table where fchar <= 'YYYYY-100' ORDER BY 1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Sort Key: fchar COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table
         Index Cond: (fchar <= 'YYYYY'::bpchar)
         Filter: (fchar <= 'YYYYY-100'::bpchar)
(5 rows)

SELECT fchar FROM test_prefix_table where fchar <= 'YYYYY-100' ORDER BY 1;
                              fchar                               
------------------------------------------------------------------
 AAAAA-000                                                       
 AAAAA-111                                                       
 AAAAA-210                                                       
 AAAAA-300                                                       
 Y                                                               
 YYYYY-000                                                       
(6 rows)

EXPLAIN (costs false)
SELECT fchar FROM test_prefix_table where fchar <= 'YYYYY' ORDER BY 1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Sort Key: fchar COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_table
         Index Cond: (fchar <= 'YYYYY'::bpchar)
         Filter: (fchar <= 'YYYYY'::bpchar)
(5 rows)

SELECT fchar FROM test_prefix_table where fchar <= 'YYYYY' ORDER BY 1;
                              fchar                               
------------------------------------------------------------------
 AAAAA-000                                                       
 AAAAA-111                                                       
 AAAAA-210                                                       
 AAAAA-300                                                       
 Y                                                               
(5 rows)

EXPLAIN (costs false)
SELECT fclob FROM test_prefix_table t where fclob < 'ZZZZZ-210' ORDER BY 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Sort Key: fclob COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fclob on test_prefix_table t
         Index Cond: ((fclob)::text <= 'ZZZZZ'::text)
         Filter: ((fclob)::text < 'ZZZZZ-210'::text)
(5 rows)

SELECT fclob FROM test_prefix_table t where fclob < 'ZZZZZ-210' ORDER BY 1;
   fclob   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
(14 rows)

EXPLAIN (costs false)
SELECT fclob FROM test_prefix_table t where fclob < 'Z' ORDER BY 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Sort Key: fclob COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fclob on test_prefix_table t
         Index Cond: ((fclob)::text <= 'Z'::text)
         Filter: ((fclob)::text < 'Z'::text)
(5 rows)

SELECT fclob FROM test_prefix_table t where fclob < 'Z' ORDER BY 1;
   fclob   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(10 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where fvchar >= 'ZZZZZ-210' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fvchar on test_prefix_table t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: ((fvchar)::text >= 'ZZZZZ-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where fvchar >= 'ZZZZZ-210' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(6 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where fvchar >= 'ZZZZZ' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fvchar on test_prefix_table t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: ((fvchar)::text >= 'ZZZZZ'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where fvchar >= 'ZZZZZ' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(9 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where fvchar > 'ZZZZZ-' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fvchar on test_prefix_table t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: (((fvchar)::text > 'ZZZZZ-'::text) AND ((fvchar)::text <> 'ZZZZZ-210'::text))
(5 rows)

SELECT ftext FROM test_prefix_table t where fvchar > 'ZZZZZ-' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(8 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where fvchar > left('ZZZZZ-211', 7) and fvchar <> 'ZZZZZ-211' ORDER BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fvchar on test_prefix_table t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: (((fvchar)::text > 'ZZZZZ-2'::text) AND ((fvchar)::text <> 'ZZZZZ-211'::text))
(5 rows)

SELECT ftext FROM test_prefix_table t where fvchar > left('ZZZZZ-211', 7) and fvchar <> 'ZZZZZ-211' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-210
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(5 rows)

EXPLAIN (costs false)
SELECT fblob FROM test_prefix_table t where fblob IS NOT NULL ORDER BY 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Sort Key: fblob
   ->  Index Scan using prefix_index_fblob on test_prefix_table t
         Index Cond: (fblob IS NOT NULL)
(4 rows)

SELECT fblob FROM test_prefix_table t where fblob IS NOT NULL ORDER BY 1;
                 fblob                  
----------------------------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D333030
 59
 59595959592D303030
 59595959592D313131
 59595959592D323130
 59595959592D323131
 59595959592D333030
 5A
 5A5A5A5A5A2D303030
 5A5A5A5A5A2D313131
 5A5A5A5A5A2D313233
 5A5A5A5A5A2D323130
 5A5A5A5A5A2D323131
 5A5A5A5A5A2D333030
 E5BC80E6BA90E695B0E68DAEE5BA932D323130
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
(20 rows)

EXPLAIN (costs false)
SELECT DISTINCT fraw FROM test_prefix_table t where fraw IS NOT NULL ORDER BY 1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: fraw
         ->  Index Scan using prefix_index_fraw on test_prefix_table t
               Index Cond: (fraw IS NOT NULL)
(5 rows)

SELECT DISTINCT fraw FROM test_prefix_table t where fraw IS NOT NULL ORDER BY 1;
                  fraw                  
----------------------------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D333030
 59
 59595959592D303030
 59595959592D313131
 59595959592D323130
 59595959592D323131
 59595959592D333030
 5A
 5A5A5A5A5A2D303030
 5A5A5A5A5A2D313131
 5A5A5A5A5A2D313233
 5A5A5A5A5A2D323130
 5A5A5A5A5A2D323131
 5A5A5A5A5A2D333030
 E5BC80E6BA90E695B0E68DAEE5BA932D323130
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
(20 rows)

EXPLAIN (costs false)
SELECT fraw FROM test_prefix_table t where fraw IS NULL or ftext like '高%' ORDER BY 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Sort Key: fraw
   ->  Bitmap Heap Scan on test_prefix_table t
         Recheck Cond: ((fraw IS NULL) OR (ftext ~~ '高%'::text))
         Filter: ((fraw IS NULL) OR (ftext ~~ '高%'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fraw
                     Index Cond: (fraw IS NULL)
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: ((ftext >= '高'::text) AND (ftext <= '高￿￿￿￿'::text))
(10 rows)

SELECT fraw FROM test_prefix_table t where fraw IS NULL or ftext like '高%' ORDER BY 1;
                  fraw                  
----------------------------------------
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
 
 
 
(5 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table t where fraw IS NULL or fvchar > 'ZZZZZ-200' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: fvchar COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table t
         Recheck Cond: ((fraw IS NULL) OR ((fvchar)::text > 'ZZZZZ-200'::text))
         Filter: ((fraw IS NULL) OR (((fvchar)::text > 'ZZZZZ-200'::text) AND ((fvchar)::text <> 'ZZZZZ-210'::text)))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fraw
                     Index Cond: (fraw IS NULL)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
(10 rows)

SELECT fvchar FROM test_prefix_table t where fraw IS NULL or fvchar > 'ZZZZZ-200' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
     fvchar     
----------------
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
 
 
 
(8 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table t where NOT fvchar <> 'ZZZZZ-211' ORDER BY 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Index Scan using prefix_index_fvchar on test_prefix_table t
   Index Cond: ((fvchar)::text = 'ZZZZZ'::text)
   Filter: ((fvchar)::text = 'ZZZZZ-211'::text)
(3 rows)

SELECT fvchar FROM test_prefix_table t where NOT fvchar <>'ZZZZZ-211' ORDER BY 1;
  fvchar   
-----------
 ZZZZZ-211
(1 row)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table t where (fvchar <> 'ZZZZZ-211') = false ORDER BY 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Index Scan using prefix_index_fvchar on test_prefix_table t
   Index Cond: ((fvchar)::text = 'ZZZZZ'::text)
   Filter: ((fvchar)::text = 'ZZZZZ-211'::text)
(3 rows)

SELECT fvchar FROM test_prefix_table t where (fvchar <> 'ZZZZZ-211') = false ORDER BY 1;
  fvchar   
-----------
 ZZZZZ-211
(1 row)

PREPARE testprefixindex(text) as SELECT fvchar FROM test_prefix_table t where fraw IS NULL or fvchar > $1 and fvchar <> 'ZZZZZ-210' ORDER BY 1;
EXPLAIN (costs false) execute testprefixindex('ZZZZZ-200');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: fvchar COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table t
         Recheck Cond: ((fraw IS NULL) OR ((fvchar)::text > $1))
         Filter: ((fraw IS NULL) OR (((fvchar)::text > $1) AND ((fvchar)::text <> 'ZZZZZ-210'::text)))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fraw
                     Index Cond: (fraw IS NULL)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text >= $1(5))
(10 rows)

EXECUTE testprefixindex('ZZZZZ-200');
     fvchar     
----------------
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
 
 
 
(8 rows)

--prefix index not used
EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table t where (fvchar <> 'ZZZZZ-211') IS false ORDER BY 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Sort Key: fvchar COLLATE utf8mb4_bin
   ->  Seq Scan on test_prefix_table t
         Filter: (((fvchar)::text <> 'ZZZZZ-211'::text) IS FALSE)
(4 rows)

SELECT fvchar FROM test_prefix_table t where (fvchar <> 'ZZZZZ-211') IS false ORDER BY 1;
  fvchar   
-----------
 ZZZZZ-211
(1 row)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table t where fvchar <> 'ZZZZZ-210';
                   QUERY PLAN                    
-------------------------------------------------
 Seq Scan on test_prefix_table t
   Filter: ((fvchar)::text <> 'ZZZZZ-210'::text)
(2 rows)

EXPLAIN (costs false)
SELECT left(ftext, 5) FROM test_prefix_table where left(ftext, 5) = 'YYYYY';
                  QUERY PLAN                  
----------------------------------------------
 Seq Scan on test_prefix_table
   Filter: ("left"(ftext, 5) = 'YYYYY'::text)
(2 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table ORDER BY ftext;
              QUERY PLAN               
---------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Seq Scan on test_prefix_table
(3 rows)

EXPLAIN (costs false)
select * from test_prefix_table tab1 where (fchar, fbytea)<('YYYYY-210', E'\\x59595959592D323130');
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Seq Scan on test_prefix_table tab1
   Filter: (ROW(fchar, fbytea) < ROW('YYYYY-210'::bpchar, '\x59595959592d323130'::bytea))
(2 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext not like 'YYYY%' ORDER BY 1;
                QUERY PLAN                 
-------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Seq Scan on test_prefix_table
         Filter: (ftext !~~ 'YYYY%'::text)
(4 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_table where fvchar = 'YYYYY-100'::name;
                   QUERY PLAN                   
------------------------------------------------
 Seq Scan on test_prefix_table
   Filter: ((fvchar)::name = 'YYYYY-100'::name)
(2 rows)

-- single table bitmapscan
EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYYY-2%' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext ~~ 'YYYYY-2%'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext = 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYYY-2%' ORDER BY 1;
   ftext   
-----------
 YYYYY-210
 YYYYY-211
(2 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYYY%' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext ~~ 'YYYYY%'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext = 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYY%' ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext ~~ 'YYYY%'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: ((ftext >= 'YYYY'::text) AND (ftext <= 'YYYY￿'::text))
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext like 'YYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYYY-100' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext > 'YYYYY-100'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext >= 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYYY-100' ORDER BY 1;
     ftext      
----------------
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(14 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYYY' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext > 'YYYYY'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext >= 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYYY' ORDER BY 1;
     ftext      
----------------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(15 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYY' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext > 'YYYY'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext >= 'YYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext > 'YYYY' ORDER BY 1;
     ftext      
----------------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(15 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYYY-100' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext < 'YYYYY-100'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext <= 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYYY-100' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
 YYYYY-000
(6 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYYY' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext < 'YYYYY'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext <= 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYYY' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
(5 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYY' ORDER BY 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (ftext < 'YYYY'::text)
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: (ftext <= 'YYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext < 'YYYY' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
(5 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext >= 'YYYYY-1' and ftext <= 'YYYYY-3' ORDER BY 1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: ((ftext >= 'YYYYY-1'::text) AND (ftext <= 'YYYYY-3'::text))
         ->  Bitmap Index Scan on prefix_index_ftext
               Index Cond: ((ftext >= 'YYYYY'::text) AND (ftext <= 'YYYYY'::text))
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext >= 'YYYYY-1' and ftext <= 'YYYYY-3' ORDER BY 1;
   ftext   
-----------
 YYYYY-111
 YYYYY-210
 YYYYY-211
(3 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' and fbytea = E'\\x59595959592D333030' ORDER BY 1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: ((fchar = 'YYYYY-300'::bpchar) AND (fbytea = '\x59595959592d333030'::bytea))
         ->  Bitmap Index Scan on prefix_index_fchar_fbytea
               Index Cond: ((fchar = 'YYYYY'::bpchar) AND (fbytea = '\x5959595959'::bytea))
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' and fbytea = E'\\x59595959592D333030' ORDER BY 1;
   ftext   
-----------
 YYYYY-300
(1 row)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'ZZZZZ-300' or fbytea = E'\\x59595959592D333030' ORDER BY 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Recheck Cond: ((fchar = 'ZZZZZ-300'::bpchar) OR (fbytea = '\x59595959592d333030'::bytea))
         Filter: ((fchar = 'ZZZZZ-300'::bpchar) OR (fbytea = '\x59595959592d333030'::bytea))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fchar_fbytea
                     Index Cond: (fchar = 'ZZZZZ'::bpchar)
               ->  Bitmap Index Scan on prefix_index_fchar_fbytea
                     Index Cond: (fbytea = '\x5959595959'::bytea)
(10 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'ZZZZZ-300' or fbytea = E'\\x59595959592D333030' ORDER BY 1;
   ftext   
-----------
 YYYYY-300
 ZZZZZ-300
(2 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' and ftext = 'YYYYY-300' ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Bitmap Heap Scan on test_prefix_table
   Filter: ((fchar = 'YYYYY-300'::bpchar) AND (ftext = 'YYYYY-300'::text))
   ->  Bitmap Index Scan on prefix_index_ftext
         Index Cond: (ftext = 'YYYYY'::text)
(4 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' and ftext = 'YYYYY-300' ORDER BY 1;
   ftext   
-----------
 YYYYY-300
(1 row)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' or ftext = 'ZZZZZ-300' ORDER BY 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Recheck Cond: ((fchar = 'YYYYY-300'::bpchar) OR (ftext = 'ZZZZZ-300'::text))
         Filter: ((fchar = 'YYYYY-300'::bpchar) OR (ftext = 'ZZZZZ-300'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fchar_fbytea
                     Index Cond: (fchar = 'YYYYY'::bpchar)
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: (ftext = 'ZZZZZ'::text)
(10 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where fchar = 'YYYYY-300' or ftext = 'ZZZZZ-300' ORDER BY 1;
   ftext   
-----------
 YYYYY-300
 ZZZZZ-300
(2 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where (fchar = 'YYYYY-300' or ftext = 'ZZZZZ-300') AND fvchar = 'YYYYY-300' ORDER BY 1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Filter: (((fvchar)::text = 'YYYYY-300'::text) AND ((fchar = 'YYYYY-300'::bpchar) OR (ftext = 'ZZZZZ-300'::text)))
         ->  Bitmap Index Scan on prefix_index_fvchar
               Index Cond: ((fvchar)::text = 'YYYYY'::text)
(6 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where (fchar = 'YYYYY-300' or ftext = 'ZZZZZ-300') AND fvchar = 'YYYYY-300' ORDER BY 1;
   ftext   
-----------
 YYYYY-300
(1 row)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext = 'ZZZZZ-300' or (fchar = 'YYYYY-300' AND fvchar = 'YYYYY-300') ORDER BY 1;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Recheck Cond: ((ftext = 'ZZZZZ-300'::text) OR ((fvchar)::text = 'YYYYY-300'::text))
         Filter: ((ftext = 'ZZZZZ-300'::text) OR ((fchar = 'YYYYY-300'::bpchar) AND ((fvchar)::text = 'YYYYY-300'::text)))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: (ftext = 'ZZZZZ'::text)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text = 'YYYYY'::text)
(10 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where ftext = 'ZZZZZ-300' or (fchar = 'YYYYY-300' AND fvchar = 'YYYYY-300') ORDER BY 1;
   ftext   
-----------
 YYYYY-300
 ZZZZZ-300
(2 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where
    fchar = 'AAAAA-300' OR
    fvchar = 'YYYYY-300' OR
    ftext = 'ZZZZZ-300' OR
    fclob = '高斯数据库-210' OR
    fblob = 'e5bc80e6ba90e695b0e68daee5ba932d323130'
ORDER BY 1;
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Recheck Cond: ((fchar = 'AAAAA-300'::bpchar) OR ((fvchar)::text = 'YYYYY-300'::text) OR (ftext = 'ZZZZZ-300'::text) OR ((fclob)::text = '高斯数据库-210'::text) OR ((fblob)::raw = 'E5BC80E6BA90E695B0E68DAEE5BA932D323130'::raw))
         Filter: ((fchar = 'AAAAA-300'::bpchar) OR ((fvchar)::text = 'YYYYY-300'::text) OR (ftext = 'ZZZZZ-300'::text) OR ((fclob)::text = '高斯数据库-210'::text) OR ((fblob)::raw = 'E5BC80E6BA90E695B0E68DAEE5BA932D323130'::raw))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fchar_fbytea
                     Index Cond: (fchar = 'AAAAA'::bpchar)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text = 'YYYYY'::text)
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: (ftext = 'ZZZZZ'::text)
               ->  Bitmap Index Scan on prefix_index_fclob
                     Index Cond: ((fclob)::text = '高斯数据库'::text)
               ->  Bitmap Index Scan on prefix_index_fblob
                     Index Cond: ((fblob)::raw = 'E5BC80E6BA'::raw)
(16 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where
    fchar = 'AAAAA-300' OR
    fvchar = 'YYYYY-300' OR
    ftext = 'ZZZZZ-300' OR
    fclob = '高斯数据库-210' OR
    fblob = 'e5bc80e6ba90e695b0e68daee5ba932d323130'
ORDER BY 1;
     ftext      
----------------
 AAAAA-300
 YYYYY-300
 ZZZZZ-300
 开源数据库-210
 高斯数据库-210
(5 rows)

EXPLAIN (costs false)
SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where
    fchar like 'AAAAA%' OR
    fvchar like 'YYYYY%' OR
    ftext like 'ZZZZZ%' OR
    fclob like '高斯数据库%'
ORDER BY 1;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext COLLATE utf8mb4_bin
   ->  Bitmap Heap Scan on test_prefix_table
         Recheck Cond: ((fchar ~~ 'AAAAA%'::text) OR ((fvchar)::text ~~ 'YYYYY%'::text) OR (ftext ~~ 'ZZZZZ%'::text) OR ((fclob)::text ~~ '高斯数据库%'::text))
         Filter: ((fchar ~~ 'AAAAA%'::text) OR ((fvchar)::text ~~ 'YYYYY%'::text) OR (ftext ~~ 'ZZZZZ%'::text) OR ((fclob)::text ~~ '高斯数据库%'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fchar_fbytea
                     Index Cond: (fchar = 'AAAAA'::bpchar)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text = 'YYYYY'::text)
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: (ftext = 'ZZZZZ'::text)
               ->  Bitmap Index Scan on prefix_index_fclob
                     Index Cond: ((fclob)::text = '高斯数据库'::text)
(14 rows)

SELECT /*+ set(enable_bitmapscan on)  set(enable_indexscan off) */ ftext FROM test_prefix_table where
    fchar like 'AAAAA%' OR
    fvchar like 'YYYYY%' OR
    ftext like 'ZZZZZ%' OR
    fclob like '高斯数据库%'
ORDER BY 1;
     ftext      
----------------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 高斯数据库-210
(16 rows)

set enable_bitmapscan=false;
set enable_material=false;
set enable_hashjoin=false;
set enable_mergejoin=false;
--join index scan
EXPLAIN (costs false)
SELECT t1.ftext,t2.fchar FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext = t2.fchar ORDER BY 1,2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext COLLATE utf8mb4_bin, t2.fchar COLLATE utf8mb4_bin
   ->  Nested Loop
         ->  Seq Scan on test_prefix_table t2
         ->  Index Scan using prefix_index_ftext on test_prefix_table t1
               Index Cond: (ftext = (t2.fchar)::text(5))
               Filter: ((t2.fchar)::text = ftext)
(7 rows)

SELECT t1.ftext,t2.fchar FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext = t2.fchar ORDER BY 1,2;
     ftext      |                              fchar                               
----------------+------------------------------------------------------------------
 AAAAA-000      | AAAAA-000                                                       
 AAAAA-111      | AAAAA-111                                                       
 AAAAA-210      | AAAAA-210                                                       
 AAAAA-300      | AAAAA-300                                                       
 Y              | Y                                                               
 YYYYY-000      | YYYYY-000                                                       
 YYYYY-111      | YYYYY-111                                                       
 YYYYY-210      | YYYYY-210                                                       
 YYYYY-211      | YYYYY-211                                                       
 YYYYY-300      | YYYYY-300                                                       
 Z              | Z                                                               
 ZZZZZ-000      | ZZZZZ-000                                                       
 ZZZZZ-111      | ZZZZZ-111                                                       
 ZZZZZ-123      | ZZZZZ-123                                                       
 ZZZZZ-210      | ZZZZZ-210                                                       
 ZZZZZ-211      | ZZZZZ-211                                                       
 ZZZZZ-300      | ZZZZZ-300                                                       
 开源数据库-210 | 开源数据库-210                                             
 高             | 高                                                             
 高斯数据库-210 | 高斯数据库-210                                             
(20 rows)

EXPLAIN (costs false)
SELECT count(1) FROM test_prefix_table t1 join test_prefix_table t2 on (t2.fvchar LIKE 'X%' AND t1.ftext > t2.fvchar);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   ->  Nested Loop
         ->  Index Scan using prefix_index_fvchar on test_prefix_table t2
               Index Cond: (((fvchar)::text >= 'X'::text) AND ((fvchar)::text <= 'X￿￿￿￿'::text))
               Filter: ((fvchar)::text ~~ 'X%'::text)
         ->  Index Scan using prefix_index_ftext on test_prefix_table t1
               Index Cond: (ftext >= (t2.fvchar)::text(5))
               Filter: (ftext > (t2.fvchar)::text)
(8 rows)

SELECT count(1) FROM test_prefix_table t1 join test_prefix_table t2 on (t2.fvchar LIKE 'X%' AND t1.ftext > t2.fvchar);
 count 
-------
    64
(1 row)

EXPLAIN (costs false)
SELECT t1.ftext FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext = t2.fvchar where t1.id=30 and t2.id > 10 ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext COLLATE utf8mb4_bin
   ->  Nested Loop
         ->  Seq Scan on test_prefix_table t1
               Filter: (id = 30)
         ->  Index Scan using prefix_index_fvchar on test_prefix_table t2
               Index Cond: ((fvchar)::text = t1.ftext(5))
               Filter: ((id > 10) AND (t1.ftext = (fvchar)::text))
(8 rows)

SELECT t1.ftext FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext = t2.fvchar where t1.id=30 and t2.id > 10 ORDER BY 1;
   ftext   
-----------
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
(7 rows)

EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_table t1, test_prefix_table t2 where t1.ftext = t2.fvchar and t1.id=30 ORDER BY 1,2;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext COLLATE utf8mb4_bin
   ->  Nested Loop
         ->  Seq Scan on test_prefix_table t1
               Filter: (id = 30)
         ->  Index Scan using prefix_index_fvchar on test_prefix_table t2
               Index Cond: ((fvchar)::text = t1.ftext(5))
               Filter: (t1.ftext = (fvchar)::text)
(8 rows)

SELECT t1.ftext,t2.fvchar FROM test_prefix_table t1, test_prefix_table t2 where t1.ftext = t2.fvchar and t1.id=30 ORDER BY 1,2;
   ftext   |  fvchar   
-----------+-----------
 Z         | Z
 ZZZZZ-000 | ZZZZZ-000
 ZZZZZ-111 | ZZZZZ-111
 ZZZZZ-123 | ZZZZZ-123
 ZZZZZ-210 | ZZZZZ-210
 ZZZZZ-211 | ZZZZZ-211
 ZZZZZ-300 | ZZZZZ-300
(7 rows)

EXPLAIN (costs false)
SELECT t1.fvchar,t2.fvchar FROM test_prefix_table t1 left join test_prefix_table t2 on (t1.fvchar = t2.fvchar and t2.fvchar > 'ZZZZZ-3' ) ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: t1.fvchar COLLATE utf8mb4_bin, t2.fvchar COLLATE utf8mb4_bin
   ->  Nested Loop Left Join
         ->  Seq Scan on test_prefix_table t1
         ->  Index Scan using prefix_index_fvchar on test_prefix_table t2
               Index Cond: (((t1.fvchar)::text(5) = (fvchar)::text) AND ((fvchar)::text >= 'ZZZZZ'::text))
               Filter: (((fvchar)::text > 'ZZZZZ-3'::text) AND ((t1.fvchar)::text = (fvchar)::text))
(7 rows)

SELECT t1.fvchar,t2.fvchar FROM test_prefix_table t1 left join test_prefix_table t2 on (t1.fvchar = t2.fvchar and t2.fvchar > 'ZZZZZ-3' ) ORDER BY 1,2;
     fvchar     |     fvchar     
----------------+----------------
 XXXXX-000      | 
 XXXXX-111      | 
 XXXXX-210      | 
 XXXXX-300      | 
 Y              | 
 YYYYY-000      | 
 YYYYY-111      | 
 YYYYY-210      | 
 YYYYY-211      | 
 YYYYY-300      | 
 Z              | 
 ZZZZZ-000      | 
 ZZZZZ-111      | 
 ZZZZZ-123      | 
 ZZZZZ-210      | 
 ZZZZZ-211      | 
 ZZZZZ-300      | ZZZZZ-300
 开源数据库-210 | 开源数据库-210
 高             | 高
 高斯数据库-210 | 高斯数据库-210
                | 
                | 
                | 
(23 rows)

--prefix index not used
EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext like t2.fvchar;
                   QUERY PLAN                   
------------------------------------------------
 Nested Loop
   Join Filter: (t1.ftext ~~ (t2.fvchar)::text)
   ->  Seq Scan on test_prefix_table t1
   ->  Seq Scan on test_prefix_table t2
(4 rows)

EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext not like t2.fvchar;
                   QUERY PLAN                    
-------------------------------------------------
 Nested Loop
   Join Filter: (t1.ftext !~~ (t2.fvchar)::text)
   ->  Seq Scan on test_prefix_table t1
   ->  Seq Scan on test_prefix_table t2
(4 rows)

EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_table t1 join test_prefix_table t2 on  t1.ftext <> t2.fvchar;
                   QUERY PLAN                   
------------------------------------------------
 Nested Loop
   Join Filter: (t1.ftext <> (t2.fvchar)::text)
   ->  Seq Scan on test_prefix_table t1
   ->  Seq Scan on test_prefix_table t2
(4 rows)

--alter table
ALTER TABLE test_prefix_table MODIFY ftext varchar(64);
ALTER TABLE test_prefix_table ALTER COLUMN ftext TYPE text;
EXPLAIN (costs false)
DELETE FROM test_prefix_table WHERE ftext IS NULL;
                           QUERY PLAN                           
----------------------------------------------------------------
 Delete on test_prefix_table
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext IS NULL)
(3 rows)

DELETE FROM test_prefix_table WHERE ftext IS NULL;
ALTER TABLE test_prefix_table ALTER COLUMN ftext SET NOT NULL;
ALTER TABLE test_prefix_table ALTER COLUMN ftext DROP NOT NULL;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext = '高斯数据库-210' ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Index Scan using prefix_index_ftext on test_prefix_table
   Index Cond: (ftext = '高斯数据库'::text)
   Filter: (ftext = '高斯数据库-210'::text)
(3 rows)

SELECT ftext FROM test_prefix_table where ftext = '高斯数据库-210' ORDER BY 1;
     ftext      
----------------
 高斯数据库-210
(1 row)

CREATE SCHEMA prefix_index_schema;
ALTER TABLE test_prefix_table SET SCHEMA prefix_index_schema;
set current_schema = prefix_index_schema;
set enable_seqscan=false;
set enable_opfusion=false;
set enable_partition_opfusion=false;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table where ftext >= '高斯数据库-210' ORDER BY 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_table
         Index Cond: (ftext >= '高斯数据库'::text)
         Filter: (ftext >= '高斯数据库-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table where ftext >= '高斯数据库-210' ORDER BY 1;
     ftext      
----------------
 高斯数据库-210
(1 row)

ALTER TABLE test_prefix_table RENAME TO test_prefix_tb;
ALTER TABLE test_prefix_tb RENAME COLUMN fchar TO fbpchar;
ALTER TABLE test_prefix_tb DROP ftext;
EXPLAIN (costs false)
SELECT fbpchar FROM test_prefix_tb where fbpchar > '开源' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: fbpchar COLLATE utf8mb4_bin
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_tb
         Index Cond: (fbpchar >= '开源'::bpchar)
         Filter: (fbpchar > '开源'::bpchar)
(5 rows)

SELECT fbpchar FROM test_prefix_tb where fbpchar > '开源' ORDER BY 1;
                             fbpchar                             
-----------------------------------------------------------------
 开源数据库-210                                             
 高                                                             
 高斯数据库-210                                             
(3 rows)

ALTER INDEX prefix_index_fchar_fbytea UNUSABLE;
EXPLAIN (costs false)
SELECT fbpchar FROM test_prefix_tb where fbpchar like '高斯数据库-%' ORDER BY 1;
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: fbpchar COLLATE utf8mb4_bin
   ->  Seq Scan on test_prefix_tb
         Filter: (fbpchar ~~ '高斯数据库-%'::text)
(4 rows)

RESET enable_seqscan;
RESET enable_opfusion;
RESET enable_partition_opfusion;
DROP TABLE IF EXISTS test_prefix_tb;
RESET current_schema;
DROP SCHEMA prefix_index_schema CASCADE;
RESET enable_bitmapscan;
RESET enable_material;
RESET enable_hashjoin;
RESET enable_mergejoin;
RESET enable_seqscan;
RESET enable_opfusion;
RESET enable_partition_opfusion;
--partition table
CREATE TABLE test_prefix_parttable (
    id INTEGER,
    fchar CHAR(64),
    fvchar VARCHAR(64),
    ftext TEXT,
    fclob CLOB,
    fblob BLOB,
    fraw RAW,
    fbytea BYTEA
) PARTITION BY RANGE (ftext) SUBPARTITION BY LIST (fvchar)
(
  PARTITION p_xxxxx VALUES LESS THAN( 'YYYYY' )
  (
    SUBPARTITION p_xxxxx_1 values ('XXXXX-111'),
    SUBPARTITION p_xxxxx_2 values ('XXXXX-211'),
    SUBPARTITION p_xxxxx_3 values ('XXXXX-300'),
    SUBPARTITION p_xxxxx_4 values ('高斯数据库-210')
  ),
  PARTITION p_yyyyy VALUES LESS THAN( 'ZZZZZ' )
  (
    SUBPARTITION p_yyyyy_1 values ('YYYYY-111'),
    SUBPARTITION p_yyyyy_2 values ('YYYYY-211'),
    SUBPARTITION p_yyyyy_3 values ('YYYYY-300'),
    SUBPARTITION p_yyyyy_4 values ('高斯数据库-210')
  ),
  PARTITION p_zzzzz VALUES LESS THAN( MAXVALUE )
  (
    SUBPARTITION p_zzzzz_1 values ('ZZZZZ-111'),
    SUBPARTITION p_zzzzz_2 values ('ZZZZZ-211'),
    SUBPARTITION p_zzzzz_3 values ('ZZZZZ-300'),
    SUBPARTITION p_zzzzz_4 values ('高斯数据库-210')
  )
);
INSERT INTO test_prefix_parttable VALUES(30, 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', '5A5A5A5A5A2D333030', HEXTORAW('5A5A5A5A5A2D333030'),E'\\x5A5A5A5A5A2D333030');
INSERT INTO test_prefix_parttable VALUES(30, 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', '5A5A5A5A5A2D323131', HEXTORAW('5A5A5A5A5A2D323131'),E'\\x5A5A5A5A5A2D323131');
INSERT INTO test_prefix_parttable VALUES(30, 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', '5A5A5A5A5A2D313131', HEXTORAW('5A5A5A5A5A2D313131'),E'\\x5A5A5A5A5A2D313131');
INSERT INTO test_prefix_parttable VALUES(20, 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', '59595959592D333030', HEXTORAW('59595959592D333030'),E'\\x59595959592D333030');
INSERT INTO test_prefix_parttable VALUES(20, 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', '59595959592D323131', HEXTORAW('59595959592D323131'),E'\\x59595959592D323131');
INSERT INTO test_prefix_parttable VALUES(20, 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', '59595959592D313131', HEXTORAW('59595959592D313131'),E'\\x59595959592D313131');
INSERT INTO test_prefix_parttable VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', 'e9ab98e696afe695b0e68daee5ba932d323130', HEXTORAW('e9ab98e696afe695b0e68daee5ba932d323130'),E'\\xe9ab98e696afe695b0e68daee5ba932d323130');
INSERT INTO test_prefix_parttable VALUES(10, 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', '58585858582D333030', HEXTORAW('58585858582D333030'),E'\\x58585858582D333030');
INSERT INTO test_prefix_parttable VALUES(10, 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', '58585858582D323131', HEXTORAW('58585858582D323131'),E'\\x58585858582D323131');
INSERT INTO test_prefix_parttable VALUES(10, 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', '58585858582D313131', HEXTORAW('58585858582D313131'),E'\\x58585858582D313131');
--global index not support
CREATE INDEX error_index_ftext_global ON test_prefix_parttable(ftext(5)) GLOBAL;
ERROR:  Global partition index does not support EXPRESSION index
--local index
CREATE INDEX prefix_index_ftext_part ON test_prefix_parttable(ftext(5)) LOCAL
(
PARTITION prefix_index_ftext_part1 (SUBPARTITION prefix_index_ftext_subpart11, SUBPARTITION prefix_index_ftext_subpart12,SUBPARTITION prefix_index_ftext_subpart13, SUBPARTITION prefix_index_ftext_subpart14),
PARTITION prefix_index_ftext_part2 (SUBPARTITION prefix_index_ftext_subpart21, SUBPARTITION prefix_index_ftext_subpart22,SUBPARTITION prefix_index_ftext_subpart23, SUBPARTITION prefix_index_ftext_subpart24),
PARTITION prefix_index_ftext_part3 (SUBPARTITION prefix_index_ftext_subpart31, SUBPARTITION prefix_index_ftext_subpart32,SUBPARTITION prefix_index_ftext_subpart33, SUBPARTITION prefix_index_ftext_subpart34)
);
set enable_seqscan=false;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_parttable where ftext like '高斯%' ORDER BY 1;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Partition Iterator
         Iterations: 3, Sub Iterations: 12
         ->  Partitioned Index Scan using prefix_index_ftext_part on test_prefix_parttable
               Index Cond: ((ftext >= '高斯'::text) AND (ftext < '高新'::text))
               Filter: (ftext ~~ '高斯%'::text)
               Selected Partitions:  1..3
               Selected Subpartitions:  ALL
(9 rows)

SELECT ftext FROM test_prefix_parttable where ftext like '高斯%' ORDER BY 1;
     ftext      
----------------
 高斯数据库-210
(1 row)

--unique
CREATE UNIQUE INDEX prefix_index_ftext_part_unique ON test_prefix_parttable(ftext, fvchar, fbytea(5)) LOCAL;
INSERT INTO test_prefix_parttable VALUES(10, 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', '58585858582D313131', HEXTORAW('58585858582D313131'),E'\\x58585858582D313131');
ERROR:  duplicate key value violates unique constraint "prefix_index_ftext_part_unique"
DETAIL:  Key (ftext, fvchar, fbytea(5))=(XXXXX-111, XXXXX-111, \x5858585858) already exists.
EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_parttable t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 3, Sub Iterations: 12
   ->  Partitioned Index Scan using prefix_index_ftext_part_unique on test_prefix_parttable t
         Index Cond: (fbytea = '\x5959595959'::bytea)
         Filter: (fbytea = '\x59595959592d323131'::bytea)
         Selected Partitions:  1..3
         Selected Subpartitions:  ALL
(7 rows)

SELECT fbytea FROM test_prefix_parttable t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d323131
(1 row)

RESET enable_seqscan;
DROP TABLE IF EXISTS test_prefix_parttable;
--ustore
CREATE TABLE test_prefix_ustore(
    id INTEGER,
    fchar CHAR(64),
    fvchar VARCHAR(64),
    ftext TEXT,
    fclob CLOB,
    fblob BLOB,
    fraw RAW,
    fbytea BYTEA
) WITH (STORAGE_TYPE=USTORE);
INSERT INTO test_prefix_ustore VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-123', 'ZZZZZ-123', 'ZZZZZ-123', 'ZZZZZ-123', '5A5A5A5A5A2D313233', HEXTORAW('5A5A5A5A5A2D313233'),E'\\x5A5A5A5A5A2D313233');
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', 'ZZZZZ-300', '5A5A5A5A5A2D333030', HEXTORAW('5A5A5A5A5A2D333030'),E'\\x5A5A5A5A5A2D333030');
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-000', 'ZZZZZ-000', 'ZZZZZ-000', 'ZZZZZ-000', '5A5A5A5A5A2D303030', HEXTORAW('5A5A5A5A5A2D303030'),E'\\x5A5A5A5A5A2D303030');
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', 'ZZZZZ-211', '5A5A5A5A5A2D323131', HEXTORAW('5A5A5A5A5A2D323131'),E'\\x5A5A5A5A5A2D323131');
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', 'ZZZZZ-111', '5A5A5A5A5A2D313131', HEXTORAW('5A5A5A5A5A2D313131'),E'\\x5A5A5A5A5A2D313131');
INSERT INTO test_prefix_ustore VALUES(30, 'ZZZZZ-210', 'ZZZZZ-210', 'ZZZZZ-210', 'ZZZZZ-210', '5A5A5A5A5A2D323130', HEXTORAW('5A5A5A5A5A2D323130'),E'\\x5A5A5A5A5A2D323130');
INSERT INTO test_prefix_ustore VALUES(30, 'Z', 'Z', 'Z', 'Z', '5A', HEXTORAW('5A'),E'\\x5A');
INSERT INTO test_prefix_ustore VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_ustore VALUES(20, 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', 'YYYYY-300', '59595959592D333030', HEXTORAW('59595959592D333030'),E'\\x59595959592D333030');
INSERT INTO test_prefix_ustore VALUES(20, 'YYYYY-000', 'YYYYY-000', 'YYYYY-000', 'YYYYY-000', '59595959592D303030', HEXTORAW('59595959592D303030'),E'\\x59595959592D303030');
INSERT INTO test_prefix_ustore VALUES(20, 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', 'YYYYY-211', '59595959592D323131', HEXTORAW('59595959592D323131'),E'\\x59595959592D323131');
INSERT INTO test_prefix_ustore VALUES(20, 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', 'YYYYY-111', '59595959592D313131', HEXTORAW('59595959592D313131'),E'\\x59595959592D313131');
INSERT INTO test_prefix_ustore VALUES(20, 'YYYYY-210', 'YYYYY-210', 'YYYYY-210', 'YYYYY-210', '59595959592D323130', HEXTORAW('59595959592D323130'),E'\\x59595959592D323130');
INSERT INTO test_prefix_ustore VALUES(20, 'Y', 'Y', 'Y', 'Y', '59', HEXTORAW('59'),E'\\x59');
INSERT INTO test_prefix_ustore VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', '高斯数据库-210', 'e9ab98e696afe695b0e68daee5ba932d323130', HEXTORAW('e9ab98e696afe695b0e68daee5ba932d323130'),E'\\xe9ab98e696afe695b0e68daee5ba932d323130');
INSERT INTO test_prefix_ustore VALUES(20, '开源数据库-210', '开源数据库-210', '开源数据库-210', '开源数据库-210', 'e5bc80e6ba90e695b0e68daee5ba932d323130', HEXTORAW('e5bc80e6ba90e695b0e68daee5ba932d323130'),E'\\xe5bc80e6ba90e695b0e68daee5ba932d323130');
INSERT INTO test_prefix_ustore VALUES(20, '高', '高', '高', '高', 'e9ab98', HEXTORAW('e9ab98'),E'\\xe9ab98');
--err
CREATE INDEX error_index_fchar ON test_prefix_ustore (fchar(0));
ERROR:  index key prefix length(0) must be positive and cannot exceed 2676
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_ustore (fchar(0));
                                                             ^
CREATE INDEX error_index_fchar ON test_prefix_ustore (fchar(-1));
ERROR:  index key prefix length(-1) must be positive and cannot exceed 2676
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_ustore (fchar(-1))...
                                                             ^
CREATE INDEX error_index_fchar ON test_prefix_ustore (fchar(1+1));
ERROR:  function fchar(integer) does not exist
LINE 1: ...TE INDEX error_index_fchar ON test_prefix_ustore (fchar(1+1)...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CREATE INDEX error_index_fvchar ON test_prefix_ustore (fvchar(80));
ERROR:  index key prefix length(80) too long for type character varying(64)
LINE 1: ...E INDEX error_index_fvchar ON test_prefix_ustore (fvchar(80)...
                                                             ^
CREATE INDEX error_index_ftext ON test_prefix_ustore (ftext(4096));
ERROR:  index key prefix length(4096) must be positive and cannot exceed 2676
LINE 1: ...TE INDEX error_index_ftext ON test_prefix_ustore (ftext(4096...
                                                             ^
CREATE INDEX error_index_id ON test_prefix_ustore (id(5));
ERROR:  index prefix key are not supported by column type integer
LINE 1: CREATE INDEX error_index_id ON test_prefix_ustore (id(5));
                                                           ^
CREATE INDEX error_index_fchar ON test_prefix_ustore using hash (fchar(5));
ERROR:  access method "hash" does not support prefix key
CREATE INDEX error_index_fchar ON test_prefix_ustore using gin (fchar(5));
ERROR:  access method "gin" does not support prefix key
CREATE INDEX error_index_fchar ON test_prefix_ustore using gist (fchar(5));
ERROR:  access method "gist" does not support prefix key
--success
CREATE INDEX prefix_index_fchar_fbytea ON test_prefix_ustore (fchar(5), fbytea(5));
CREATE INDEX prefix_index_fvchar ON test_prefix_ustore (fvchar(5));
CREATE INDEX prefix_index_ftext ON test_prefix_ustore (ftext(5));
CREATE INDEX prefix_index_fblob ON test_prefix_ustore (fblob(5));
CREATE UNIQUE INDEX prefix_index_fraw ON test_prefix_ustore (fraw(9));
\d+ test_prefix_ustore
                         Table "public.test_prefix_ustore"
 Column |         Type          | Modifiers | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+--------------+-------------
 id     | integer               |           | plain    |              | 
 fchar  | character(64)         |           | extended |              | 
 fvchar | character varying(64) |           | extended |              | 
 ftext  | text                  |           | extended |              | 
 fclob  | clob                  |           | extended |              | 
 fblob  | blob                  |           | extended |              | 
 fraw   | raw                   |           | extended |              | 
 fbytea | bytea                 |           | extended |              | 
Indexes:
    "prefix_index_fraw" UNIQUE, ubtree (fraw(9)) WITH (storage_type=ustore) TABLESPACE pg_default
    "prefix_index_fblob" ubtree (fblob(5)) WITH (storage_type=ustore) TABLESPACE pg_default
    "prefix_index_fchar_fbytea" ubtree (fchar(5), fbytea(5)) WITH (storage_type=ustore) TABLESPACE pg_default
    "prefix_index_ftext" ubtree (ftext(5)) WITH (storage_type=ustore) TABLESPACE pg_default
    "prefix_index_fvchar" ubtree (fvchar(5)) WITH (storage_type=ustore) TABLESPACE pg_default
Has OIDs: no
Options: orientation=row, storage_type=ustore, compression=no, toast.storage_type=ustore

select pg_get_tabledef('test_prefix_ustore'::regclass);
                                                                  pg_get_tabledef                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------
 SET search_path = public;                                                                                                                        +
 CREATE TABLE test_prefix_ustore (                                                                                                                +
     id integer,                                                                                                                                  +
     fchar character(64),                                                                                                                         +
     fvchar character varying(64),                                                                                                                +
     ftext text,                                                                                                                                  +
     fclob clob,                                                                                                                                  +
     fblob blob,                                                                                                                                  +
     fraw raw,                                                                                                                                    +
     fbytea bytea                                                                                                                                 +
 )                                                                                                                                                +
 WITH (orientation=row, storage_type=ustore, compression=no);                                                                                     +
 CREATE UNIQUE INDEX prefix_index_fraw ON test_prefix_ustore USING ubtree (fraw(9)) WITH (storage_type=ustore) TABLESPACE pg_default;             +
 CREATE INDEX prefix_index_fblob ON test_prefix_ustore USING ubtree (fblob(5)) WITH (storage_type=ustore) TABLESPACE pg_default;                  +
 CREATE INDEX prefix_index_ftext ON test_prefix_ustore USING ubtree (ftext(5)) WITH (storage_type=ustore) TABLESPACE pg_default;                  +
 CREATE INDEX prefix_index_fvchar ON test_prefix_ustore USING ubtree (fvchar(5)) WITH (storage_type=ustore) TABLESPACE pg_default;                +
 CREATE INDEX prefix_index_fchar_fbytea ON test_prefix_ustore USING ubtree (fchar(5), fbytea(5)) WITH (storage_type=ustore) TABLESPACE pg_default;
(1 row)

set enable_seqscan=false;
set enable_opfusion=false;
set enable_partition_opfusion=false;
SELECT ftext FROM test_prefix_ustore where ftext like 'XXXXX%' ORDER BY 1;
 ftext 
-------
(0 rows)

SELECT fblob FROM test_prefix_ustore where fblob < '58585858582D333030' ORDER BY 1;
 fblob 
-------
(0 rows)

SELECT fchar, fbytea FROM test_prefix_ustore where (fchar, fbytea)= ('XXXXX-211', 'XXXXX-211') ORDER BY 1,2;
 fchar | fbytea 
-------+--------
(0 rows)

--insert
INSERT INTO test_prefix_ustore VALUES(0, NULL, NULL, NULL, NULL , NULL, NULL, NULL);
INSERT INTO test_prefix_ustore VALUES(10, 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', 'XXXXX-300', '58585858582D333030', HEXTORAW('58585858582D333030'),E'\\x58585858582D333030');
INSERT INTO test_prefix_ustore VALUES(10, 'XXXXX-000', 'XXXXX-000', 'XXXXX-000', 'XXXXX-000', '58585858582D303030', HEXTORAW('58585858582D303030'),E'\\x58585858582D303030');
INSERT INTO test_prefix_ustore VALUES(10, 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', 'XXXXX-211', '58585858582D323131', HEXTORAW('58585858582D323131'),E'\\x58585858582D323131');
INSERT INTO test_prefix_ustore VALUES(10, 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', 'XXXXX-111', '58585858582D313131', HEXTORAW('58585858582D313131'),E'\\x58585858582D313131');
INSERT INTO test_prefix_ustore VALUES(10, 'XXXXX-210', 'XXXXX-210', 'XXXXX-210', 'XXXXX-210', '58585858582D323130', HEXTORAW('58585858582D323130'),E'\\x58585858582D323130');
SELECT ftext FROM test_prefix_ustore where ftext like 'XXXXX%' ORDER BY 1;
   ftext   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-211
 XXXXX-300
(5 rows)

SELECT fblob FROM test_prefix_ustore where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D323131
(4 rows)

SELECT fchar, fbytea FROM test_prefix_ustore where (fchar, fbytea)= ('XXXXX-211', 'XXXXX-211') ORDER BY 1,2;
                              fchar                               |        fbytea        
------------------------------------------------------------------+----------------------
 XXXXX-211                                                        | \x58585858582d323131
(1 row)

--update
UPDATE test_prefix_ustore SET fchar=replace(fchar, 'XXXXX', 'AAAAA'), ftext=replace(ftext, 'XXXXX', 'AAAAA') where fvchar like 'XXXXX%';
SELECT ftext FROM test_prefix_ustore where ftext like 'AAAAA%' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-211
 AAAAA-300
(5 rows)

SELECT fblob FROM test_prefix_ustore where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D323131
(4 rows)

SELECT fchar, fbytea FROM test_prefix_ustore where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211') ORDER BY 1,2;
                              fchar                               |        fbytea        
------------------------------------------------------------------+----------------------
 AAAAA-211                                                        | \x58585858582d323131
(1 row)

--delete
DELETE FROM test_prefix_ustore where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211');
SELECT ftext FROM test_prefix_ustore where ftext like 'AAAAA%' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
(4 rows)

SELECT fblob FROM test_prefix_ustore where fblob < '58585858582D333030' ORDER BY 1;
       fblob        
--------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
(3 rows)

SELECT fchar, fbytea FROM test_prefix_ustore where (fchar, fbytea)= ('AAAAA-211', 'XXXXX-211') ORDER BY 1,2;
 fchar | fbytea 
-------+--------
(0 rows)

--check query plan
analyze test_prefix_ustore;
--single table index scan
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where ftext like 'YYYY%' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore t
         Index Cond: ((ftext >= 'YYYY'::text) AND (ftext < 'YYYZ'::text))
         Filter: (ftext ~~ 'YYYY%'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where ftext like 'YYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where ftext like '开源数据库-210' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore t
         Index Cond: (ftext = '开源数据库'::text)
         Filter: (ftext ~~ '开源数据库-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where ftext like '开源数据库-210' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT fchar FROM test_prefix_ustore t where fchar ~~ '高斯数据库' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: fchar
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
         Index Cond: (fchar = '高斯数据库'::bpchar)
         Filter: (fchar ~~ '高斯数据库'::text)
(5 rows)

SELECT fchar FROM test_prefix_ustore t where fchar ~~ '高斯数据库' ORDER BY 1;
 fchar 
-------
(0 rows)

EXPLAIN (costs false)
SELECT fchar FROM test_prefix_ustore t where fchar ~ '^开' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: fchar
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
         Index Cond: ((fchar >= '开'::bpchar) AND (fchar < '弁'::bpchar))
         Filter: (fchar ~ '^开'::text)
(5 rows)

SELECT fchar FROM test_prefix_ustore t where fchar ~ '^开' ORDER BY 1;
                            fchar                            
-------------------------------------------------------------
 开源数据库-210                                             
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_ustore t where fbytea like '高%' ORDER BY 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
         Index Cond: ((fbytea >= '\xe9ab98'::bytea) AND (fbytea < '\xe9ab99'::bytea))
         Filter: (fbytea ~~ '\xe9ab9825'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_ustore t where fbytea like '高%' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe9ab98
 \xe9ab98e696afe695b0e68daee5ba932d323130
(2 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_ustore t where fbytea ~~ '开源数据库%' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
         Index Cond: (fbytea = '\xe5bc80e6ba'::bytea)
         Filter: (fbytea ~~ '\xe5bc80e6ba90e695b0e68daee5ba9325'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_ustore t where fbytea ~~ '开源数据库%' ORDER BY 1;
                  fbytea                  
------------------------------------------
 \xe5bc80e6ba90e695b0e68daee5ba932d323130
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_ustore t where fbytea ~~ 'YYYYY-%' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: fbytea
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
         Index Cond: (fbytea = '\x5959595959'::bytea)
         Filter: (fbytea ~~ '\x59595959592d25'::bytea)
(5 rows)

SELECT fbytea FROM test_prefix_ustore t where fbytea ~~ 'YYYYY-%' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d303030
 \x59595959592d313131
 \x59595959592d323130
 \x59595959592d323131
 \x59595959592d333030
(5 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where ftext <= 'YYYYY-100' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore t
         Index Cond: (ftext <= 'YYYYY'::text)
         Filter: (ftext <= 'YYYYY-100'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where ftext <= 'YYYYY-100' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
 YYYYY-000
(6 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where ftext <= 'YYYYY' ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore t
         Index Cond: (ftext <= 'YYYYY'::text)
         Filter: (ftext <= 'YYYYY'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where ftext <= 'YYYYY' ORDER BY 1;
   ftext   
-----------
 AAAAA-000
 AAAAA-111
 AAAAA-210
 AAAAA-300
 Y
(5 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_ustore t where fvchar < 'ZZZZZ-210' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: fvchar
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text <= 'ZZZZZ'::text)
         Filter: ((fvchar)::text < 'ZZZZZ-210'::text)
(5 rows)

SELECT fvchar FROM test_prefix_ustore t where fvchar < 'ZZZZZ-210' ORDER BY 1;
  fvchar   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
(14 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_ustore t where fvchar < 'Z' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: fvchar
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text <= 'Z'::text)
         Filter: ((fvchar)::text < 'Z'::text)
(5 rows)

SELECT fvchar FROM test_prefix_ustore t where fvchar < 'Z' ORDER BY 1;
  fvchar   
-----------
 XXXXX-000
 XXXXX-111
 XXXXX-210
 XXXXX-300
 Y
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(10 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where fvchar >= 'ZZZZZ-210' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: ((fvchar)::text >= 'ZZZZZ-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where fvchar >= 'ZZZZZ-210' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(6 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where fvchar >= 'ZZZZZ' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: ((fvchar)::text >= 'ZZZZZ'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore t where fvchar >= 'ZZZZZ' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(9 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where fvchar > 'ZZZZZ-' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: (((fvchar)::text > 'ZZZZZ-'::text) AND ((fvchar)::text <> 'ZZZZZ-210'::text))
(5 rows)

SELECT ftext FROM test_prefix_ustore t where fvchar > 'ZZZZZ-' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(8 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore t where fvchar > left('ZZZZZ-211', 7) and fvchar <> 'ZZZZZ-211' ORDER BY 1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t
         Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
         Filter: (((fvchar)::text > 'ZZZZZ-2'::text) AND ((fvchar)::text <> 'ZZZZZ-211'::text))
(5 rows)

SELECT ftext FROM test_prefix_ustore t where fvchar > left('ZZZZZ-211', 7) and fvchar <> 'ZZZZZ-211' ORDER BY 1;
     ftext      
----------------
 ZZZZZ-210
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
(5 rows)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_ustore t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
   Index Cond: (fbytea = '\x5959595959'::bytea)
   Filter: (fbytea = '\x59595959592d323131'::bytea)
(3 rows)

SELECT fbytea FROM test_prefix_ustore t where fbytea = E'\\x59595959592D323131' ORDER BY 1;
        fbytea        
----------------------
 \x59595959592d323131
(1 row)

EXPLAIN (costs false)
SELECT fbytea FROM test_prefix_ustore t where fbytea = E'\\x59' ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Index Scan using prefix_index_fchar_fbytea on test_prefix_ustore t
   Index Cond: (fbytea = '\x59'::bytea)
   Filter: (fbytea = '\x59'::bytea)
(3 rows)

SELECT fbytea FROM test_prefix_ustore t where fbytea = E'\\x59' ORDER BY 1;
 fbytea 
--------
 \x59
(1 row)

EXPLAIN (costs false)
SELECT fblob FROM test_prefix_ustore t where fblob IS NOT NULL ORDER BY 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Sort Key: fblob
   ->  Index Scan using prefix_index_fblob on test_prefix_ustore t
         Index Cond: (fblob IS NOT NULL)
(4 rows)

SELECT fblob FROM test_prefix_ustore t where fblob IS NOT NULL ORDER BY 1;
                 fblob                  
----------------------------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D333030
 59
 59595959592D303030
 59595959592D313131
 59595959592D323130
 59595959592D323131
 59595959592D333030
 5A
 5A5A5A5A5A2D303030
 5A5A5A5A5A2D313131
 5A5A5A5A5A2D313233
 5A5A5A5A5A2D323130
 5A5A5A5A5A2D323131
 5A5A5A5A5A2D333030
 E5BC80E6BA90E695B0E68DAEE5BA932D323130
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
(20 rows)

EXPLAIN (costs false)
SELECT DISTINCT fraw FROM test_prefix_ustore t where fraw IS NOT NULL ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Unique
   ->  Sort
         Sort Key: fraw
         ->  Index Scan using prefix_index_fraw on test_prefix_ustore t
               Index Cond: (fraw IS NOT NULL)
(5 rows)

SELECT DISTINCT fraw FROM test_prefix_ustore t where fraw IS NOT NULL ORDER BY 1;
                  fraw                  
----------------------------------------
 58585858582D303030
 58585858582D313131
 58585858582D323130
 58585858582D333030
 59
 59595959592D303030
 59595959592D313131
 59595959592D323130
 59595959592D323131
 59595959592D333030
 5A
 5A5A5A5A5A2D303030
 5A5A5A5A5A2D313131
 5A5A5A5A5A2D313233
 5A5A5A5A5A2D323130
 5A5A5A5A5A2D323131
 5A5A5A5A5A2D333030
 E5BC80E6BA90E695B0E68DAEE5BA932D323130
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
(20 rows)

EXPLAIN (costs false)
SELECT fraw FROM test_prefix_ustore t where fraw IS NULL or ftext like '高%' ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Sort Key: fraw
   ->  Bitmap Heap Scan on test_prefix_ustore t
         Recheck Cond: ((fraw IS NULL) OR (ftext ~~ '高%'::text))
         Filter: ((fraw IS NULL) OR (ftext ~~ '高%'::text))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fraw
                     Index Cond: (fraw IS NULL)
               ->  Bitmap Index Scan on prefix_index_ftext
                     Index Cond: ((ftext >= '高'::text) AND (ftext < '髙'::text))
(10 rows)

SELECT fraw FROM test_prefix_ustore t where fraw IS NULL or ftext like '高%' ORDER BY 1;
                  fraw                  
----------------------------------------
 E9AB98
 E9AB98E696AFE695B0E68DAEE5BA932D323130
 
 
 
(5 rows)

EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_ustore t where fraw IS NULL or fvchar > 'ZZZZZ-200' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: fvchar
   ->  Bitmap Heap Scan on test_prefix_ustore t
         Recheck Cond: ((fraw IS NULL) OR ((fvchar)::text > 'ZZZZZ-200'::text))
         Filter: ((fraw IS NULL) OR (((fvchar)::text > 'ZZZZZ-200'::text) AND ((fvchar)::text <> 'ZZZZZ-210'::text)))
         ->  BitmapOr
               ->  Bitmap Index Scan on prefix_index_fraw
                     Index Cond: (fraw IS NULL)
               ->  Bitmap Index Scan on prefix_index_fvchar
                     Index Cond: ((fvchar)::text >= 'ZZZZZ'::text)
(10 rows)

SELECT fvchar FROM test_prefix_ustore t where fraw IS NULL or fvchar > 'ZZZZZ-200' and fvchar <> 'ZZZZZ-210' ORDER BY 1;
     fvchar     
----------------
 ZZZZZ-211
 ZZZZZ-300
 开源数据库-210
 高
 高斯数据库-210
 
 
 
(8 rows)

--prefix index not used
EXPLAIN (costs false)
SELECT fvchar FROM test_prefix_ustore t where fvchar <> 'ZZZZZ-210';
                   QUERY PLAN                    
-------------------------------------------------
 Seq Scan on test_prefix_ustore t
   Filter: ((fvchar)::text <> 'ZZZZZ-210'::text)
(2 rows)

EXPLAIN (costs false)
SELECT left(ftext, 5) FROM test_prefix_ustore where left(ftext, 5) = 'YYYYY';
                  QUERY PLAN                  
----------------------------------------------
 Seq Scan on test_prefix_ustore
   Filter: ("left"(ftext, 5) = 'YYYYY'::text)
(2 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore ORDER BY ftext;
              QUERY PLAN              
--------------------------------------
 Sort
   Sort Key: ftext
   ->  Seq Scan on test_prefix_ustore
(3 rows)

EXPLAIN (costs false)
select * from test_prefix_ustore tab1 where (fchar, fbytea)<('YYYYY-210', E'\\x59595959592D323130');
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Seq Scan on test_prefix_ustore tab1
   Filter: (ROW(fchar, fbytea) < ROW('YYYYY-210'::bpchar, '\x59595959592d323130'::bytea))
(2 rows)

set enable_bitmapscan=false;
set enable_material=false;
set enable_hashjoin=false;
set enable_mergejoin=false;
--join index scan
EXPLAIN (costs false)
SELECT t1.ftext,t2.fchar FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext = t2.fchar ORDER BY 1,2;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext, t2.fchar
   ->  Nested Loop
         ->  Seq Scan on test_prefix_ustore t2
         ->  Index Scan using prefix_index_ftext on test_prefix_ustore t1
               Index Cond: (ftext = (t2.fchar)::text(5))
               Filter: ((t2.fchar)::text = ftext)
(7 rows)

SELECT t1.ftext,t2.fchar FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext = t2.fchar ORDER BY 1,2;
     ftext      |                              fchar                               
----------------+------------------------------------------------------------------
 AAAAA-000      | AAAAA-000                                                       
 AAAAA-111      | AAAAA-111                                                       
 AAAAA-210      | AAAAA-210                                                       
 AAAAA-300      | AAAAA-300                                                       
 Y              | Y                                                               
 YYYYY-000      | YYYYY-000                                                       
 YYYYY-111      | YYYYY-111                                                       
 YYYYY-210      | YYYYY-210                                                       
 YYYYY-211      | YYYYY-211                                                       
 YYYYY-300      | YYYYY-300                                                       
 Z              | Z                                                               
 ZZZZZ-000      | ZZZZZ-000                                                       
 ZZZZZ-111      | ZZZZZ-111                                                       
 ZZZZZ-123      | ZZZZZ-123                                                       
 ZZZZZ-210      | ZZZZZ-210                                                       
 ZZZZZ-211      | ZZZZZ-211                                                       
 ZZZZZ-300      | ZZZZZ-300                                                       
 开源数据库-210 | 开源数据库-210                                             
 高             | 高                                                             
 高斯数据库-210 | 高斯数据库-210                                             
(20 rows)

EXPLAIN (costs false)
SELECT count(1) FROM test_prefix_ustore t1 join test_prefix_ustore t2 on (t2.fvchar LIKE 'X%' AND t1.ftext > t2.fvchar);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   ->  Nested Loop
         ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t2
               Index Cond: (((fvchar)::text >= 'X'::text) AND ((fvchar)::text < 'Y'::text))
               Filter: ((fvchar)::text ~~ 'X%'::text)
         ->  Index Scan using prefix_index_ftext on test_prefix_ustore t1
               Index Cond: (ftext >= (t2.fvchar)::text(5))
               Filter: (ftext > (t2.fvchar)::text)
(8 rows)

SELECT count(1) FROM test_prefix_ustore t1 join test_prefix_ustore t2 on (t2.fvchar LIKE 'X%' AND t1.ftext > t2.fvchar);
 count 
-------
    64
(1 row)

EXPLAIN (costs false)
SELECT t1.ftext FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext = t2.fvchar where t1.id=30 and t2.id > 10 ORDER BY 1;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext
   ->  Nested Loop
         ->  Seq Scan on test_prefix_ustore t1
               Filter: (id = 30)
         ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t2
               Index Cond: ((fvchar)::text = t1.ftext(5))
               Filter: ((id > 10) AND (t1.ftext = (fvchar)::text))
(8 rows)

SELECT t1.ftext FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext = t2.fvchar where t1.id=30 and t2.id > 10 ORDER BY 1;
   ftext   
-----------
 Z
 ZZZZZ-000
 ZZZZZ-111
 ZZZZZ-123
 ZZZZZ-210
 ZZZZZ-211
 ZZZZZ-300
(7 rows)

EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_ustore t1, test_prefix_ustore t2 where t1.ftext = t2.fvchar and t1.id=30 ORDER BY 1,2;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: t1.ftext
   ->  Nested Loop
         ->  Seq Scan on test_prefix_ustore t1
               Filter: (id = 30)
         ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t2
               Index Cond: ((fvchar)::text = t1.ftext(5))
               Filter: (t1.ftext = (fvchar)::text)
(8 rows)

SELECT t1.ftext,t2.fvchar FROM test_prefix_ustore t1, test_prefix_ustore t2 where t1.ftext = t2.fvchar and t1.id=30 ORDER BY 1,2;
   ftext   |  fvchar   
-----------+-----------
 Z         | Z
 ZZZZZ-000 | ZZZZZ-000
 ZZZZZ-111 | ZZZZZ-111
 ZZZZZ-123 | ZZZZZ-123
 ZZZZZ-210 | ZZZZZ-210
 ZZZZZ-211 | ZZZZZ-211
 ZZZZZ-300 | ZZZZZ-300
(7 rows)

EXPLAIN (costs false)
SELECT t1.fvchar,t2.fvchar FROM test_prefix_ustore t1 left join test_prefix_ustore t2 on (t1.fvchar = t2.fvchar and t2.fvchar > 'ZZZZZ-3' ) ORDER BY 1,2;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: t1.fvchar, t2.fvchar
   ->  Nested Loop Left Join
         ->  Seq Scan on test_prefix_ustore t1
         ->  Index Scan using prefix_index_fvchar on test_prefix_ustore t2
               Index Cond: (((t1.fvchar)::text(5) = (fvchar)::text) AND ((fvchar)::text >= 'ZZZZZ'::text))
               Filter: (((fvchar)::text > 'ZZZZZ-3'::text) AND ((t1.fvchar)::text = (fvchar)::text))
(7 rows)

SELECT t1.fvchar,t2.fvchar FROM test_prefix_ustore t1 left join test_prefix_ustore t2 on (t1.fvchar = t2.fvchar and t2.fvchar > 'ZZZZZ-3' ) ORDER BY 1,2;
     fvchar     |     fvchar     
----------------+----------------
 XXXXX-000      | 
 XXXXX-111      | 
 XXXXX-210      | 
 XXXXX-300      | 
 Y              | 
 YYYYY-000      | 
 YYYYY-111      | 
 YYYYY-210      | 
 YYYYY-211      | 
 YYYYY-300      | 
 Z              | 
 ZZZZZ-000      | 
 ZZZZZ-111      | 
 ZZZZZ-123      | 
 ZZZZZ-210      | 
 ZZZZZ-211      | 
 ZZZZZ-300      | ZZZZZ-300
 开源数据库-210 | 开源数据库-210
 高             | 高
 高斯数据库-210 | 高斯数据库-210
                | 
                | 
                | 
(23 rows)

--prefix index not used
EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext like t2.fvchar;
                   QUERY PLAN                   
------------------------------------------------
 Nested Loop
   Join Filter: (t1.ftext ~~ (t2.fvchar)::text)
   ->  Seq Scan on test_prefix_ustore t1
   ->  Seq Scan on test_prefix_ustore t2
(4 rows)

EXPLAIN (costs false)
SELECT t1.ftext,t2.fvchar FROM test_prefix_ustore t1 join test_prefix_ustore t2 on  t1.ftext <> t2.fvchar;
                   QUERY PLAN                   
------------------------------------------------
 Nested Loop
   Join Filter: (t1.ftext <> (t2.fvchar)::text)
   ->  Seq Scan on test_prefix_ustore t1
   ->  Seq Scan on test_prefix_ustore t2
(4 rows)

--alter table
ALTER TABLE test_prefix_ustore MODIFY ftext varchar(64);
ALTER TABLE test_prefix_ustore ALTER COLUMN ftext TYPE text;
EXPLAIN (costs false)
DELETE FROM test_prefix_ustore WHERE ftext IS NULL;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Delete on test_prefix_ustore
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore
         Index Cond: (ftext IS NULL)
(3 rows)

DELETE FROM test_prefix_ustore WHERE ftext IS NULL;
ALTER TABLE test_prefix_ustore ALTER COLUMN ftext SET NOT NULL;
ALTER TABLE test_prefix_ustore ALTER COLUMN ftext DROP NOT NULL;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore where ftext = '高斯数据库-210' ORDER BY 1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Index Scan using prefix_index_ftext on test_prefix_ustore
   Index Cond: (ftext = '高斯数据库'::text)
   Filter: (ftext = '高斯数据库-210'::text)
(3 rows)

SELECT ftext FROM test_prefix_ustore where ftext = '高斯数据库-210' ORDER BY 1;
     ftext      
----------------
 高斯数据库-210
(1 row)

CREATE SCHEMA prefix_index_schema;
ALTER TABLE test_prefix_ustore SET SCHEMA prefix_index_schema;
set current_schema = prefix_index_schema;
set enable_seqscan=false;
set enable_opfusion=false;
set enable_partition_opfusion=false;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_ustore where ftext >= '高斯数据库-210' ORDER BY 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_index_ftext on test_prefix_ustore
         Index Cond: (ftext >= '高斯数据库'::text)
         Filter: (ftext >= '高斯数据库-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_ustore where ftext >= '高斯数据库-210' ORDER BY 1;
     ftext      
----------------
 高斯数据库-210
(1 row)

ALTER TABLE test_prefix_ustore RENAME TO test_prefix_utb;
ALTER TABLE test_prefix_utb RENAME COLUMN fchar TO fbpchar;
ALTER TABLE test_prefix_utb DROP ftext;
EXPLAIN (costs false)
SELECT fbpchar FROM test_prefix_utb where fbpchar > '开源' ORDER BY 1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Sort
   Sort Key: fbpchar
   ->  Index Scan using prefix_index_fchar_fbytea on test_prefix_utb
         Index Cond: (fbpchar >= '开源'::bpchar)
         Filter: (fbpchar > '开源'::bpchar)
(5 rows)

SELECT fbpchar FROM test_prefix_utb where fbpchar > '开源' ORDER BY 1;
                             fbpchar                             
-----------------------------------------------------------------
 开源数据库-210                                             
 高                                                             
 高斯数据库-210                                             
(3 rows)

ALTER INDEX prefix_index_fchar_fbytea UNUSABLE;
EXPLAIN (costs false)
SELECT fbpchar FROM test_prefix_utb where fbpchar like '高斯数据库-%' ORDER BY 1;
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: fbpchar
   ->  Seq Scan on test_prefix_utb
         Filter: (fbpchar ~~ '高斯数据库-%'::text)
(4 rows)

RESET enable_seqscan;
RESET enable_opfusion;
RESET enable_partition_opfusion;
DROP TABLE IF EXISTS test_prefix_utb;
RESET current_schema;
DROP SCHEMA prefix_index_schema CASCADE;
RESET enable_bitmapscan;
RESET enable_material;
RESET enable_hashjoin;
RESET enable_mergejoin;
RESET enable_seqscan;
RESET enable_opfusion;
RESET enable_partition_opfusion;
--cstore not support
DROP TABLE IF EXISTS test_prefix_cstore;
NOTICE:  table "test_prefix_cstore" does not exist, skipping
CREATE TABLE test_prefix_cstore(
    id INTEGER,
    fchar CHAR(64),
    fvchar VARCHAR(64),
    ftext TEXT,
    fclob CLOB,
    fbytea BYTEA
) WITH (ORIENTATION=column, COMPRESSION=high, COMPRESSLEVEL=2);
CREATE INDEX prefix_cindex_fchar_fbytea ON test_prefix_cstore using btree (fchar(5), fbytea(5));
ERROR:  access method "cbtree" does not support prefix key
CREATE INDEX prefix_cindex_ftext ON test_prefix_cstore (ftext(5));
ERROR:  access method "psort" does not support prefix key
DROP TABLE IF EXISTS test_prefix_cstore;
-- fk not supported
CREATE TABLE test_foreign(
    a text,
    FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext) ON DELETE SET NULL
);
ERROR:  syntax error at or near "("
LINE 3:     FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext) O...
                          ^
CREATE TABLE test_foreign(
    a text,
    FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext(9)) ON DELETE SET NULL
);
ERROR:  syntax error at or near "("
LINE 3:     FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext(9)...
                          ^
CREATE TABLE test_foreign(
    a varchar(64),
    FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext) ON DELETE SET NULL
);
ERROR:  syntax error at or near "("
LINE 3:     FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext) O...
                          ^
CREATE TABLE test_foreign(
    a varchar(64),
    FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext(9)) ON DELETE SET NULL
);
ERROR:  syntax error at or near "("
LINE 3:     FOREIGN KEY (a(9)) REFERENCES test_prefix_table(ftext(9)...
                          ^
CREATE TABLE test_foreign(
    a varchar(64),
    FOREIGN KEY (a) REFERENCES test_prefix_table(ftext) ON DELETE SET NULL
);
ERROR:  relation "test_prefix_table" does not exist
-- alter table add CONSTRAINT
CREATE TABLE test_prefix_table(
    id INTEGER,
    fchar CHAR(64),
    "Fvchar" VARCHAR(64),
    ftext TEXT
);
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-300', 'YYYYY-300', 'YYYYY-300');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-000', 'YYYYY-000', 'YYYYY-000');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-211', 'YYYYY-211', 'YYYYY-211');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-111', 'YYYYY-111', 'YYYYY-111');
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-210', 'YYYYY-210', 'YYYYY-210');
INSERT INTO test_prefix_table VALUES(20, 'Y', 'Y', 'Y');
INSERT INTO test_prefix_table VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210');
INSERT INTO test_prefix_table VALUES(20, '开源数据库-210', '开源数据库-210', '开源数据库-210');
INSERT INTO test_prefix_table VALUES(20, '高-210', '高-210', '高-210');
-- -- ADD CONSTRAINT
ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_pk1 PRIMARY KEY(ftext(5)); -- not supported
ERROR:  primary keys cannot be expressions
ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_uk1 UNIQUE(ftext(5)); -- duplicate key
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "prefix_uk1" for table "test_prefix_table"
ERROR:  could not create unique index "prefix_uk1"
DETAIL:  Key (ftext(5))=(YYYYY) is duplicated.
ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_uk1 UNIQUE(ftext(9));
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "prefix_uk1" for table "test_prefix_table"
ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_uk2 UNIQUE("Fvchar"(9));
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "prefix_uk2" for table "test_prefix_table"
SELECT pg_get_constraintdef(oid) FROM pg_constraint WHERE conname='prefix_uk2';
 pg_get_constraintdef 
----------------------
 UNIQUE ("Fvchar"(9))
(1 row)

SELECT pg_get_indexdef('prefix_uk2'::regclass);
                                           pg_get_indexdef                                           
-----------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX prefix_uk2 ON test_prefix_table USING btree ("Fvchar"(9)) TABLESPACE pg_default
(1 row)

SELECT pg_get_tabledef('test_prefix_table'::regclass);
                                      pg_get_tabledef                                      
-------------------------------------------------------------------------------------------
 SET search_path = public;                                                                +
 CREATE TABLE test_prefix_table (                                                         +
     id integer,                                                                          +
     fchar character(64),                                                                 +
     "Fvchar" character varying(64),                                                      +
     ftext text                                                                           +
 )                                                                                        +
 WITH (orientation=row, compression=no);                                                  +
 ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_uk2 UNIQUE USING btree ("Fvchar"(9));+
 ALTER TABLE test_prefix_table ADD CONSTRAINT prefix_uk1 UNIQUE USING btree (ftext(9));
(1 row)

\d test_prefix_table
      Table "public.test_prefix_table"
 Column |         Type          | Modifiers 
--------+-----------------------+-----------
 id     | integer               | 
 fchar  | character(64)         | 
 Fvchar | character varying(64) | 
 ftext  | text                  | 
Indexes:
    "prefix_uk1" UNIQUE CONSTRAINT, btree (ftext(9)) TABLESPACE pg_default
    "prefix_uk2" UNIQUE CONSTRAINT, btree ("Fvchar"(9)) TABLESPACE pg_default

-- -- -- constraint TEST
INSERT INTO test_prefix_table VALUES(20, 'YYYYY-300', 'YYYYY-300', 'YYYYY-300'); -- duplicate key
ERROR:  duplicate key value violates unique constraint "prefix_uk1"
DETAIL:  Key (ftext(9))=(YYYYY-300) already exists.
INSERT INTO test_prefix_table VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210'); -- duplicate key
ERROR:  duplicate key value violates unique constraint "prefix_uk1"
DETAIL:  Key (ftext(9))=(高斯数据库-210) already exists.
INSERT INTO test_prefix_table VALUES(20, '开源数据库-2101', '开源数据库-2101', '开源数据库-2101'); -- duplicate key
ERROR:  duplicate key value violates unique constraint "prefix_uk1"
DETAIL:  Key (ftext(9))=(开源数据库-210) already exists.
-- -- -- QUERY PLAN
set enable_seqscan=false;
EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where ftext like 'YYYY%' ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_uk1 on test_prefix_table t
         Index Cond: ((ftext >= 'YYYY'::text) AND (ftext < 'YYYZ'::text))
         Filter: (ftext ~~ 'YYYY%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where ftext like 'YYYY%' ORDER BY 1;
   ftext   
-----------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
(5 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where ftext like '开源数据库-210%' ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_uk1 on test_prefix_table t
         Index Cond: (ftext = '开源数据库-210'::text)
         Filter: (ftext ~~ '开源数据库-210%'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where ftext like '开源数据库-210%' ORDER BY 1;
     ftext      
----------------
 开源数据库-210
(1 row)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where ftext < 'YYYYY-210' ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_uk1 on test_prefix_table t
         Index Cond: (ftext <= 'YYYYY-210'::text)
         Filter: (ftext < 'YYYYY-210'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where ftext < 'YYYYY-210' ORDER BY 1;
   ftext   
-----------
 Y
 YYYYY-000
 YYYYY-111
(3 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where ftext >= 'YYYYY' ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_uk1 on test_prefix_table t
         Index Cond: (ftext >= 'YYYYY'::text)
         Filter: (ftext >= 'YYYYY'::text)
(5 rows)

SELECT ftext FROM test_prefix_table t where ftext >= 'YYYYY' ORDER BY 1;
     ftext      
----------------
 YYYYY-000
 YYYYY-111
 YYYYY-210
 YYYYY-211
 YYYYY-300
 开源数据库-210
 高-210
 高斯数据库-210
(8 rows)

EXPLAIN (costs false)
SELECT ftext FROM test_prefix_table t where ftext IS NULL ORDER BY 1;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Sort Key: ftext
   ->  Index Scan using prefix_uk1 on test_prefix_table t
         Index Cond: (ftext IS NULL)
(4 rows)

SELECT ftext FROM test_prefix_table t where ftext IS NULL ORDER BY 1;
 ftext 
-------
(0 rows)

DROP TABLE test_prefix_table;
-- create table CONSTRAINTS
CREATE TABLE test_prefix_table(
    id INTEGER,
    fchar CHAR(64),
    "Fvchar" VARCHAR(64),
    ftext TEXT,
    CONSTRAINT prefix_pk1 PRIMARY KEY(ftext(5))
); -- error
ERROR:  primary keys cannot be expressions
CREATE TABLE test_prefix_table(
    id INTEGER,
    fchar CHAR(64),
    "Fvchar" VARCHAR(64),
    ftext TEXT,
    CONSTRAINT prefix_pk1 UNIQUE(ftext(5))
);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "prefix_pk1" for table "test_prefix_table"
INSERT INTO test_prefix_table VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210');
INSERT INTO test_prefix_table VALUES(20, '高斯数据库-210', '高斯数据库-210', '高斯数据库-210'); -- duplicate key
ERROR:  duplicate key value violates unique constraint "prefix_pk1"
DETAIL:  Key (ftext(5))=(高斯数据库) already exists.
DROP TABLE test_prefix_table;
create table my_table_1262526(id int, obj nvarchar2(20));
create index idx_1264285_2 on my_table_1262526(obj(4));
INSERT INTO my_table_1262526 (id, obj) VALUES (1, 'AAAA');
INSERT INTO my_table_1262526 (id, obj) VALUES (2, 'AAAAAAA');
explain (costs off) select * from my_table_1262526 where obj = 'AAAA';
                    QUERY PLAN                    
--------------------------------------------------
 Bitmap Heap Scan on my_table_1262526
   Filter: ((obj)::text = 'AAAA'::text)
   ->  Bitmap Index Scan on idx_1264285_2
         Index Cond: ((obj)::text = 'AAAA'::text)
(4 rows)

select * from my_table_1262526 where obj = 'AAAA';
 id | obj  
----+------
  1 | AAAA
(1 row)

drop table my_table_1262526;
-- fix error: index key does not match expected index column
DROP TABLE IF EXISTS hbom_t;
NOTICE:  table "hbom_t" does not exist, skipping
CREATE TABLE hbom_t (
inventory_item_status_code character varying(10)NOT NULL, 
last_update_date timestamp(0) without time zone NOT NULL,
last_updated_by bigint NOT NULL
); 
CREATE INDEX hbom_t_n1 ON hbom_t (inventory_item_status_code);
 
 
DROP TABLE IF EXISTS bmsql_prefixkey;
NOTICE:  table "bmsql_prefixkey" does not exist, skipping
CREATE TABLE bmsql_prefixkey (
c_w_id integer NOT NULL,
c_phone character(2) ,
c_last character varying(16) , 
c_first character varying(16)
);
CREATE INDEX bmsql_prefixkey_idx4 ON bmsql_prefixkey (c_last(10), c_first(10));
 
EXPLAIN (costs off)
SELECT * FROM hbom_t AS T1 INNER JOIN bmsql_prefixkey AS T2 
    ON T2.c_phone like T1.inventory_item_status_code 
WHERE T2.c_phone in ('N','L','8','X','u','e','S','2','t','p','C')
    AND T2.c_last = upper(reverse(1.65446039349123 || '1979-02-20'));
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Join Filter: (t2.c_phone ~~ (t1.inventory_item_status_code)::text)
   ->  Index Scan using bmsql_prefixkey_idx4 on bmsql_prefixkey t2
         Index Cond: ((c_last)::text = '02-20-9791'::text)
         Filter: (((c_last)::text = '02-20-979132194393064456.1'::text) AND (c_phone = ANY ('{N,L,8,X,u,e,S,2,t,p,C}'::bpchar[])))
   ->  Seq Scan on hbom_t t1
(6 rows)

DROP TABLE IF EXISTS hbom_t;
DROP TABLE IF EXISTS bmsql_prefixkey;
-- test prefix index with in-expr
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1(
    id integer,
    name text,
    addr varchar(20)
);
create index it1 on t1 using btree(name(5));
insert into t1 values (1, '1234567890', '1234567890');
insert into t1 values (2, '1234567890123', '1234567890123');
insert into t1 values (3, 'a1234567890', '1234567890');
insert into t1 values (4, '12345', '12345');
table t1;
 id |     name      |     addr      
----+---------------+---------------
  1 | 1234567890    | 1234567890
  2 | 1234567890123 | 1234567890123
  3 | a1234567890   | 1234567890
  4 | 12345         | 12345
(4 rows)

set enable_seqscan=on;
set enable_indexscan=off;
explain (costs off) select * from t1 where name in ('1234567890', '1234567890123');
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on t1
   Filter: (name = ANY ('{1234567890,1234567890123}'::text[]))
(2 rows)

select * from t1 where name in ('1234567890', '1234567890123'); -- two
 id |     name      |     addr      
----+---------------+---------------
  1 | 1234567890    | 1234567890
  2 | 1234567890123 | 1234567890123
(2 rows)

select * from t1 where name in ('12345', '123456'); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name in ('12345'); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name in ('123456'); -- none
 id | name | addr 
----+------+------
(0 rows)

set enable_seqscan=off;
set enable_indexscan=on;
explain (costs off) select * from t1 where name in ('1234567890', '1234567890123');
                          QUERY PLAN                           
---------------------------------------------------------------
 Bitmap Heap Scan on t1
   Filter: (name = ANY ('{1234567890,1234567890123}'::text[]))
   ->  Bitmap Index Scan on it1
         Index Cond: (name = ANY ('{12345,12345}'::text[]))
(4 rows)

select * from t1 where name in ('1234567890', '1234567890123'); -- two
 id |     name      |     addr      
----+---------------+---------------
  1 | 1234567890    | 1234567890
  2 | 1234567890123 | 1234567890123
(2 rows)

select * from t1 where name in ('12345', '123456'); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name in ('12345'); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name in ('123456'); -- none
 id | name | addr 
----+------+------
(0 rows)

-- test prefix index with any-expr
set enable_seqscan=on;
set enable_indexscan=off;
explain (costs off) select * from t1 where name = any('{1234567890, a1234567890}'::text[]);
                         QUERY PLAN                          
-------------------------------------------------------------
 Seq Scan on t1
   Filter: (name = ANY ('{1234567890,a1234567890}'::text[]))
(2 rows)

select * from t1 where name = any('{1234567890, a1234567890}'::text[]); -- two
 id |    name     |    addr    
----+-------------+------------
  1 | 1234567890  | 1234567890
  3 | a1234567890 | 1234567890
(2 rows)

select * from t1 where name = any('{12345, 123456}'::text[]); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name = any('{12345}'::text[]); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name = any('{123456}'::text[]); -- none
 id | name | addr 
----+------+------
(0 rows)

set enable_seqscan=off;
set enable_indexscan=on;
explain (costs off) select * from t1 where name = any('{1234567890, a1234567890}'::text[]);
                         QUERY PLAN                          
-------------------------------------------------------------
 Bitmap Heap Scan on t1
   Filter: (name = ANY ('{1234567890,a1234567890}'::text[]))
   ->  Bitmap Index Scan on it1
         Index Cond: (name = ANY ('{12345,a1234}'::text[]))
(4 rows)

select * from t1 where name = any('{1234567890, a1234567890}'::text[]); -- two
 id |    name     |    addr    
----+-------------+------------
  1 | 1234567890  | 1234567890
  3 | a1234567890 | 1234567890
(2 rows)

select * from t1 where name = any('{12345, 123456}'::text[]); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name = any('{12345}'::text[]); -- one
 id | name  | addr  
----+-------+-------
  4 | 12345 | 12345
(1 row)

select * from t1 where name = any('{123456}'::text[]); -- none
 id | name | addr 
----+------+------
(0 rows)

\c regression
drop database prefix_index_db;
