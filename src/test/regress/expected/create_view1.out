--
-- CREATE_VIEW1
-- Virtual class definitions
--	(this also tests the query rewrite system)
--
-- Enforce use of COMMIT instead of 2PC for temporary objects
CREATE VIEW street AS
   SELECT r.name, r.thepath, c.cname AS cname
   FROM ONLY road r, real_city c
   WHERE c.outline ## r.thepath;
ERROR:  operator does not exist: path ## path
LINE 4:    WHERE c.outline ## r.thepath;
                           ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CREATE VIEW iexit AS
   SELECT ih.name, ih.thepath,
	interpt_pp(ih.thepath, r.thepath) AS exit
   FROM ihighway ih, ramp r
   WHERE ih.thepath ## r.thepath;
ERROR:  operator does not exist: path ## path
LINE 5:    WHERE ih.thepath ## r.thepath;
                            ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
CREATE VIEW toyemp AS
   SELECT name, age, location, 12*salary AS annualsal
   FROM emp;
-- Test comments
COMMENT ON VIEW noview IS 'no view';
ERROR:  relation "noview" does not exist
COMMENT ON VIEW toyemp IS 'is a view';
COMMENT ON VIEW toyemp IS NULL;
--
-- CREATE OR REPLACE VIEW
--
CREATE TABLE viewtest_tbl (a int, b int);
COPY viewtest_tbl FROM stdin;
CREATE OR REPLACE VIEW viewtest AS
	SELECT * FROM viewtest_tbl;
CREATE OR REPLACE VIEW viewtest AS
	SELECT * FROM viewtest_tbl WHERE a > 10;
SELECT * FROM viewtest ORDER BY a;
 a  | b  
----+----
 15 | 20
 20 | 25
(2 rows)

CREATE OR REPLACE VIEW viewtest AS
	SELECT a, b FROM viewtest_tbl WHERE a > 5 ORDER BY b DESC;
SELECT * FROM viewtest ORDER BY a;
 a  | b  
----+----
 10 | 15
 15 | 20
 20 | 25
(3 rows)

-- should fail
CREATE OR REPLACE VIEW viewtest AS
	SELECT a FROM viewtest_tbl WHERE a <> 20;
ERROR:  cannot drop columns from view
-- should fail
CREATE OR REPLACE VIEW viewtest AS
	SELECT 1, * FROM viewtest_tbl;
ERROR:  cannot change name of view column "a" to "?column?"
-- should fail
CREATE OR REPLACE VIEW viewtest AS
	SELECT a, b::numeric FROM viewtest_tbl;
ERROR:  cannot change data type of view column "b" from integer to numeric
-- should work
CREATE OR REPLACE VIEW viewtest AS
	SELECT a, b, 0 AS c FROM viewtest_tbl;
DROP SCHEMA IF EXISTS test_schema CASCADE;
NOTICE:  schema "test_schema" does not exist, skipping
CREATE SCHEMA test_schema;
CREATE OPERATOR test_schema.-(rightarg = int1, procedure = int1um);
CREATE OPERATOR test_schema.~(leftarg = int1, procedure = int1up);
set current_schema to 'test_schema';
CREATE VIEW test as select -(1::tinyint) as "arg1", (1::tinyint)~ as "arg2";
SELECT * FROM test;
 arg1 | arg2 
------+------
   -1 | 1
(1 row)

RESET current_schema;
DROP SCHEMA IF EXISTS test_schema CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to operator test_schema.-(NONE,tinyint)
drop cascades to operator test_schema.~(tinyint,NONE)
drop cascades to view test_schema.test
-- test error message
DROP TABLE viewtest;
ERROR:  "viewtest" is not a table
HINT:  Use DROP VIEW to remove a view.
DROP VIEW viewtest;
DROP TABLE viewtest_tbl;
-- test restriction on non_system view expansion
create table t1 (a int);
create view ttv1 as select a from t1;
set restrict_nonsystem_relation_kind to 'view';
select a from ttv1 where a > 0; --Error
ERROR:  Access to non-system view "ttv1" is restricted.
insert into ttv1 values(1); --Error
ERROR:  Access to non-system view "ttv1" is restricted.
delete from ttv1 where a = 1; --Error
ERROR:  Access to non-system view "ttv1" is restricted.
select relname from pg_class where relname = 'ttv1';
 relname 
---------
 ttv1
(1 row)

reset restrict_nonsystem_relation_kind;
drop view ttv1;
drop table t1;
