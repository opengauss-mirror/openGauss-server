create schema basefunc;
set current_schema=basefunc;
create table type
(
   col_int      TINYINT
  ,col_int2     SMALLINT
  ,col_int4		INTEGER
  ,col_int8	 	BIGINT
  ,col_smallserial	SMALLSERIAL
  ,col_serial 		SERIAL
  ,col_bigserial	BIGSERIAL
  ,col_real		REAL
  ,col_float    FLOAT4
  ,col_binaryp	DOUBLE PRECISION
  ,col_float8   FLOAT8
  ,col_float3	FLOAT(3)
  ,col_float50	FLOAT(50)
  ,col_double	BINARY_DOUBLE
  ,col_bool	BOOLEAN
);
NOTICE:  CREATE TABLE will create implicit sequence "type_col_smallserial_seq" for serial column "type.col_smallserial"
NOTICE:  CREATE TABLE will create implicit sequence "type_col_serial_seq" for serial column "type.col_serial"
NOTICE:  CREATE TABLE will create implicit sequence "type_col_bigserial_seq" for serial column "type.col_bigserial"
insert into type values(0, 5 ,	193540, 1935401906, default, default, default,1.20, 10.0000, 1.1, 10.1234, 321.321, 123.123654, 123.123654);
CREATE TABLE varlentype
(
	col_int			TINYINT
   ,col_decimal	  DECIMAL(10,2)
   ,col_numeric	  NUMERIC(10,4)
   ,col_number	  NUMBER(10,4)
   ,col_dec   DEC(10,4)
   ,col_integer   INTEGER(10,4)
   ,col_char1		CHAR
   ,col_char20		CHAR(20)
   ,col_character	CHARACTER(20)
   ,col_nchar		NCHAR(20)
   ,col_varchar  	VARCHAR(20)
   ,col_charatervaring	CHARACTER VARYING(20)
   ,col_varchar2		VARCHAR2(20)
   ,col_nvarchar2		NVARCHAR2(20)
   ,col_text		TEXT
   ,col_clob		CLOB
);
insert into varlentype values(1,12,123,1234,12345,123456,'a','abc','abc','abc','abc','abc','abc','abc','abc','abc');
insert into varlentype values(2,12.12,123.123,1234.1234,12345.12345,123456.123456,'a','你好','你好','你好','你好','你好','你好','你好','你好','你好');
CREATE TABLE time
(                                                                                                                              
  col_int		int
  ,col_bigint		BIGINT
  ,col_date		date
  ,col_timestamp	timestamp
  ,col_timestamptz	timestamptz
  ,col_smalldatetime	smalldatetime
  ,col_char		char
  ,col_interval		interval
  ,col_time		time
  ,col_timetz		timetz
  ,col_tinterval	tinterval
  ,col_daytosecond 	INTERVAL DAY TO SECOND
  ,col_reltime		RELTIME
  ,col_abstime		ABSTIME
 );
COPY time(col_int, col_bigint, col_date, col_timestamp, col_timestamptz, col_smalldatetime, col_char, col_interval,
	col_time,col_timetz,col_tinterval,col_daytosecond,col_reltime,col_abstime) FROM stdin;
-- test for sysdate + 1/24
select col_timestamp + 1/24 from time order by col_int;
         ?column?         
--------------------------
 Sat Sep 09 20:45:37 2017
 Mon Oct 09 20:45:37 2017
 Thu Nov 09 20:45:37 2017
 Sat Dec 09 20:45:37 2017
(4 rows)

select col_timestamp + 1/3 from time order by col_int;
         ?column?         
--------------------------
 Sun Sep 10 03:45:37 2017
 Tue Oct 10 03:45:37 2017
 Fri Nov 10 03:45:37 2017
 Sun Dec 10 03:45:37 2017
(4 rows)

select col_timestamptz + 1/24 from time order by col_int;
           ?column?           
------------------------------
 Sat Sep 09 20:45:37 2017 PDT
 Mon Oct 09 20:45:37 2017 PDT
 Thu Nov 09 20:45:37 2017 PST
 Sat Dec 09 20:45:37 2017 PST
(4 rows)

select col_timestamptz + 1/3 from time order by col_int;
           ?column?           
------------------------------
 Sun Sep 10 03:45:37 2017 PDT
 Tue Oct 10 03:45:37 2017 PDT
 Fri Nov 10 03:45:37 2017 PST
 Sun Dec 10 03:45:37 2017 PST
(4 rows)

select col_date + 1/24 from time order by col_int;
         ?column?         
--------------------------
 Tue Nov 01 11:10:10 2011
 Fri Nov 02 11:10:10 2012
 Tue Nov 01 11:10:10 2011
 Fri Nov 02 11:10:10 2012
(4 rows)

select col_date + 1/3 from time order by col_int;
         ?column?         
--------------------------
 Tue Nov 01 18:10:10 2011
 Fri Nov 02 18:10:10 2012
 Tue Nov 01 18:10:10 2011
 Fri Nov 02 18:10:10 2012
(4 rows)

-- tests for trunc
select trunc(col_timestamp) from time order by col_int;
          trunc           
--------------------------
 Sat Sep 09 00:00:00 2017
 Mon Oct 09 00:00:00 2017
 Thu Nov 09 00:00:00 2017
 Sat Dec 09 00:00:00 2017
(4 rows)

select trunc(col_timestamptz) from time order by col_int;
          trunc           
--------------------------
 Sat Sep 09 00:00:00 2017
 Mon Oct 09 00:00:00 2017
 Thu Nov 09 00:00:00 2017
 Sat Dec 09 00:00:00 2017
(4 rows)

select trunc(col_date) from time order by col_int;
          trunc           
--------------------------
 Tue Nov 01 00:00:00 2011
 Fri Nov 02 00:00:00 2012
 Tue Nov 01 00:00:00 2011
 Fri Nov 02 00:00:00 2012
(4 rows)

-- test for substr
select substr(15::interval, 1, 4);
 substr 
--------
 @ 15
(1 row)

select substr(col_interval, 1, 5) from time order by col_int;
 substr 
--------
 @ 2 d
 @ 1 d
 @ 1 d
 @ 18 
(4 rows)

select substr('abcdef', col_bigint, 3) from time order by col_int;
 substr 
--------
 bcd
 bcd
 bcd
 bcd
(4 rows)

select substr('abcdef', col_bigint) from time order by col_int;
 substr 
--------
 bcdef
 bcdef
 bcdef
 bcdef
(4 rows)

select substr(15::interval, col_bigint, 3) from time order by col_int;
 substr 
--------
  15
  15
  15
  15
(4 rows)

select substr(col_interval, col_bigint) from time order by col_int;
  substr  
----------
  2 days
  1 day
  1 day
  18 days
(4 rows)

select substr('abc', 111111111111111::bigint, col_bigint)  from time;
ERROR:  integer out of range
CONTEXT:  SQL function "substr" during inlining
referenced column: substr
select substr('abc', col_bigint, 1111111111111111111::bigint),sysdate  from time;
ERROR:  integer out of range
CONTEXT:  SQL function "substr" during inlining
referenced column: substr
select substr('abc', 2, 2147483647);
 substr 
--------
 bc
(1 row)

select substr('jkeifkekls', -5, 2147483645);
 substr 
--------
 kekls
(1 row)

-- tests for numtodsinterval
set intervalstyle=a;
select numtodsinterval(1500,'HOUR');
        numtodsinterval        
-------------------------------
 +000000062 12:00:00.000000000
(1 row)

select numtodsinterval(-0.1,'HOUR');
        numtodsinterval        
-------------------------------
 -000000000 00:06:00.000000000
(1 row)

select numtodsinterval(150032,'second');
        numtodsinterval        
-------------------------------
 +000000001 17:40:32.000000000
(1 row)

select numtodsinterval(-.1500321234,'second');
        numtodsinterval        
-------------------------------
 -000000000 00:00:00.150032000
(1 row)

--boundary test
SELECT numtodsinterval(-2147483648, 'DAY');
         numtodsinterval         
---------------------------------
 --2147483648 00:00:00.000000000
(1 row)

SELECT numtodsinterval(-2147483648, 'HOUR');
        numtodsinterval        
-------------------------------
 -089478485 08:00:00.000000000
(1 row)

SELECT numtodsinterval(-2147483648, 'MINUTE');
        numtodsinterval        
-------------------------------
 -001491308 02:08:00.000000000
(1 row)

SELECT numtodsinterval(-2147483648, 'SECOND');
        numtodsinterval        
-------------------------------
 -000024855 03:14:08.000000000
(1 row)

SELECT numtodsinterval(2147483647, 'DAY');
        numtodsinterval         
--------------------------------
 +2147483647 00:00:00.000000000
(1 row)

SELECT numtodsinterval(999999999.99999999999, 'DAY');
        numtodsinterval        
-------------------------------
 +999999999 23:59:59.999999000
(1 row)

SELECT numtodsinterval(2147483647, 'HOUR');
        numtodsinterval        
-------------------------------
 +089478485 07:00:00.000000000
(1 row)

SELECT numtodsinterval(2147483647, 'MINUTE');
        numtodsinterval        
-------------------------------
 +001491308 02:07:00.000000000
(1 row)

SELECT numtodsinterval(2147483647, 'SECOND');
        numtodsinterval        
-------------------------------
 +000024855 03:14:07.000000000
(1 row)

SELECT numtodsinterval(123456789.123456789, 'DAY');
        numtodsinterval        
-------------------------------
 +123456789 02:57:46.666570000
(1 row)

SELECT '2147483647 days 24 hours'::interval;
ERROR:  the interval value is overflow, it can not perform as A db interval-style
set intervalstyle=postgres;
-- tests for datalength
SELECT * from type;
 col_int | col_int2 | col_int4 |  col_int8  | col_smallserial | col_serial | col_bigserial | col_real | col_float | col_binaryp | col_float8 | col_float3 | col_float50 | col_double | col_bool 
---------+----------+----------+------------+-----------------+------------+---------------+----------+-----------+-------------+------------+------------+-------------+------------+----------
 0       |        5 |   193540 | 1935401906 |               1 |          1 |             1 |      1.2 |        10 |         1.1 |    10.1234 |    321.321 |  123.123654 | 123.123654 | 
(1 row)

SELECT datalength(col_int) as len_int1,
	datalength(col_int2) as len_int2,
	datalength(col_int4) as len_int4,
	datalength(col_int8) as len_int8,
	datalength(col_smallserial) as len_smallserial,
	datalength(col_serial) as len_serial,
	datalength(col_bigserial) as len_bigserial,
	datalength(col_real) as len_real,
	datalength(col_float) as len_float,
	datalength(col_binaryp) as len_binaryp,
	datalength(col_float8) as len_float8,
	datalength(col_float3) as len_float3,
	datalength(col_float50) as len_float50,
	datalength(col_double) as len_double,
	datalength(col_bool) as len_bool
from type;
 len_int1 | len_int2 | len_int4 | len_int8 | len_smallserial | len_serial | len_bigserial | len_real | len_float | len_binaryp | len_float8 | len_float3 | len_float50 | len_double | len_bool 
----------+----------+----------+----------+-----------------+------------+---------------+----------+-----------+-------------+------------+------------+-------------+------------+----------
        1 |        2 |        4 |        8 |               2 |          4 |             8 |        4 |         4 |           8 |          8 |          4 |           8 |          8 |         
(1 row)

SELECT * from time order by col_int;
 col_int | col_bigint |         col_date         |      col_timestamp       |       col_timestamptz        |    col_smalldatetime     | col_char | col_interval | col_time | col_timetz  |                          col_tinterval                          | col_daytosecond |       col_reltime       |         col_abstime          
---------+------------+--------------------------+--------------------------+------------------------------+--------------------------+----------+--------------+----------+-------------+-----------------------------------------------------------------+-----------------+-------------------------+------------------------------
       3 |          2 | Tue Nov 01 10:10:10 2011 | Sat Sep 09 19:45:37 2017 | Sat Sep 09 19:45:37 2017 PDT | Sat Apr 12 04:05:00 2003 | a        | 2 days       | 19:45:37 | 19:45:37-07 | ["Sun Sep 04 23:59:12 1983 PDT" "Tue Oct 04 23:59:12 1983 PDT"] | 2 days          | 5 years 6 mons 18:00:00 | Thu Dec 20 18:31:34 2007 PST
       6 |          2 | Fri Nov 02 10:10:10 2012 | Mon Oct 09 19:45:37 2017 | Mon Oct 09 19:45:37 2017 PDT | Sat Apr 12 04:05:00 2003 | c        | 1 day        | 19:45:37 | 19:45:37-07 | ["Sun Sep 04 23:59:12 1983 PDT" "Tue Oct 04 23:59:12 1983 PDT"] | 2 days          | 5 years 6 mons 18:00:00 | Thu Dec 20 18:31:34 2007 PST
       7 |          2 | Tue Nov 01 10:10:10 2011 | Thu Nov 09 19:45:37 2017 | Thu Nov 09 19:45:37 2017 PST | Sat Apr 12 04:05:00 2003 | d        | 1 day        | 19:45:37 | 19:45:37-07 | ["Sun Sep 04 23:59:12 1983 PDT" "Tue Oct 04 23:59:12 1983 PDT"] | 2 days          | 5 years 6 mons 18:00:00 | Thu Dec 20 18:31:34 2007 PST
       8 |          2 | Fri Nov 02 10:10:10 2012 | Sat Dec 09 19:45:37 2017 | Sat Dec 09 19:45:37 2017 PST | Sat Apr 12 04:05:00 2003 | h        | 18 days      | 19:45:37 | 19:45:37-07 | ["Sun Sep 04 23:59:12 1983 PDT" "Tue Oct 04 23:59:12 1983 PDT"] | 2 days          | 5 years 6 mons 18:00:00 | Thu Dec 20 18:31:34 2007 PST
(4 rows)

SELECT datalength(col_date) as len_date,
	datalength(col_timestamp) as len_timestamp,
	datalength(col_timestamptz) as len_timestamptz,
	datalength(col_time) as len_time,
	datalength(col_timetz) as len_timetz,
	datalength(col_smalldatetime) as len_smalldatetime,
	datalength(col_interval) as len_interval,
	datalength(col_tinterval) as len_tinterval,
	datalength(col_daytosecond) as len_daytosecond,
	datalength(col_reltime) as len_reltime,
	datalength(col_abstime) as len_abstime
from time;
 len_date | len_timestamp | len_timestamptz | len_time | len_timetz | len_smalldatetime | len_interval | len_tinterval | len_daytosecond | len_reltime | len_abstime 
----------+---------------+-----------------+----------+------------+-------------------+--------------+---------------+-----------------+-------------+-------------
        8 |             8 |               8 |        8 |         12 |                 8 |           16 |            12 |              16 |           4 |           4
        8 |             8 |               8 |        8 |         12 |                 8 |           16 |            12 |              16 |           4 |           4
        8 |             8 |               8 |        8 |         12 |                 8 |           16 |            12 |              16 |           4 |           4
        8 |             8 |               8 |        8 |         12 |                 8 |           16 |            12 |              16 |           4 |           4
(4 rows)

SELECT * from varlentype order by col_int;
 col_int | col_decimal | col_numeric | col_number |  col_dec   | col_integer | col_char1 |      col_char20      |    col_character     |      col_nchar       | col_varchar | col_charatervaring | col_varchar2 | col_nvarchar2 | col_text | col_clob 
---------+-------------+-------------+------------+------------+-------------+-----------+----------------------+----------------------+----------------------+-------------+--------------------+--------------+---------------+----------+----------
 1       |       12.00 |    123.0000 |  1234.0000 | 12345.0000 | 123456.0000 | a         | abc                  | abc                  | abc                  | abc         | abc                | abc          | abc           | abc      | abc
 2       |       12.12 |    123.1230 |  1234.1234 | 12345.1235 | 123456.1235 | a         | 你好                 | 你好                 | 你好                 | 你好        | 你好               | 你好         | 你好          | 你好     | 你好
(2 rows)

SELECT datalength(col_decimal) as len_decimal,
	datalength(col_numeric) as len_numeric,
	datalength(col_number) as len_number,
	datalength(col_dec) as len_dec,
	datalength(col_integer) as len_integer,
	datalength(col_char1) as len_char1,
	datalength(col_char20) as len_char20,
	datalength(col_character) as len_character,
	datalength(col_nchar) as len_nchar,
	datalength(col_varchar) as len_varchar,
	datalength(col_charatervaring) as len_charvaring,
	datalength(col_varchar2) as len_varchar2,
	datalength(col_nvarchar2) as len_nvarchar2,
	datalength(col_text) as len_text,
	datalength(col_clob) as len_clob
from varlentype order by col_int;
 len_decimal | len_numeric | len_number | len_dec | len_integer | len_char1 | len_char20 | len_character | len_nchar | len_varchar | len_charvaring | len_varchar2 | len_nvarchar2 | len_text | len_clob 
-------------+-------------+------------+---------+-------------+-----------+------------+---------------+-----------+-------------+----------------+--------------+---------------+----------+----------
           2 |           2 |          2 |       4 |           4 |         1 |         20 |            20 |        20 |           3 |              3 |            3 |             3 |        3 |        3
           4 |           4 |          4 |       6 |           6 |         1 |         20 |            20 |        20 |           6 |              6 |            6 |             6 |        6 |        6
(2 rows)

drop table type;
drop table varlentype;
drop table time;
-- tests for repeat
-- create table at first
create table test_null_repeat(id int, col2 text); 
create table test_numeric(id int, col2 number); 
insert into test_numeric values(1,1.1),(2,1.2),(3,1.3);
insert into test_null_repeat values(1,'');
insert into test_null_repeat values(2,null);
insert into test_null_repeat values(3,repeat('Pg', 0));
-- check the length
select lengthb(repeat('Pg', 0));
 lengthb 
---------
        
(1 row)

-- check the value 
select repeat('Pg', 0) is null;
 ?column? 
----------
 t
(1 row)

-- update by the result
update test_numeric set col2=test_null_repeat.col2 from test_null_repeat where test_numeric.id=test_null_repeat.id;
-- check the table
select * from test_numeric order by id;
 id | col2 
----+------
  1 |     
  2 |     
  3 |     
(3 rows)

-- drop table at last
drop table test_null_repeat;
drop table test_numeric;
--test function pg_partition_filepath
CREATE TABLE test_func_partition_filepath_table
(
    c1 int,
    c2 int,
    c3 int
)
partition by range (c1)
(
    partition p0_partition_filepath_table1 VALUES less than (10000),
    partition p1_partition_filepath_table1 VALUES less than (20000),
    partition p2_partition_filepath_table1 VALUES less than (30000),
    partition p3_partition_filepath_table1 VALUES less than (maxvalue)
);
create or replace function func_get_partition_filepath(partname text) returns text as $$ 
declare
    partoid integer;
    filepath text;
begin
    select oid from pg_partition where relname = partname into partoid;
    select * from pg_partition_filepath(partoid) into filepath;
    return filepath;
end;
$$ language plpgsql;
select func_get_partition_filepath('p0_partition_filepath_table1');
--? func_get_partition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_partition_filepath('p1_partition_filepath_table1');
--? func_get_partition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_partition_filepath('p2_partition_filepath_table1');
--? func_get_partition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_partition_filepath('p3_partition_filepath_table1');
--? func_get_partition_filepath 
--?.*
--? base/.*/.*
(1 row)

drop function func_get_partition_filepath;
drop table test_func_partition_filepath_table;
--test function pg_partition_filepath with subpartition
CREATE TABLE test_func_subpartition_table
(
    c1 int,
    c2 int,
    c3 int
)
partition by range (c1) subpartition by range (c2)
(
    partition p1 VALUES less than (100)
    (
        subpartition p1_1 VALUES less than (100),
        subpartition p1_2 VALUES less than (200)
    ),
    partition p2 VALUES less than (200)
    (
        subpartition p2_1 VALUES less than (100),
        subpartition p2_2 VALUES less than (200)
    )
);
create or replace function func_get_subpartition_filepath(tablename text, partname text, subpartname text)
returns text as $$
declare
    relid integer;
    partoid integer;
    subpartoid integer;
    filepath text;
begin
    select c.oid from pg_class c, pg_namespace t where c.relnamespace=t.oid and c.relname = tablename into  relid;
    select oid from pg_partition where relname = partname and parentid = relid into partoid;
    select oid from pg_partition where relname = subpartname and parentid = partoid into subpartoid;
    select * from pg_partition_filepath(subpartoid) into filepath;
    return filepath;
end;
$$ language plpgsql;
select func_get_subpartition_filepath('test_func_subpartition_table', 'p1', 'p1_1');
--? func_get_subpartition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_subpartition_filepath('test_func_subpartition_table', 'p1', 'p1_1');
--? func_get_subpartition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_subpartition_filepath('test_func_subpartition_table', 'p1', 'p1_1');
--? func_get_subpartition_filepath 
--?.*
--? base/.*/.*
(1 row)

select func_get_subpartition_filepath('test_func_subpartition_table', 'p1', 'p1_1');
--? func_get_subpartition_filepath 
--?.*
--? base/.*/.*
(1 row)

drop function func_get_subpartition_filepath;
drop table test_func_subpartition_table;
drop schema basefunc cascade;
