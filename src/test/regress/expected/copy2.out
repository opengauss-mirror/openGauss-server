-- Enforce use of COMMIT instead of 2PC for temporary objects
CREATE TABLE x (
	a int,
	b int,
	c text not null default 'stuff',
	d text,
	e text
);
CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS '
  BEGIN
		NEW.e := ''before trigger fired''::text;
		return NEW;
	END;
' LANGUAGE plpgsql;
CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS '
  BEGIN
		UPDATE x set e=''after trigger fired'' where c=''stuff'';
		return NULL;
	END;
' LANGUAGE plpgsql;
CREATE TRIGGER trg_x_after AFTER INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_after();
CREATE TRIGGER trg_x_before BEFORE INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_before();
COPY x (a, b, c, d, e) from stdin;
COPY x (b, d) from stdin;
COPY x (b, d) from stdin;
COPY x (a, b, c, d, e) from stdin;
-- non-existent column in column list: should fail
COPY x (xyz) from stdin;
ERROR:  column "xyz" of relation "x" does not exist
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin;
ERROR:  column "d" specified more than once
-- missing data: should fail
COPY x from stdin;
ERROR:  missing data for column "b"
CONTEXT:  COPY x, line 1: ""
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2000	230	23	23"
COPY x from stdin;
ERROR:  missing data for column "e"
CONTEXT:  COPY x, line 1: "2001	231	\N	\N"
-- extra data: should fail
COPY x from stdin;
ERROR:  extra data after last expected column
CONTEXT:  COPY x, line 1: "2002	232	40	50	60	70	80"
-- various COPY options: delimiters, oids, NULL string, encoding
COPY x (b, c, d, e) from stdin with oids delimiter ',' null 'x';
ERROR:  table "x" does not have OIDs
500000,x,45,80,90
500001,x,\x,\\x,\\\x
invalid command \x,
500002,x,\,,\\\,,\\
invalid command \,,
\.
invalid command \.
COPY x from stdin WITH DELIMITER AS ';' NULL AS '';
ERROR:  syntax error at or near "500000"
LINE 1: 500000,x,45,80,90
        ^
3000;;c;;
ERROR:  syntax error at or near "3000"
LINE 1: 3000;
        ^
ERROR:  syntax error at or near "c"
LINE 1: c;
        ^
\.
invalid command \.
COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii';
-- check results of copy in
SELECT * FROM x ORDER BY a, b;
   a   | b  |     c      |   d    |          e           
-------+----+------------+--------+----------------------
  4000 |    | C          |        | before trigger fired
  4001 |  1 | empty      |        | before trigger fired
  4002 |  2 | null       |        | before trigger fired
  4003 |  3 | Backslash  | \      | before trigger fired
  4004 |  4 | BackslashX | \X     | before trigger fired
  4005 |  5 | N          | N      | before trigger fired
  4006 |  6 | BackslashN | \N     | before trigger fired
  4007 |  7 | XX         | XX     | before trigger fired
  4008 |  8 | Delimiter  | :      | before trigger fired
  9999 |    | \N         | NN     | before trigger fired
 10000 | 21 | 31         | 41     | before trigger fired
 10001 | 22 | 32         | 42     | before trigger fired
 10002 | 23 | 33         | 43     | before trigger fired
 10003 | 24 | 34         | 44     | before trigger fired
 10004 | 25 | 35         | 45     | before trigger fired
 10005 | 26 | 36         | 46     | before trigger fired
       |  1 | stuff      | test_1 | after trigger fired
       |  2 | stuff      | test_2 | after trigger fired
       |  3 | stuff      | test_3 | after trigger fired
       |  4 | stuff      | test_4 | after trigger fired
       |  5 | stuff      | test_5 | after trigger fired
(21 rows)

-- COPY w/ oids on a table w/o oids should fail
CREATE TABLE no_oids (
	a	int,
	b	int
) WITHOUT OIDS;
INSERT INTO no_oids (a, b) VALUES (5, 10);
INSERT INTO no_oids (a, b) VALUES (20, 30);
-- should fail
COPY no_oids FROM stdin WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
COPY no_oids TO stdout WITH OIDS;
ERROR:  table "no_oids" does not have OIDs
-- check copy out
COPY (select * from x order by 1,2,3,4,5) TO stdout;
4000	\N	C	\N	before trigger fired
4001	1	empty	\N	before trigger fired
4002	2	null	\N	before trigger fired
4003	3	Backslash	\\	before trigger fired
4004	4	BackslashX	\\X	before trigger fired
4005	5	N	N	before trigger fired
4006	6	BackslashN	\\N	before trigger fired
4007	7	XX	XX	before trigger fired
4008	8	Delimiter	:	before trigger fired
9999	\N	\\N	NN	before trigger fired
10000	21	31	41	before trigger fired
10001	22	32	42	before trigger fired
10002	23	33	43	before trigger fired
10003	24	34	44	before trigger fired
10004	25	35	45	before trigger fired
10005	26	36	46	before trigger fired
\N	1	stuff	test_1	after trigger fired
\N	2	stuff	test_2	after trigger fired
\N	3	stuff	test_3	after trigger fired
\N	4	stuff	test_4	after trigger fired
\N	5	stuff	test_5	after trigger fired
COPY (select c,e from x where c != 'N' order by 1,2) TO stdout;
31	before trigger fired
32	before trigger fired
33	before trigger fired
34	before trigger fired
35	before trigger fired
36	before trigger fired
Backslash	before trigger fired
BackslashN	before trigger fired
BackslashX	before trigger fired
C	before trigger fired
Delimiter	before trigger fired
empty	before trigger fired
\\N	before trigger fired
null	before trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
stuff	after trigger fired
XX	before trigger fired
COPY (select b,e from x order by 1,2) TO stdout WITH NULL 'I''m null';
1	after trigger fired
1	before trigger fired
2	after trigger fired
2	before trigger fired
3	after trigger fired
3	before trigger fired
4	after trigger fired
4	before trigger fired
5	after trigger fired
5	before trigger fired
6	before trigger fired
7	before trigger fired
8	before trigger fired
21	before trigger fired
22	before trigger fired
23	before trigger fired
24	before trigger fired
25	before trigger fired
26	before trigger fired
I'm null	before trigger fired
I'm null	before trigger fired
CREATE TEMP TABLE y (
	col1 text,
	col2 text
);
INSERT INTO y VALUES ('Jackson, Sam', E'\\h');
INSERT INTO y VALUES ('It is "perfect".',E'\t');
INSERT INTO y VALUES ('', NULL);
COPY y TO stdout WITH CSV;
"Jackson, Sam",\h
"It is ""perfect"".",	
,
COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|';
Jackson, Sam|\h
It is "perfect".|	
|
COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii';
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
,
COPY y TO stdout WITH CSV FORCE QUOTE *;
"Jackson, Sam","\h"
"It is ""perfect"".","	"
,
-- Repeat above tests with new 9.0 option syntax
COPY y TO stdout (FORMAT CSV);
"Jackson, Sam",\h
"It is ""perfect"".",	
,
COPY y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|');
Jackson, Sam|\h
It is "perfect".|	
|
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\');
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
,
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE *);
"Jackson, Sam","\h"
"It is ""perfect"".","	"
,
\copy y TO stdout (FORMAT CSV)
"Jackson, Sam",\h
"It is ""perfect"".",	
,
\copy y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
Jackson, Sam|\h
It is "perfect".|	
|
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
"Jackson, Sam","\\h"
"It is \"perfect\".","	"
,
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE *)
"Jackson, Sam","\h"
"It is ""perfect"".","	"
,
--test that we read consecutive LFs properly
CREATE TEMP TABLE testnl (a int, b text, c int);
COPY testnl FROM stdin CSV;
-- test end of copy marker
CREATE TABLE testeoc (a text);
COPY testeoc FROM stdin CSV;
COPY (select * from testeoc order by a using ~<~) TO stdout CSV;
"\."
\.b
a\.
c\.d
-- test handling of nonstandard null marker that violates escaping rules
CREATE TEMP TABLE testnull(a int, b text);
INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL);
COPY (select * from testnull order by 1,2) TO stdout WITH NULL AS E'\\0';
1	\\0
\0	\0
COPY testnull FROM stdin WITH NULL AS E'\\0';
SELECT * FROM testnull ORDER BY 1,2;
 a  | b  
----+----
  1 | \0
 42 | \0
    | 
    | 
(4 rows)

START TRANSACTION;
CREATE TABLE vistest (LIKE testeoc);
COPY vistest FROM stdin CSV;
COMMIT;
SELECT * FROM vistest order by 1;
 a  
----
 a0
 b
(2 rows)

START TRANSACTION;
TRUNCATE vistest;
COPY vistest FROM stdin CSV FREEZE;
SELECT * FROM vistest order by 1;
 a 
---
 x
 y
(2 rows)

COMMIT;
TRUNCATE vistest;
COPY vistest FROM stdin CSV FREEZE;
CREATE FUNCTION truncate_in_subxact() RETURNS VOID AS
$$
BEGIN
	TRUNCATE vistest;
--EXCEPTION
--  WHEN OTHERS THEN
--	INSERT INTO vistest VALUES ('subxact failure');
END;
$$ language plpgsql;
START TRANSACTION;
INSERT INTO vistest VALUES ('z');
SELECT truncate_in_subxact();
 truncate_in_subxact 
---------------------
 
(1 row)

COPY vistest FROM stdin CSV FREEZE;
SELECT * FROM vistest order by 1;
 a  
----
 d4
 e
(2 rows)

COMMIT;
SELECT * FROM vistest order by 1;
 a  
----
 d4
 e
(2 rows)

DROP TABLE vistest;
DROP FUNCTION truncate_in_subxact();
DROP TABLE x;
DROP TABLE y;
DROP FUNCTION fn_x_before();
DROP FUNCTION fn_x_after();
CREATE TABLE measurement (
city_id int not null,
logdate int not null,
peaktemp int,
unitsales int
);
CREATE TABLE measurement_movement (
city_id int not null,
logdate int not null,
peaktemp int,
unitsales int
);
CREATE OR REPLACE FUNCTION measurement_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
INSERT INTO measurement_movement VALUES (NEW.*);
RETURN NULL;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER insert_measurement_trigger
BEFORE INSERT ON measurement
FOR EACH ROW EXECUTE PROCEDURE measurement_insert_trigger();
COPY measurement from stdin;
select * from measurement_movement order by city_id;
 city_id | logdate | peaktemp | unitsales 
---------+---------+----------+-----------
   10001 |      22 |       32 |        42
   10002 |      23 |       33 |        43
   10003 |      24 |       34 |        44
   10004 |      25 |       35 |        45
   10005 |      26 |       36 |        46
(5 rows)

select * from measurement order by city_id;
 city_id | logdate | peaktemp | unitsales 
---------+---------+----------+-----------
(0 rows)

drop trigger insert_measurement_trigger on measurement;
drop function measurement_insert_trigger;
drop table measurement;
drop table measurement_movement;
create table copy_header_src (c1 int);
create table copy_header_dest (c1 int);
insert into copy_header_src select generate_series(1,10);
\copy copy_header_src to '~/copy_header_src.csv' with csv header;
\copy copy_header_dest from '~/copy_header_src.csv' with csv header'on';
ERROR:  syntax error at or near "'on'"
LINE 1: COPY  copy_header_dest FROM STDIN  csv header'on';
                                                     ^
drop table copy_header_src;
drop table copy_header_dest;
create table copy_parallel_header_src (c1 int);
create table copy_parallel_header_dest (c1 int);
insert into copy_parallel_header_src select generate_series(1,100);
\copy copy_parallel_header_src to '~/copy_parallel_header_src.csv' with csv header;
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with csv header;
select count(*) from copy_parallel_header_dest;
 count 
-------
   100
(1 row)

\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with csv header header;
ERROR:  conflicting or redundant options
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with csv header'on';
ERROR:  syntax error at or near "'on'"
LINE 1: ...  copy_parallel_header_dest FROM STDIN  with csv header'on';
                                                                  ^
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with csv header,;
ERROR:  syntax error at or near ","
LINE 1: ...OPY  copy_parallel_header_dest FROM STDIN  with csv header,;
                                                                     ^
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with csv, header;
ERROR:  syntax error at or near ","
LINE 1: ...OPY  copy_parallel_header_dest FROM STDIN  with csv, header;
                                                              ^
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with (csv, header);
ERROR:  option "csv" not recognized
\copy copy_parallel_header_dest from '~/copy_parallel_header_src.csv' parallel 8 with header;
ERROR:  COPY HEADER available only in CSV mode
drop table copy_parallel_header_src;
drop table copy_parallel_header_dest;
