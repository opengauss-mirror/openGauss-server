create schema test_get_table_def;
set current_schema=test_get_table_def;
create table table_function_export_def_base (
    id integer primary key,
    name varchar(100)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "table_function_export_def_base_pkey" for table "table_function_export_def_base"
create table table_function_export_def (
    id integer primary key,
    fid integer,
    constraint table_export_base_fkey foreign key (fid) references table_function_export_def_base(id)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "table_function_export_def_pkey" for table "table_function_export_def"
select * from pg_get_tabledef('table_function_export_def');
                                            pg_get_tabledef                                            
-------------------------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                                                +
 CREATE TABLE table_function_export_def (                                                             +
     id integer NOT NULL,                                                                             +
     fid integer,                                                                                     +
     CONSTRAINT table_export_base_fkey FOREIGN KEY (fid) REFERENCES table_function_export_def_base(id)+
 )                                                                                                    +
 WITH (orientation=row, compression=no);                                                              +
 ALTER TABLE table_function_export_def ADD CONSTRAINT table_function_export_def_pkey PRIMARY KEY (id);
(1 row)

drop table table_function_export_def;
drop table table_function_export_def_base;
--
---- test for partition table
--
--range table
create table table_range1 (id int, a date, b varchar)
partition by range (id)
(
    partition table_range1_p1 values less than(10),
    partition table_range1_p2 values less than(50),
    partition table_range1_p3 values less than(100),
    partition table_range1_p4 values less than(maxvalue)
);
select * from pg_get_tabledef('table_range1');
                                 pg_get_tabledef                                 
---------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                          +
 CREATE TABLE table_range1 (                                                    +
     id integer,                                                                +
     a timestamp(0) without time zone,                                          +
     b character varying                                                        +
 )                                                                              +
 WITH (orientation=row, compression=no)                                         +
 PARTITION BY RANGE (id)                                                        +
 (                                                                              +
     PARTITION table_range1_p1 VALUES LESS THAN (10) TABLESPACE pg_default,     +
     PARTITION table_range1_p2 VALUES LESS THAN (50) TABLESPACE pg_default,     +
     PARTITION table_range1_p3 VALUES LESS THAN (100) TABLESPACE pg_default,    +
     PARTITION table_range1_p4 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default+
 )                                                                              +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_range1;
create table table_range2 (id int, a date, b varchar)
partition by range (a)
(
    partition table_range2_p1 values less than('2020-03-01'),
    partition table_range2_p2 values less than('2020-05-01'),
    partition table_range2_p3 values less than('2020-07-01'),
    partition table_range2_p4 values less than(maxvalue)
);
select * from pg_get_tabledef('table_range2');
                                   pg_get_tabledef                                    
--------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                               +
 CREATE TABLE table_range2 (                                                         +
     id integer,                                                                     +
     a timestamp(0) without time zone,                                               +
     b character varying                                                             +
 )                                                                                   +
 WITH (orientation=row, compression=no)                                              +
 PARTITION BY RANGE (a)                                                              +
 (                                                                                   +
     PARTITION table_range2_p1 VALUES LESS THAN ('2020-03-01') TABLESPACE pg_default,+
     PARTITION table_range2_p2 VALUES LESS THAN ('2020-05-01') TABLESPACE pg_default,+
     PARTITION table_range2_p3 VALUES LESS THAN ('2020-07-01') TABLESPACE pg_default,+
     PARTITION table_range2_p4 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default     +
 )                                                                                   +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_range2;
create table table_range3 (id int, a date, b varchar)
partition by range (id, a)
(
    partition table_range3_p1 values less than(10, '2020-03-01'),
    partition table_range3_p2 values less than(50, '2020-05-01'),
    partition table_range3_p3 values less than(100, '2020-07-01'),
    partition table_range3_p4 values less than(maxvalue, maxvalue)
);
select * from pg_get_tabledef('table_range3');
                                      pg_get_tabledef                                      
-------------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                                    +
 CREATE TABLE table_range3 (                                                              +
     id integer,                                                                          +
     a timestamp(0) without time zone,                                                    +
     b character varying                                                                  +
 )                                                                                        +
 WITH (orientation=row, compression=no)                                                   +
 PARTITION BY RANGE (id, a)                                                               +
 (                                                                                        +
     PARTITION table_range3_p1 VALUES LESS THAN (10, '2020-03-01') TABLESPACE pg_default, +
     PARTITION table_range3_p2 VALUES LESS THAN (50, '2020-05-01') TABLESPACE pg_default, +
     PARTITION table_range3_p3 VALUES LESS THAN (100, '2020-07-01') TABLESPACE pg_default,+
     PARTITION table_range3_p4 VALUES LESS THAN (MAXVALUE, MAXVALUE) TABLESPACE pg_default+
 )                                                                                        +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_range3;
create table table_range4 (id int primary key, a date, b varchar)
partition by range (id)
(
    partition table_range4_p1 start (10) end (40) every (10),
    partition table_range4_p2 end (70),
    partition table_range4_p3 start (70),
    partition table_range4_p4 start (100) end (150) every (20)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "table_range4_pkey" for table "table_range4"
select * from pg_get_tabledef('table_range4');
                                pg_get_tabledef                                
-------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                        +
 CREATE TABLE table_range4 (                                                  +
     id integer NOT NULL,                                                     +
     a timestamp(0) without time zone,                                        +
     b character varying                                                      +
 )                                                                            +
 WITH (orientation=row, compression=no)                                       +
 PARTITION BY RANGE (id)                                                      +
 (                                                                            +
     PARTITION table_range4_p1_0 VALUES LESS THAN (10) TABLESPACE pg_default, +
     PARTITION table_range4_p1_1 VALUES LESS THAN (20) TABLESPACE pg_default, +
     PARTITION table_range4_p1_2 VALUES LESS THAN (30) TABLESPACE pg_default, +
     PARTITION table_range4_p1_3 VALUES LESS THAN (40) TABLESPACE pg_default, +
     PARTITION table_range4_p2 VALUES LESS THAN (70) TABLESPACE pg_default,   +
     PARTITION table_range4_p3 VALUES LESS THAN (100) TABLESPACE pg_default,  +
     PARTITION table_range4_p4_1 VALUES LESS THAN (120) TABLESPACE pg_default,+
     PARTITION table_range4_p4_2 VALUES LESS THAN (140) TABLESPACE pg_default,+
     PARTITION table_range4_p4_3 VALUES LESS THAN (150) TABLESPACE pg_default +
 )                                                                            +
 ENABLE ROW MOVEMENT;                                                         +
 ALTER TABLE table_range4 ADD CONSTRAINT table_range4_pkey PRIMARY KEY (id);
(1 row)

drop table table_range4;
--interval table
create table table_interval1 (id int, a date, b varchar)
partition by range (a)
interval ('1 day')
(
    partition table_interval1_p1 values less than('2020-03-01'),
    partition table_interval1_p2 values less than('2020-05-01'),
    partition table_interval1_p3 values less than('2020-07-01'),
    partition table_interval1_p4 values less than(maxvalue)
);
select * from pg_get_tabledef('table_interval1');
                                     pg_get_tabledef                                     
-----------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                                  +
 CREATE TABLE table_interval1 (                                                         +
     id integer,                                                                        +
     a timestamp(0) without time zone,                                                  +
     b character varying                                                                +
 )                                                                                      +
 WITH (orientation=row, compression=no)                                                 +
 PARTITION BY RANGE (a)                                                                 +
 INTERVAL ('1 day')                                                                     +
 (                                                                                      +
     PARTITION table_interval1_p1 VALUES LESS THAN ('2020-03-01') TABLESPACE pg_default,+
     PARTITION table_interval1_p2 VALUES LESS THAN ('2020-05-01') TABLESPACE pg_default,+
     PARTITION table_interval1_p3 VALUES LESS THAN ('2020-07-01') TABLESPACE pg_default,+
     PARTITION table_interval1_p4 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default     +
 )                                                                                      +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_interval1;
--list table
create table table_list1 (id int, a date, b varchar)
partition by list (id)
(
    partition table_list1_p1 values (1, 2, 3, 4),
    partition table_list1_p2 values (5, 6, 7, 8),
    partition table_list1_p3 values (9, 10, 11, 12)
);
select * from pg_get_tabledef('table_list1');
                            pg_get_tabledef                             
------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                 +
 CREATE TABLE table_list1 (                                            +
     id integer,                                                       +
     a timestamp(0) without time zone,                                 +
     b character varying                                               +
 )                                                                     +
 WITH (orientation=row, compression=no)                                +
 PARTITION BY LIST (id)                                                +
 (                                                                     +
     PARTITION table_list1_p1 VALUES (1,2,3,4) TABLESPACE pg_default,  +
     PARTITION table_list1_p2 VALUES (5,6,7,8) TABLESPACE pg_default,  +
     PARTITION table_list1_p3 VALUES (9,10,11,12) TABLESPACE pg_default+
 )                                                                     +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_list1;
create table table_list2 (id int, a date, b varchar)
partition by list (b)
(
    partition table_list2_p1 values ('1', '2', '3', '4'),
    partition table_list2_p2 values ('5', '6', '7', '8'),
    partition table_list2_p3 values ('9', '10', '11', '12')
);
select * from pg_get_tabledef('table_list2');
                                pg_get_tabledef                                 
--------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                         +
 CREATE TABLE table_list2 (                                                    +
     id integer,                                                               +
     a timestamp(0) without time zone,                                         +
     b character varying                                                       +
 )                                                                             +
 WITH (orientation=row, compression=no)                                        +
 PARTITION BY LIST (b)                                                         +
 (                                                                             +
     PARTITION table_list2_p1 VALUES ('1','2','3','4') TABLESPACE pg_default,  +
     PARTITION table_list2_p2 VALUES ('5','6','7','8') TABLESPACE pg_default,  +
     PARTITION table_list2_p3 VALUES ('9','10','11','12') TABLESPACE pg_default+
 )                                                                             +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_list2;
create table table_list3 (id int primary key, a date, b varchar)
partition by list (b)
(
    partition table_list3_p1 values ('1', '2', '3', '4'),
    partition table_list3_p2 values ('5', '6', '7', '8'),
    partition table_list3_p3 values (default)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "table_list3_pkey" for table "table_list3"
select * from pg_get_tabledef('table_list3');
                               pg_get_tabledef                                
------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                       +
 CREATE TABLE table_list3 (                                                  +
     id integer NOT NULL,                                                    +
     a timestamp(0) without time zone,                                       +
     b character varying                                                     +
 )                                                                           +
 WITH (orientation=row, compression=no)                                      +
 PARTITION BY LIST (b)                                                       +
 (                                                                           +
     PARTITION table_list3_p1 VALUES ('1','2','3','4') TABLESPACE pg_default,+
     PARTITION table_list3_p2 VALUES ('5','6','7','8') TABLESPACE pg_default,+
     PARTITION table_list3_p3 VALUES (DEFAULT) TABLESPACE pg_default         +
 )                                                                           +
 ENABLE ROW MOVEMENT;                                                        +
 ALTER TABLE table_list3 ADD CONSTRAINT table_list3_pkey PRIMARY KEY (id);
(1 row)

drop table table_list3;
--hash table
create table table_hash1 (id int, a date, b varchar)
partition by hash (id)
(
    partition table_hash1_p1,
    partition table_hash1_p2,
    partition table_hash1_p3
);
select * from pg_get_tabledef('table_hash1');
                   pg_get_tabledef                   
-----------------------------------------------------
 SET search_path = test_get_table_def;              +
 CREATE TABLE table_hash1 (                         +
     id integer,                                    +
     a timestamp(0) without time zone,              +
     b character varying                            +
 )                                                  +
 WITH (orientation=row, compression=no)             +
 PARTITION BY HASH (id)                             +
 (                                                  +
     PARTITION table_hash1_p1 TABLESPACE pg_default,+
     PARTITION table_hash1_p2 TABLESPACE pg_default,+
     PARTITION table_hash1_p3 TABLESPACE pg_default +
 )                                                  +
 ENABLE ROW MOVEMENT;
(1 row)

drop table table_hash1;
--subpartition table
CREATE TABLE list_range_1 (
    col_1 integer primary key,
    col_2 integer,
    col_3 character varying(30) unique,
    col_4 integer
)
WITH (orientation=row, compression=no)
PARTITION BY LIST (col_1) SUBPARTITION BY RANGE (col_2)
(
    PARTITION p_list_1 VALUES (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10)
    (
        SUBPARTITION p_range_1_1 VALUES LESS THAN (-10),
        SUBPARTITION p_range_1_2 VALUES LESS THAN (0),
        SUBPARTITION p_range_1_3 VALUES LESS THAN (10),
        SUBPARTITION p_range_1_4 VALUES LESS THAN (20),
        SUBPARTITION p_range_1_5 VALUES LESS THAN (50)
    ),
    PARTITION p_list_2 VALUES (1,2,3,4,5,6,7,8,9,10),
    PARTITION p_list_3 VALUES (11,12,13,14,15,16,17,18,19,20)
    (
        SUBPARTITION p_range_3_1 VALUES LESS THAN (15),
        SUBPARTITION p_range_3_2 VALUES LESS THAN (MAXVALUE)
    ),
    PARTITION p_list_4 VALUES (21,22,23,24,25,26,27,28,29,30)
    (
        SUBPARTITION p_range_4_1 VALUES LESS THAN (-10),
        SUBPARTITION p_range_4_2 VALUES LESS THAN (0),
        SUBPARTITION p_range_4_3 VALUES LESS THAN (10),
        SUBPARTITION p_range_4_4 VALUES LESS THAN (20),
        SUBPARTITION p_range_4_5 VALUES LESS THAN (50)
    ),
    PARTITION p_list_5 VALUES (31,32,33,34,35,36,37,38,39,40),
    PARTITION p_list_6 VALUES (41,42,43,44,45,46,47,48,49,50)
    (
        SUBPARTITION p_range_6_1 VALUES LESS THAN (-10),
        SUBPARTITION p_range_6_2 VALUES LESS THAN (0),
        SUBPARTITION p_range_6_3 VALUES LESS THAN (10),
        SUBPARTITION p_range_6_4 VALUES LESS THAN (20),
        SUBPARTITION p_range_6_5 VALUES LESS THAN (50)
    ),
    PARTITION p_list_7 VALUES (DEFAULT)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "list_range_1_pkey" for table "list_range_1"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "list_range_1_col_3_tableoid_key" for table "list_range_1"
select * from pg_get_tabledef('list_range_1');
                                         pg_get_tabledef                                         
-------------------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                                          +
 CREATE TABLE list_range_1 (                                                                    +
     col_1 integer NOT NULL,                                                                    +
     col_2 integer,                                                                             +
     col_3 character varying(30),                                                               +
     col_4 integer                                                                              +
 )                                                                                              +
 WITH (orientation=row, compression=no)                                                         +
 PARTITION BY LIST (col_1) SUBPARTITION BY RANGE (col_2)                                        +
 (                                                                                              +
     PARTITION p_list_1 VALUES (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10) TABLESPACE pg_default           +
     (                                                                                          +
         SUBPARTITION p_range_1_1 VALUES LESS THAN (-10) TABLESPACE pg_default,                 +
         SUBPARTITION p_range_1_2 VALUES LESS THAN (0) TABLESPACE pg_default,                   +
         SUBPARTITION p_range_1_3 VALUES LESS THAN (10) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_1_4 VALUES LESS THAN (20) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_1_5 VALUES LESS THAN (50) TABLESPACE pg_default                   +
     ),                                                                                         +
     PARTITION p_list_2 VALUES (1,2,3,4,5,6,7,8,9,10) TABLESPACE pg_default                     +
     (                                                                                          +
         SUBPARTITION p_list_2_subpartdefault1 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default+
     ),                                                                                         +
     PARTITION p_list_3 VALUES (11,12,13,14,15,16,17,18,19,20) TABLESPACE pg_default            +
     (                                                                                          +
         SUBPARTITION p_range_3_1 VALUES LESS THAN (15) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_3_2 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default             +
     ),                                                                                         +
     PARTITION p_list_4 VALUES (21,22,23,24,25,26,27,28,29,30) TABLESPACE pg_default            +
     (                                                                                          +
         SUBPARTITION p_range_4_1 VALUES LESS THAN (-10) TABLESPACE pg_default,                 +
         SUBPARTITION p_range_4_2 VALUES LESS THAN (0) TABLESPACE pg_default,                   +
         SUBPARTITION p_range_4_3 VALUES LESS THAN (10) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_4_4 VALUES LESS THAN (20) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_4_5 VALUES LESS THAN (50) TABLESPACE pg_default                   +
     ),                                                                                         +
     PARTITION p_list_5 VALUES (31,32,33,34,35,36,37,38,39,40) TABLESPACE pg_default            +
     (                                                                                          +
         SUBPARTITION p_list_5_subpartdefault1 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default+
     ),                                                                                         +
     PARTITION p_list_6 VALUES (41,42,43,44,45,46,47,48,49,50) TABLESPACE pg_default            +
     (                                                                                          +
         SUBPARTITION p_range_6_1 VALUES LESS THAN (-10) TABLESPACE pg_default,                 +
         SUBPARTITION p_range_6_2 VALUES LESS THAN (0) TABLESPACE pg_default,                   +
         SUBPARTITION p_range_6_3 VALUES LESS THAN (10) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_6_4 VALUES LESS THAN (20) TABLESPACE pg_default,                  +
         SUBPARTITION p_range_6_5 VALUES LESS THAN (50) TABLESPACE pg_default                   +
     ),                                                                                         +
     PARTITION p_list_7 VALUES (DEFAULT) TABLESPACE pg_default                                  +
     (                                                                                          +
         SUBPARTITION p_list_7_subpartdefault1 VALUES LESS THAN (MAXVALUE) TABLESPACE pg_default+
     )                                                                                          +
 )                                                                                              +
 ENABLE ROW MOVEMENT;                                                                           +
 ALTER TABLE list_range_1 ADD CONSTRAINT list_range_1_col_3_tableoid_key UNIQUE (col_3);        +
 ALTER TABLE list_range_1 ADD CONSTRAINT list_range_1_pkey PRIMARY KEY (col_1);
(1 row)

drop table list_range_1;
CREATE TABLE list_hash_2 (
    col_1 integer primary key,
    col_2 integer,
    col_3 character varying(30) unique,
    col_4 integer
)
WITH (orientation=row, compression=no)
PARTITION BY LIST (col_2) SUBPARTITION BY HASH (col_3)
(
    PARTITION p_list_1 VALUES (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10)
    (
        SUBPARTITION p_hash_1_1,
        SUBPARTITION p_hash_1_2,
        SUBPARTITION p_hash_1_3
    ),
    PARTITION p_list_2 VALUES (1,2,3,4,5,6,7,8,9,10),
    PARTITION p_list_3 VALUES (11,12,13,14,15,16,17,18,19,20)
    (
        SUBPARTITION p_hash_3_1,
        SUBPARTITION p_hash_3_2
    ),
    PARTITION p_list_4 VALUES (21,22,23,24,25,26,27,28,29,30)
    (
        SUBPARTITION p_hash_4_1,
        SUBPARTITION p_hash_4_2,
        SUBPARTITION p_hash_4_3,
        SUBPARTITION p_hash_4_4,
        SUBPARTITION p_hash_4_5
    ),
    PARTITION p_list_5 VALUES (31,32,33,34,35,36,37,38,39,40),
    PARTITION p_list_6 VALUES (41,42,43,44,45,46,47,48,49,50)
    (
        SUBPARTITION p_hash_6_1,
        SUBPARTITION p_hash_6_2,
        SUBPARTITION p_hash_6_3,
        SUBPARTITION p_hash_6_4,
        SUBPARTITION p_hash_6_5
    ),
    PARTITION p_list_7 VALUES (DEFAULT)
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "list_hash_2_pkey" for table "list_hash_2"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "list_hash_2_col_3_tableoid_key" for table "list_hash_2"
create unique index list_hash_2_idx1 on list_hash_2(col_2, col_3, col_4) local;
create index list_hash_2_idx2 on list_hash_2(col_3, col_1) local;
create index list_hash_2_idx3 on list_hash_2(col_4) global;
select * from pg_get_tabledef('list_hash_2');
                                       pg_get_tabledef                                        
----------------------------------------------------------------------------------------------
 SET search_path = test_get_table_def;                                                       +
 CREATE TABLE list_hash_2 (                                                                  +
     col_1 integer NOT NULL,                                                                 +
     col_2 integer,                                                                          +
     col_3 character varying(30),                                                            +
     col_4 integer                                                                           +
 )                                                                                           +
 WITH (orientation=row, compression=no)                                                      +
 PARTITION BY LIST (col_2) SUBPARTITION BY HASH (col_3)                                      +
 (                                                                                           +
     PARTITION p_list_1 VALUES (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10) TABLESPACE pg_default        +
     (                                                                                       +
         SUBPARTITION p_hash_1_1 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_1_2 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_1_3 TABLESPACE pg_default                                       +
     ),                                                                                      +
     PARTITION p_list_2 VALUES (1,2,3,4,5,6,7,8,9,10) TABLESPACE pg_default                  +
     (                                                                                       +
         SUBPARTITION p_list_2_subpartdefault1 TABLESPACE pg_default                         +
     ),                                                                                      +
     PARTITION p_list_3 VALUES (11,12,13,14,15,16,17,18,19,20) TABLESPACE pg_default         +
     (                                                                                       +
         SUBPARTITION p_hash_3_1 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_3_2 TABLESPACE pg_default                                       +
     ),                                                                                      +
     PARTITION p_list_4 VALUES (21,22,23,24,25,26,27,28,29,30) TABLESPACE pg_default         +
     (                                                                                       +
         SUBPARTITION p_hash_4_1 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_4_2 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_4_3 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_4_4 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_4_5 TABLESPACE pg_default                                       +
     ),                                                                                      +
     PARTITION p_list_5 VALUES (31,32,33,34,35,36,37,38,39,40) TABLESPACE pg_default         +
     (                                                                                       +
         SUBPARTITION p_list_5_subpartdefault1 TABLESPACE pg_default                         +
     ),                                                                                      +
     PARTITION p_list_6 VALUES (41,42,43,44,45,46,47,48,49,50) TABLESPACE pg_default         +
     (                                                                                       +
         SUBPARTITION p_hash_6_1 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_6_2 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_6_3 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_6_4 TABLESPACE pg_default,                                      +
         SUBPARTITION p_hash_6_5 TABLESPACE pg_default                                       +
     ),                                                                                      +
     PARTITION p_list_7 VALUES (DEFAULT) TABLESPACE pg_default                               +
     (                                                                                       +
         SUBPARTITION p_list_7_subpartdefault1 TABLESPACE pg_default                         +
     )                                                                                       +
 )                                                                                           +
 ENABLE ROW MOVEMENT;                                                                        +
 CREATE INDEX list_hash_2_idx3 ON list_hash_2 USING btree (col_4) TABLESPACE pg_default;     +
 CREATE INDEX list_hash_2_idx2 ON list_hash_2 USING btree (col_3, col_1) LOCAL(              +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_1_1_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_1_2_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_1_3_col_3_col_1_idx                                             +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_2_subpartdefault1_col_3_col_1_idx                               +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_3_1_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_3_2_col_3_col_1_idx                                             +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_4_1_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_4_2_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_4_3_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_4_4_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_4_5_col_3_col_1_idx                                             +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_5_subpartdefault1_col_3_col_1_idx                               +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_6_1_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_6_2_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_6_3_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_6_4_col_3_col_1_idx,                                            +
         SUBPARTITION p_hash_6_5_col_3_col_1_idx                                             +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_7_subpartdefault1_col_3_col_1_idx                               +
     )                                                                                       +
 )  TABLESPACE pg_default;                                                                   +
 CREATE UNIQUE INDEX list_hash_2_idx1 ON list_hash_2 USING btree (col_2, col_3, col_4) LOCAL(+
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_1_1_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_1_2_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_1_3_col_2_col_3_col_4_idx                                       +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_2_subpartdefault1_col_2_col_3_col_4_idx                         +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_3_1_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_3_2_col_2_col_3_col_4_idx                                       +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_4_1_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_4_2_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_4_3_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_4_4_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_4_5_col_2_col_3_col_4_idx                                       +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_5_subpartdefault1_col_2_col_3_col_4_idx                         +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_hash_6_1_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_6_2_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_6_3_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_6_4_col_2_col_3_col_4_idx,                                      +
         SUBPARTITION p_hash_6_5_col_2_col_3_col_4_idx                                       +
     ),                                                                                      +
     PARTITION partition_name(                                                               +
         SUBPARTITION p_list_7_subpartdefault1_col_2_col_3_col_4_idx                         +
     )                                                                                       +
 )  TABLESPACE pg_default;                                                                   +
 ALTER TABLE list_hash_2 ADD CONSTRAINT list_hash_2_col_3_tableoid_key UNIQUE (col_3);       +
 ALTER TABLE list_hash_2 ADD CONSTRAINT list_hash_2_pkey PRIMARY KEY (col_1);
(1 row)

drop table list_hash_2;
create table generated_test(a int, b int generated always as (length((a)::text)) stored);
select * from pg_get_tabledef('generated_test');
                       pg_get_tabledef                        
--------------------------------------------------------------
 SET search_path = test_get_table_def;                       +
 CREATE TABLE generated_test (                               +
     a integer,                                              +
     b integer GENERATED ALWAYS AS (length((a)::text)) STORED+
 )                                                           +
 WITH (orientation=row, compression=no);
(1 row)

drop table generated_test;
select * from pg_get_tabledef('pg_class');
                                                      pg_get_tabledef                                                       
----------------------------------------------------------------------------------------------------------------------------
 SET search_path = pg_catalog;                                                                                             +
 CREATE TABLE pg_class (                                                                                                   +
     relname name NOT NULL,                                                                                                +
     relnamespace oid NOT NULL,                                                                                            +
     reltype oid NOT NULL,                                                                                                 +
     reloftype oid NOT NULL,                                                                                               +
     relowner oid NOT NULL,                                                                                                +
     relam oid NOT NULL,                                                                                                   +
     relfilenode oid NOT NULL,                                                                                             +
     reltablespace oid NOT NULL,                                                                                           +
     relpages double precision NOT NULL,                                                                                   +
     reltuples double precision NOT NULL,                                                                                  +
     relallvisible integer NOT NULL,                                                                                       +
     reltoastrelid oid NOT NULL,                                                                                           +
     reltoastidxid oid NOT NULL,                                                                                           +
     reldeltarelid oid NOT NULL,                                                                                           +
     reldeltaidx oid NOT NULL,                                                                                             +
     relcudescrelid oid NOT NULL,                                                                                          +
     relcudescidx oid NOT NULL,                                                                                            +
     relhasindex boolean NOT NULL,                                                                                         +
     relisshared boolean NOT NULL,                                                                                         +
     relpersistence "char" NOT NULL,                                                                                       +
     relkind "char" NOT NULL,                                                                                              +
     relnatts smallint NOT NULL,                                                                                           +
     relchecks smallint NOT NULL,                                                                                          +
     relhasoids boolean NOT NULL,                                                                                          +
     relhaspkey boolean NOT NULL,                                                                                          +
     relhasrules boolean NOT NULL,                                                                                         +
     relhastriggers boolean NOT NULL,                                                                                      +
     relhassubclass boolean NOT NULL,                                                                                      +
     relcmprs tinyint NOT NULL,                                                                                            +
     relhasclusterkey boolean NOT NULL,                                                                                    +
     relrowmovement boolean NOT NULL,                                                                                      +
     parttype "char" NOT NULL,                                                                                             +
     relfrozenxid xid32 NOT NULL,                                                                                          +
     relacl aclitem[],                                                                                                     +
     reloptions text[],                                                                                                    +
     relreplident "char",                                                                                                  +
     relfrozenxid64 xid,                                                                                                   +
     relbucket oid,                                                                                                        +
     relbucketkey int2vector,                                                                                              +
     relminmxid xid                                                                                                        +
 )                                                                                                                         +
 DISTRIBUTE BY REPLICATION;                                                                                                +
 CREATE UNIQUE INDEX pg_class_oid_index ON pg_class USING btree (oid) TABLESPACE pg_default;                               +
 CREATE UNIQUE INDEX pg_class_relname_nsp_index ON pg_class USING btree (relname, relnamespace) TABLESPACE pg_default;     +
 CREATE INDEX pg_class_tblspc_relfilenode_index ON pg_class USING btree (reltablespace, relfilenode) TABLESPACE pg_default;
(1 row)

reset current_schema;
drop schema test_get_table_def cascade;
